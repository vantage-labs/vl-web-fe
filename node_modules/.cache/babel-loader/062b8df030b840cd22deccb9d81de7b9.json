{"ast":null,"code":"// packages/react/use-callback-ref/src/useCallbackRef.tsx\nimport * as React from \"react\";\n\nfunction useCallbackRef(callback) {\n  const callbackRef = React.useRef(callback);\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n  return React.useMemo(() => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return callbackRef.current?.(...args);\n  }, []);\n}\n\nexport { useCallbackRef };","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;;AAMA,SAASC,cAAT,CAA2DC,QAA3D,EAAuF;AACrF,QAAMC,cAAoBH,aAAOE,QAAP,CAA1B;AAEMF,kBAAU,MAAM;AACpBG,gBAAYC,OAAZ,GAAsBF,QAAtB;AACD,GAFK;AAKN,SAAaF,cAAQ,MAAO;AAAA,sCAAIK,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAaF,YAAYC,OAAZ,GAAsB,GAAGC,IAAzB,CAAb;AAAA,GAAf,EAAkE,EAAlE,CAAb;AACF","names":["React","useCallbackRef","callback","callbackRef","current","args"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-use-callback-ref/src/useCallbackRef.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nexport { useCallbackRef };\n"]},"metadata":{},"sourceType":"module"}