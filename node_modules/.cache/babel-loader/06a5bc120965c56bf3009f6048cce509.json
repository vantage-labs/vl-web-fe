{"ast":null,"code":"\"use client\"; // packages/react/alert-dialog/src/AlertDialog.tsx\n\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { createDialogScope } from \"@radix-ui/react-dialog\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Slottable } from \"@radix-ui/react-slot\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar ROOT_NAME = \"AlertDialog\";\nvar [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [createDialogScope]);\nvar useDialogScope = createDialogScope();\n\nvar AlertDialog = props => {\n  const {\n    __scopeAlertDialog,\n    ...alertDialogProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Root, { ...dialogScope,\n    ...alertDialogProps,\n    modal: true\n  });\n};\n\nAlertDialog.displayName = ROOT_NAME;\nvar TRIGGER_NAME = \"AlertDialogTrigger\";\nvar AlertDialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...triggerProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Trigger, { ...dialogScope,\n    ...triggerProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"AlertDialogPortal\";\n\nvar AlertDialogPortal = props => {\n  const {\n    __scopeAlertDialog,\n    ...portalProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Portal, { ...dialogScope,\n    ...portalProps\n  });\n};\n\nAlertDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"AlertDialogOverlay\";\nvar AlertDialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...overlayProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Overlay, { ...dialogScope,\n    ...overlayProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogOverlay.displayName = OVERLAY_NAME;\nvar CONTENT_NAME = \"AlertDialogContent\";\nvar [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME);\nvar AlertDialogContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    children,\n    ...contentProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  const cancelRef = React.useRef(null);\n  return /* @__PURE__ */jsx(DialogPrimitive.WarningProvider, {\n    contentName: CONTENT_NAME,\n    titleName: TITLE_NAME,\n    docsSlug: \"alert-dialog\",\n    children: /* @__PURE__ */jsx(AlertDialogContentProvider, {\n      scope: __scopeAlertDialog,\n      cancelRef,\n      children: /* @__PURE__ */jsxs(DialogPrimitive.Content, {\n        role: \"alertdialog\",\n        ...dialogScope,\n        ...contentProps,\n        ref: composedRefs,\n        onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, event => {\n          event.preventDefault();\n          cancelRef.current?.focus({\n            preventScroll: true\n          });\n        }),\n        onPointerDownOutside: event => event.preventDefault(),\n        onInteractOutside: event => event.preventDefault(),\n        children: [/* @__PURE__ */jsx(Slottable, {\n          children\n        }), /* @__PURE__ */jsx(DescriptionWarning, {\n          contentRef\n        })]\n      })\n    })\n  });\n});\nAlertDialogContent.displayName = CONTENT_NAME;\nvar TITLE_NAME = \"AlertDialogTitle\";\nvar AlertDialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...titleProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Title, { ...dialogScope,\n    ...titleProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"AlertDialogDescription\";\nvar AlertDialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...descriptionProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Description, { ...dialogScope,\n    ...descriptionProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\nvar ACTION_NAME = \"AlertDialogAction\";\nvar AlertDialogAction = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...actionProps\n  } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Close, { ...dialogScope,\n    ...actionProps,\n    ref: forwardedRef\n  });\n});\nAlertDialogAction.displayName = ACTION_NAME;\nvar CANCEL_NAME = \"AlertDialogCancel\";\nvar AlertDialogCancel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAlertDialog,\n    ...cancelProps\n  } = props;\n  const {\n    cancelRef\n  } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  const ref = useComposedRefs(forwardedRef, cancelRef);\n  return /* @__PURE__ */jsx(DialogPrimitive.Close, { ...dialogScope,\n    ...cancelProps,\n    ref\n  });\n});\nAlertDialogCancel.displayName = CANCEL_NAME;\n\nvar DescriptionWarning = _ref => {\n  let {\n    contentRef\n  } = _ref;\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(contentRef.current?.getAttribute(\"aria-describedby\"));\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n  return null;\n};\n\nvar Root2 = AlertDialog;\nvar Trigger2 = AlertDialogTrigger;\nvar Portal2 = AlertDialogPortal;\nvar Overlay2 = AlertDialogOverlay;\nvar Content2 = AlertDialogContent;\nvar Action = AlertDialogAction;\nvar Cancel = AlertDialogCancel;\nvar Title2 = AlertDialogTitle;\nvar Description2 = AlertDialogDescription;\nexport { Action, AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogOverlay, AlertDialogPortal, AlertDialogTitle, AlertDialogTrigger, Cancel, Content2 as Content, Description2 as Description, Overlay2 as Overlay, Portal2 as Portal, Root2 as Root, Title2 as Title, Trigger2 as Trigger, createAlertDialogScope };","map":{"version":3,"mappings":"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","names":["React","createContextScope","useComposedRefs","DialogPrimitive","createDialogScope","composeEventHandlers","Slottable","jsxs","ROOT_NAME","createAlertDialogContext","createAlertDialogScope","useDialogScope","AlertDialog","props","__scopeAlertDialog","alertDialogProps","dialogScope","modal","displayName","TRIGGER_NAME","AlertDialogTrigger","forwardedRef","triggerProps","ref","PORTAL_NAME","AlertDialogPortal","portalProps","OVERLAY_NAME","AlertDialogOverlay","overlayProps","CONTENT_NAME","AlertDialogContentProvider","useAlertDialogContentContext","AlertDialogContent","children","contentProps","contentRef","composedRefs","cancelRef","contentName","titleName","TITLE_NAME","docsSlug","scope","role","onOpenAutoFocus","event","preventDefault","current","focus","preventScroll","onPointerDownOutside","onInteractOutside","DescriptionWarning","AlertDialogTitle","titleProps","DESCRIPTION_NAME","AlertDialogDescription","descriptionProps","ACTION_NAME","AlertDialogAction","actionProps","CANCEL_NAME","AlertDialogCancel","cancelProps","MESSAGE","hasDescription","document","getElementById","getAttribute","console","warn","Root","Trigger","Portal","Overlay","Content","Action","Cancel","Title","Description"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-alert-dialog/src/AlertDialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { createDialogScope } from '@radix-ui/react-dialog';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Slottable } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_NAME = 'AlertDialog';\n\ntype ScopedProps<P> = P & { __scopeAlertDialog?: Scope };\nconst [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [\n  createDialogScope,\n]);\nconst useDialogScope = createDialogScope();\n\ntype DialogProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>;\ninterface AlertDialogProps extends Omit<DialogProps, 'modal'> {}\n\nconst AlertDialog: React.FC<AlertDialogProps> = (props: ScopedProps<AlertDialogProps>) => {\n  const { __scopeAlertDialog, ...alertDialogProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Root {...dialogScope} {...alertDialogProps} modal={true} />;\n};\n\nAlertDialog.displayName = ROOT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTrigger\n * -----------------------------------------------------------------------------------------------*/\nconst TRIGGER_NAME = 'AlertDialogTrigger';\n\ntype AlertDialogTriggerElement = React.ElementRef<typeof DialogPrimitive.Trigger>;\ntype DialogTriggerProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>;\ninterface AlertDialogTriggerProps extends DialogTriggerProps {}\n\nconst AlertDialogTrigger = React.forwardRef<AlertDialogTriggerElement, AlertDialogTriggerProps>(\n  (props: ScopedProps<AlertDialogTriggerProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...triggerProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Trigger {...dialogScope} {...triggerProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'AlertDialogPortal';\n\ntype DialogPortalProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>;\ninterface AlertDialogPortalProps extends DialogPortalProps {}\n\nconst AlertDialogPortal: React.FC<AlertDialogPortalProps> = (\n  props: ScopedProps<AlertDialogPortalProps>\n) => {\n  const { __scopeAlertDialog, ...portalProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Portal {...dialogScope} {...portalProps} />;\n};\n\nAlertDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'AlertDialogOverlay';\n\ntype AlertDialogOverlayElement = React.ElementRef<typeof DialogPrimitive.Overlay>;\ntype DialogOverlayProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>;\ninterface AlertDialogOverlayProps extends DialogOverlayProps {}\n\nconst AlertDialogOverlay = React.forwardRef<AlertDialogOverlayElement, AlertDialogOverlayProps>(\n  (props: ScopedProps<AlertDialogOverlayProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...overlayProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Overlay {...dialogScope} {...overlayProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AlertDialogContent';\n\ntype AlertDialogContentContextValue = {\n  cancelRef: React.MutableRefObject<AlertDialogCancelElement | null>;\n};\n\nconst [AlertDialogContentProvider, useAlertDialogContentContext] =\n  createAlertDialogContext<AlertDialogContentContextValue>(CONTENT_NAME);\n\ntype AlertDialogContentElement = React.ElementRef<typeof DialogPrimitive.Content>;\ntype DialogContentProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>;\ninterface AlertDialogContentProps\n  extends Omit<DialogContentProps, 'onPointerDownOutside' | 'onInteractOutside'> {}\n\nconst AlertDialogContent = React.forwardRef<AlertDialogContentElement, AlertDialogContentProps>(\n  (props: ScopedProps<AlertDialogContentProps>, forwardedRef) => {\n    const { __scopeAlertDialog, children, ...contentProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const contentRef = React.useRef<AlertDialogContentElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const cancelRef = React.useRef<AlertDialogCancelElement | null>(null);\n\n    return (\n      <DialogPrimitive.WarningProvider\n        contentName={CONTENT_NAME}\n        titleName={TITLE_NAME}\n        docsSlug=\"alert-dialog\"\n      >\n        <AlertDialogContentProvider scope={__scopeAlertDialog} cancelRef={cancelRef}>\n          <DialogPrimitive.Content\n            role=\"alertdialog\"\n            {...dialogScope}\n            {...contentProps}\n            ref={composedRefs}\n            onOpenAutoFocus={composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {\n              event.preventDefault();\n              cancelRef.current?.focus({ preventScroll: true });\n            })}\n            onPointerDownOutside={(event) => event.preventDefault()}\n            onInteractOutside={(event) => event.preventDefault()}\n          >\n            {/**\n             * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`\n             * around everything, otherwise the `DescriptionWarning` would be rendered straight away.\n             * This is because we want the accessibility checks to run only once the content is actually\n             * open and that behaviour is already encapsulated in `DialogContent`.\n             */}\n            <Slottable>{children}</Slottable>\n            {process.env.NODE_ENV === 'development' && (\n              <DescriptionWarning contentRef={contentRef} />\n            )}\n          </DialogPrimitive.Content>\n        </AlertDialogContentProvider>\n      </DialogPrimitive.WarningProvider>\n    );\n  }\n);\n\nAlertDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'AlertDialogTitle';\n\ntype AlertDialogTitleElement = React.ElementRef<typeof DialogPrimitive.Title>;\ntype DialogTitleProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>;\ninterface AlertDialogTitleProps extends DialogTitleProps {}\n\nconst AlertDialogTitle = React.forwardRef<AlertDialogTitleElement, AlertDialogTitleProps>(\n  (props: ScopedProps<AlertDialogTitleProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...titleProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Title {...dialogScope} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'AlertDialogDescription';\n\ntype AlertDialogDescriptionElement = React.ElementRef<typeof DialogPrimitive.Description>;\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>;\ninterface AlertDialogDescriptionProps extends DialogDescriptionProps {}\n\nconst AlertDialogDescription = React.forwardRef<\n  AlertDialogDescriptionElement,\n  AlertDialogDescriptionProps\n>((props: ScopedProps<AlertDialogDescriptionProps>, forwardedRef) => {\n  const { __scopeAlertDialog, ...descriptionProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Description {...dialogScope} {...descriptionProps} ref={forwardedRef} />;\n});\n\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACTION_NAME = 'AlertDialogAction';\n\ntype AlertDialogActionElement = React.ElementRef<typeof DialogPrimitive.Close>;\ntype DialogCloseProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogActionProps extends DialogCloseProps {}\n\nconst AlertDialogAction = React.forwardRef<AlertDialogActionElement, AlertDialogActionProps>(\n  (props: ScopedProps<AlertDialogActionProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...actionProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Close {...dialogScope} {...actionProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogAction.displayName = ACTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogCancel\n * -----------------------------------------------------------------------------------------------*/\n\nconst CANCEL_NAME = 'AlertDialogCancel';\n\ntype AlertDialogCancelElement = React.ElementRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogCancelProps extends DialogCloseProps {}\n\nconst AlertDialogCancel = React.forwardRef<AlertDialogCancelElement, AlertDialogCancelProps>(\n  (props: ScopedProps<AlertDialogCancelProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...cancelProps } = props;\n    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const ref = useComposedRefs(forwardedRef, cancelRef);\n    return <DialogPrimitive.Close {...dialogScope} {...cancelProps} ref={ref} />;\n  }\n);\n\nAlertDialogCancel.displayName = CANCEL_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<AlertDialogContentElement | null>;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef }) => {\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(\n      contentRef.current?.getAttribute('aria-describedby')!\n    );\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = AlertDialog;\nconst Trigger = AlertDialogTrigger;\nconst Portal = AlertDialogPortal;\nconst Overlay = AlertDialogOverlay;\nconst Content = AlertDialogContent;\nconst Action = AlertDialogAction;\nconst Cancel = AlertDialogCancel;\nconst Title = AlertDialogTitle;\nconst Description = AlertDialogDescription;\n\nexport {\n  createAlertDialogScope,\n  //\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Action,\n  Cancel,\n  Title,\n  Description,\n};\nexport type {\n  AlertDialogProps,\n  AlertDialogTriggerProps,\n  AlertDialogPortalProps,\n  AlertDialogOverlayProps,\n  AlertDialogContentProps,\n  AlertDialogActionProps,\n  AlertDialogCancelProps,\n  AlertDialogTitleProps,\n  AlertDialogDescriptionProps,\n};\n"]},"metadata":{},"sourceType":"module"}