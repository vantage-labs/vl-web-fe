{"ast":null,"code":"\"use client\"; // packages/react/avatar/src/Avatar.tsx\n\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar AVATAR_NAME = \"Avatar\";\nvar [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\nvar [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);\nvar Avatar = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAvatar,\n    ...avatarProps\n  } = props;\n  const [imageLoadingStatus, setImageLoadingStatus] = React.useState(\"idle\");\n  return /* @__PURE__ */jsx(AvatarProvider, {\n    scope: __scopeAvatar,\n    imageLoadingStatus,\n    onImageLoadingStatusChange: setImageLoadingStatus,\n    children: /* @__PURE__ */jsx(Primitive.span, { ...avatarProps,\n      ref: forwardedRef\n    })\n  });\n});\nAvatar.displayName = AVATAR_NAME;\nvar IMAGE_NAME = \"AvatarImage\";\nvar AvatarImage = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAvatar,\n    src,\n    onLoadingStatusChange = () => {},\n    ...imageProps\n  } = props;\n  const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n  const imageLoadingStatus = useImageLoadingStatus(src, imageProps.referrerPolicy);\n  const handleLoadingStatusChange = useCallbackRef(status => {\n    onLoadingStatusChange(status);\n    context.onImageLoadingStatusChange(status);\n  });\n  useLayoutEffect(() => {\n    if (imageLoadingStatus !== \"idle\") {\n      handleLoadingStatusChange(imageLoadingStatus);\n    }\n  }, [imageLoadingStatus, handleLoadingStatusChange]);\n  return imageLoadingStatus === \"loaded\" ? /* @__PURE__ */jsx(Primitive.img, { ...imageProps,\n    ref: forwardedRef,\n    src\n  }) : null;\n});\nAvatarImage.displayName = IMAGE_NAME;\nvar FALLBACK_NAME = \"AvatarFallback\";\nvar AvatarFallback = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAvatar,\n    delayMs,\n    ...fallbackProps\n  } = props;\n  const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n  const [canRender, setCanRender] = React.useState(delayMs === void 0);\n  React.useEffect(() => {\n    if (delayMs !== void 0) {\n      const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n      return () => window.clearTimeout(timerId);\n    }\n  }, [delayMs]);\n  return canRender && context.imageLoadingStatus !== \"loaded\" ? /* @__PURE__ */jsx(Primitive.span, { ...fallbackProps,\n    ref: forwardedRef\n  }) : null;\n});\nAvatarFallback.displayName = FALLBACK_NAME;\n\nfunction useImageLoadingStatus(src, referrerPolicy) {\n  const [loadingStatus, setLoadingStatus] = React.useState(\"idle\");\n  useLayoutEffect(() => {\n    if (!src) {\n      setLoadingStatus(\"error\");\n      return;\n    }\n\n    let isMounted = true;\n    const image = new window.Image();\n\n    const updateStatus = status => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n\n    setLoadingStatus(\"loading\");\n    image.onload = updateStatus(\"loaded\");\n    image.onerror = updateStatus(\"error\");\n    image.src = src;\n\n    if (referrerPolicy) {\n      image.referrerPolicy = referrerPolicy;\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [src, referrerPolicy]);\n  return loadingStatus;\n}\n\nvar Root = Avatar;\nvar Image = AvatarImage;\nvar Fallback = AvatarFallback;\nexport { Avatar, AvatarFallback, AvatarImage, Fallback, Image, Root, createAvatarScope };","map":{"version":3,"mappings":"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","names":["React","createContextScope","useCallbackRef","useLayoutEffect","Primitive","AVATAR_NAME","createAvatarContext","createAvatarScope","AvatarProvider","useAvatarContext","Avatar","props","forwardedRef","__scopeAvatar","avatarProps","imageLoadingStatus","setImageLoadingStatus","scope","onImageLoadingStatusChange","children","span","ref","displayName","IMAGE_NAME","AvatarImage","src","onLoadingStatusChange","imageProps","context","useImageLoadingStatus","referrerPolicy","handleLoadingStatusChange","status","img","FALLBACK_NAME","AvatarFallback","delayMs","fallbackProps","canRender","setCanRender","timerId","window","setTimeout","clearTimeout","loadingStatus","setLoadingStatus","isMounted","image","Image","updateStatus","onload","onerror","Root","Fallback"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-avatar/src/Avatar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Avatar\n * -----------------------------------------------------------------------------------------------*/\n\nconst AVATAR_NAME = 'Avatar';\n\ntype ScopedProps<P> = P & { __scopeAvatar?: Scope };\nconst [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\n\ntype ImageLoadingStatus = 'idle' | 'loading' | 'loaded' | 'error';\n\ntype AvatarContextValue = {\n  imageLoadingStatus: ImageLoadingStatus;\n  onImageLoadingStatusChange(status: ImageLoadingStatus): void;\n};\n\nconst [AvatarProvider, useAvatarContext] = createAvatarContext<AvatarContextValue>(AVATAR_NAME);\n\ntype AvatarElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface AvatarProps extends PrimitiveSpanProps {}\n\nconst Avatar = React.forwardRef<AvatarElement, AvatarProps>(\n  (props: ScopedProps<AvatarProps>, forwardedRef) => {\n    const { __scopeAvatar, ...avatarProps } = props;\n    const [imageLoadingStatus, setImageLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n    return (\n      <AvatarProvider\n        scope={__scopeAvatar}\n        imageLoadingStatus={imageLoadingStatus}\n        onImageLoadingStatusChange={setImageLoadingStatus}\n      >\n        <Primitive.span {...avatarProps} ref={forwardedRef} />\n      </AvatarProvider>\n    );\n  }\n);\n\nAvatar.displayName = AVATAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarImage\n * -----------------------------------------------------------------------------------------------*/\n\nconst IMAGE_NAME = 'AvatarImage';\n\ntype AvatarImageElement = React.ElementRef<typeof Primitive.img>;\ntype PrimitiveImageProps = React.ComponentPropsWithoutRef<typeof Primitive.img>;\ninterface AvatarImageProps extends PrimitiveImageProps {\n  onLoadingStatusChange?: (status: ImageLoadingStatus) => void;\n}\n\nconst AvatarImage = React.forwardRef<AvatarImageElement, AvatarImageProps>(\n  (props: ScopedProps<AvatarImageProps>, forwardedRef) => {\n    const { __scopeAvatar, src, onLoadingStatusChange = () => {}, ...imageProps } = props;\n    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n    const imageLoadingStatus = useImageLoadingStatus(src, imageProps.referrerPolicy);\n    const handleLoadingStatusChange = useCallbackRef((status: ImageLoadingStatus) => {\n      onLoadingStatusChange(status);\n      context.onImageLoadingStatusChange(status);\n    });\n\n    useLayoutEffect(() => {\n      if (imageLoadingStatus !== 'idle') {\n        handleLoadingStatusChange(imageLoadingStatus);\n      }\n    }, [imageLoadingStatus, handleLoadingStatusChange]);\n\n    return imageLoadingStatus === 'loaded' ? (\n      <Primitive.img {...imageProps} ref={forwardedRef} src={src} />\n    ) : null;\n  }\n);\n\nAvatarImage.displayName = IMAGE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarFallback\n * -----------------------------------------------------------------------------------------------*/\n\nconst FALLBACK_NAME = 'AvatarFallback';\n\ntype AvatarFallbackElement = React.ElementRef<typeof Primitive.span>;\ninterface AvatarFallbackProps extends PrimitiveSpanProps {\n  delayMs?: number;\n}\n\nconst AvatarFallback = React.forwardRef<AvatarFallbackElement, AvatarFallbackProps>(\n  (props: ScopedProps<AvatarFallbackProps>, forwardedRef) => {\n    const { __scopeAvatar, delayMs, ...fallbackProps } = props;\n    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n    const [canRender, setCanRender] = React.useState(delayMs === undefined);\n\n    React.useEffect(() => {\n      if (delayMs !== undefined) {\n        const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n        return () => window.clearTimeout(timerId);\n      }\n    }, [delayMs]);\n\n    return canRender && context.imageLoadingStatus !== 'loaded' ? (\n      <Primitive.span {...fallbackProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nAvatarFallback.displayName = FALLBACK_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction useImageLoadingStatus(src?: string, referrerPolicy?: React.HTMLAttributeReferrerPolicy) {\n  const [loadingStatus, setLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n\n  useLayoutEffect(() => {\n    if (!src) {\n      setLoadingStatus('error');\n      return;\n    }\n\n    let isMounted = true;\n    const image = new window.Image();\n\n    const updateStatus = (status: ImageLoadingStatus) => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n\n    setLoadingStatus('loading');\n    image.onload = updateStatus('loaded');\n    image.onerror = updateStatus('error');\n    image.src = src;\n    if (referrerPolicy) {\n      image.referrerPolicy = referrerPolicy;\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [src, referrerPolicy]);\n\n  return loadingStatus;\n}\nconst Root = Avatar;\nconst Image = AvatarImage;\nconst Fallback = AvatarFallback;\n\nexport {\n  createAvatarScope,\n  //\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n  //\n  Root,\n  Image,\n  Fallback,\n};\nexport type { AvatarProps, AvatarImageProps, AvatarFallbackProps };\n"]},"metadata":{},"sourceType":"module"}