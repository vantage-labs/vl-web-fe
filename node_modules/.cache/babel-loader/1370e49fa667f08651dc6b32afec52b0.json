{"ast":null,"code":"// packages/react/context/src/createContext.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction createContext2(rootComponentName, defaultContext) {\n  const Context = React.createContext(defaultContext);\n\n  const Provider = props => {\n    const {\n      children,\n      ...context\n    } = props;\n    const value = React.useMemo(() => context, Object.values(context));\n    return /* @__PURE__ */jsx(Context.Provider, {\n      value,\n      children\n    });\n  };\n\n  Provider.displayName = rootComponentName + \"Provider\";\n\n  function useContext2(consumerName) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== void 0) return defaultContext;\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  return [Provider, useContext2];\n}\n\nfunction createContextScope(scopeName) {\n  let createContextScopeDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let defaultContexts = [];\n\n  function createContext3(rootComponentName, defaultContext) {\n    const BaseContext = React.createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    const Provider = props => {\n      const {\n        scope,\n        children,\n        ...context\n      } = props;\n      const Context = scope?.[scopeName]?.[index] || BaseContext;\n      const value = React.useMemo(() => context, Object.values(context));\n      return /* @__PURE__ */jsx(Context.Provider, {\n        value,\n        children\n      });\n    };\n\n    Provider.displayName = rootComponentName + \"Provider\";\n\n    function useContext2(consumerName, scope) {\n      const Context = scope?.[scopeName]?.[index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== void 0) return defaultContext;\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    return [Provider, useContext2];\n  }\n\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(() => ({\n        [`__scope${scopeName}`]: { ...scope,\n          [scopeName]: contexts\n        }\n      }), [scope, contexts]);\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext3, composeContextScopes(createScope, ...createContextScopeDeps)];\n}\n\nfunction composeContextScopes() {\n  for (var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++) {\n    scopes[_key] = arguments[_key];\n  }\n\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope = () => {\n    const scopeHooks = scopes.map(createScope2 => ({\n      useScope: createScope2(),\n      scopeName: createScope2.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes2, _ref) => {\n        let {\n          useScope,\n          scopeName\n        } = _ref;\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes2,\n          ...currentScope\n        };\n      }, {});\n      return React.useMemo(() => ({\n        [`__scope${baseScope.scopeName}`]: nextScopes\n      }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\nexport { createContext2 as createContext, createContextScope };","map":{"version":3,"mappings":"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","names":["React","createContext","rootComponentName","defaultContext","Context","Provider","props","children","context","value","Object","values","displayName","useContext","consumerName","Error","createContextScope","scopeName","createContextScopeDeps","defaultContexts","BaseContext","index","length","scope","createScope","scopeContexts","map","useScope","contexts","composeContextScopes","scopes","baseScope","scopeHooks","useComposedScopes","overrideScopes","nextScopes","reduce","scopeProps","currentScope"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-context/src/createContext.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  const Provider: React.FC<ContextValueType & { children: React.ReactNode }> = (props) => {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  };\n\n  Provider.displayName = rootComponentName + 'Provider';\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    const Provider: React.FC<\n      ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    > = (props) => {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName]?.[index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    };\n\n    Provider.displayName = rootComponentName + 'Provider';\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName]?.[index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"]},"metadata":{},"sourceType":"module"}