{"ast":null,"code":"import _classCallCheck from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\nvar thresholdNames = {\n  some: 0,\n  all: 1\n};\n\nvar InViewFeature = /*#__PURE__*/function (_Feature) {\n  _inherits(InViewFeature, _Feature);\n\n  var _super = _createSuper(InViewFeature);\n\n  function InViewFeature() {\n    var _this;\n\n    _classCallCheck(this, InViewFeature);\n\n    _this = _super.apply(this, arguments);\n    _this.hasEnteredView = false;\n    _this.isInView = false;\n    return _this;\n  }\n\n  _createClass(InViewFeature, [{\n    key: \"startObserver\",\n    value: function startObserver() {\n      var _this2 = this;\n\n      this.unmount();\n\n      var _this$node$getProps = this.node.getProps(),\n          _this$node$getProps$v = _this$node$getProps.viewport,\n          viewport = _this$node$getProps$v === void 0 ? {} : _this$node$getProps$v;\n\n      var root = viewport.root,\n          rootMargin = viewport.margin,\n          _viewport$amount = viewport.amount,\n          amount = _viewport$amount === void 0 ? \"some\" : _viewport$amount,\n          once = viewport.once;\n      var options = {\n        root: root ? root.current : undefined,\n        rootMargin: rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n      };\n\n      var onIntersectionUpdate = function onIntersectionUpdate(entry) {\n        var isIntersecting = entry.isIntersecting;\n        /**\n         * If there's been no change in the viewport state, early return.\n         */\n\n        if (_this2.isInView === isIntersecting) return;\n        _this2.isInView = isIntersecting;\n        /**\n         * Handle hasEnteredView. If this is only meant to run once, and\n         * element isn't visible, early return. Otherwise set hasEnteredView to true.\n         */\n\n        if (once && !isIntersecting && _this2.hasEnteredView) {\n          return;\n        } else if (isIntersecting) {\n          _this2.hasEnteredView = true;\n        }\n\n        if (_this2.node.animationState) {\n          _this2.node.animationState.setActive(\"whileInView\", isIntersecting);\n        }\n        /**\n         * Use the latest committed props rather than the ones in scope\n         * when this observer is created\n         */\n\n\n        var _this2$node$getProps = _this2.node.getProps(),\n            onViewportEnter = _this2$node$getProps.onViewportEnter,\n            onViewportLeave = _this2$node$getProps.onViewportLeave;\n\n        var callback = isIntersecting ? onViewportEnter : onViewportLeave;\n        callback && callback(entry);\n      };\n\n      return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      this.startObserver();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (typeof IntersectionObserver === \"undefined\") return;\n      var _this$node = this.node,\n          props = _this$node.props,\n          prevProps = _this$node.prevProps;\n      var hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n\n      if (hasOptionsChanged) {\n        this.startObserver();\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n\n  return InViewFeature;\n}(Feature);\n\nfunction hasViewportOptionChanged(_ref) {\n  var _ref$viewport = _ref.viewport,\n      viewport = _ref$viewport === void 0 ? {} : _ref$viewport;\n\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$viewport = _ref2.viewport,\n      prevViewport = _ref2$viewport === void 0 ? {} : _ref2$viewport;\n\n  return function (name) {\n    return viewport[name] !== prevViewport[name];\n  };\n}\n\nexport { InViewFeature };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs"],"names":["Feature","observeIntersection","thresholdNames","some","all","InViewFeature","arguments","hasEnteredView","isInView","unmount","node","getProps","viewport","root","rootMargin","margin","amount","once","options","current","undefined","threshold","onIntersectionUpdate","entry","isIntersecting","animationState","setActive","onViewportEnter","onViewportLeave","callback","startObserver","IntersectionObserver","props","prevProps","hasOptionsChanged","hasViewportOptionChanged","prevViewport","name"],"mappings":"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","sourcesContent":["import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n"]},"metadata":{},"sourceType":"module"}