{"ast":null,"code":"\"use client\"; // packages/react/toggle-group/src/ToggleGroup.tsx\n\nimport React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { Toggle } from \"@radix-ui/react-toggle\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { jsx } from \"react/jsx-runtime\";\nvar TOGGLE_GROUP_NAME = \"ToggleGroup\";\nvar [createToggleGroupContext, createToggleGroupScope] = createContextScope(TOGGLE_GROUP_NAME, [createRovingFocusGroupScope]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar ToggleGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    type,\n    ...toggleGroupProps\n  } = props;\n\n  if (type === \"single\") {\n    const singleProps = toggleGroupProps;\n    return /* @__PURE__ */jsx(ToggleGroupImplSingle, { ...singleProps,\n      ref: forwardedRef\n    });\n  }\n\n  if (type === \"multiple\") {\n    const multipleProps = toggleGroupProps;\n    return /* @__PURE__ */jsx(ToggleGroupImplMultiple, { ...multipleProps,\n      ref: forwardedRef\n    });\n  }\n\n  throw new Error(`Missing prop \\`type\\` expected on \\`${TOGGLE_GROUP_NAME}\\``);\n});\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\nvar [ToggleGroupValueProvider, useToggleGroupValueContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);\nvar ToggleGroupImplSingle = React.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupSingleProps\n  } = props;\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  return /* @__PURE__ */jsx(ToggleGroupValueProvider, {\n    scope: props.__scopeToggleGroup,\n    type: \"single\",\n    value: value ? [value] : [],\n    onItemActivate: setValue,\n    onItemDeactivate: React.useCallback(() => setValue(\"\"), [setValue]),\n    children: /* @__PURE__ */jsx(ToggleGroupImpl, { ...toggleGroupSingleProps,\n      ref: forwardedRef\n    })\n  });\n});\nvar ToggleGroupImplMultiple = React.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupMultipleProps\n  } = props;\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  const handleButtonActivate = React.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [...prevValue, itemValue];\n  }), [setValue]);\n  const handleButtonDeactivate = React.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return prevValue.filter(value2 => value2 !== itemValue);\n  }), [setValue]);\n  return /* @__PURE__ */jsx(ToggleGroupValueProvider, {\n    scope: props.__scopeToggleGroup,\n    type: \"multiple\",\n    value,\n    onItemActivate: handleButtonActivate,\n    onItemDeactivate: handleButtonDeactivate,\n    children: /* @__PURE__ */jsx(ToggleGroupImpl, { ...toggleGroupMultipleProps,\n      ref: forwardedRef\n    })\n  });\n});\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\nvar [ToggleGroupContext, useToggleGroupContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);\nvar ToggleGroupImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToggleGroup,\n    disabled = false,\n    rovingFocus = true,\n    orientation,\n    dir,\n    loop = true,\n    ...toggleGroupProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToggleGroup);\n  const direction = useDirection(dir);\n  const commonProps = {\n    role: \"group\",\n    dir: direction,\n    ...toggleGroupProps\n  };\n  return /* @__PURE__ */jsx(ToggleGroupContext, {\n    scope: __scopeToggleGroup,\n    rovingFocus,\n    disabled,\n    children: rovingFocus ? /* @__PURE__ */jsx(RovingFocusGroup.Root, {\n      asChild: true,\n      ...rovingFocusGroupScope,\n      orientation,\n      dir: direction,\n      loop,\n      children: /* @__PURE__ */jsx(Primitive.div, { ...commonProps,\n        ref: forwardedRef\n      })\n    }) : /* @__PURE__ */jsx(Primitive.div, { ...commonProps,\n      ref: forwardedRef\n    })\n  });\n});\nvar ITEM_NAME = \"ToggleGroupItem\";\nvar ToggleGroupItem = React.forwardRef((props, forwardedRef) => {\n  const valueContext = useToggleGroupValueContext(ITEM_NAME, props.__scopeToggleGroup);\n  const context = useToggleGroupContext(ITEM_NAME, props.__scopeToggleGroup);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(props.__scopeToggleGroup);\n  const pressed = valueContext.value.includes(props.value);\n  const disabled = context.disabled || props.disabled;\n  const commonProps = { ...props,\n    pressed,\n    disabled\n  };\n  const ref = React.useRef(null);\n  return context.rovingFocus ? /* @__PURE__ */jsx(RovingFocusGroup.Item, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    focusable: !disabled,\n    active: pressed,\n    ref,\n    children: /* @__PURE__ */jsx(ToggleGroupItemImpl, { ...commonProps,\n      ref: forwardedRef\n    })\n  }) : /* @__PURE__ */jsx(ToggleGroupItemImpl, { ...commonProps,\n    ref: forwardedRef\n  });\n});\nToggleGroupItem.displayName = ITEM_NAME;\nvar ToggleGroupItemImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToggleGroup,\n    value,\n    ...itemProps\n  } = props;\n  const valueContext = useToggleGroupValueContext(ITEM_NAME, __scopeToggleGroup);\n  const singleProps = {\n    role: \"radio\",\n    \"aria-checked\": props.pressed,\n    \"aria-pressed\": void 0\n  };\n  const typeProps = valueContext.type === \"single\" ? singleProps : void 0;\n  return /* @__PURE__ */jsx(Toggle, { ...typeProps,\n    ...itemProps,\n    ref: forwardedRef,\n    onPressedChange: pressed => {\n      if (pressed) {\n        valueContext.onItemActivate(value);\n      } else {\n        valueContext.onItemDeactivate(value);\n      }\n    }\n  });\n});\nvar Root2 = ToggleGroup;\nvar Item2 = ToggleGroupItem;\nexport { Item2 as Item, Root2 as Root, ToggleGroup, ToggleGroupItem, createToggleGroupScope };","map":{"version":3,"mappings":"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","names":["React","createContextScope","Primitive","RovingFocusGroup","createRovingFocusGroupScope","Toggle","useControllableState","useDirection","TOGGLE_GROUP_NAME","createToggleGroupContext","createToggleGroupScope","useRovingFocusGroupScope","ToggleGroup","forwardRef","props","forwardedRef","type","toggleGroupProps","singleProps","ToggleGroupImplSingle","ref","multipleProps","ToggleGroupImplMultiple","Error","displayName","ToggleGroupValueProvider","useToggleGroupValueContext","value","valueProp","defaultValue","onValueChange","toggleGroupSingleProps","setValue","prop","defaultProp","onChange","scope","__scopeToggleGroup","onItemActivate","onItemDeactivate","useCallback","children","ToggleGroupImpl","toggleGroupMultipleProps","handleButtonActivate","itemValue","prevValue","handleButtonDeactivate","filter","ToggleGroupContext","useToggleGroupContext","disabled","rovingFocus","orientation","dir","loop","rovingFocusGroupScope","direction","commonProps","role","asChild","div","ITEM_NAME","ToggleGroupItem","valueContext","context","pressed","includes","useRef","focusable","active","ToggleGroupItemImpl","itemProps","typeProps","onPressedChange","Root","Item"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-toggle-group/src/ToggleGroup.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Toggle } from '@radix-ui/react-toggle';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_GROUP_NAME = 'ToggleGroup';\n\ntype ScopedProps<P> = P & { __scopeToggleGroup?: Scope };\nconst [createToggleGroupContext, createToggleGroupScope] = createContextScope(TOGGLE_GROUP_NAME, [\n  createRovingFocusGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype ToggleGroupElement = ToggleGroupImplSingleElement | ToggleGroupImplMultipleElement;\ninterface ToggleGroupSingleProps extends ToggleGroupImplSingleProps {\n  type: 'single';\n}\ninterface ToggleGroupMultipleProps extends ToggleGroupImplMultipleProps {\n  type: 'multiple';\n}\n\nconst ToggleGroup = React.forwardRef<\n  ToggleGroupElement,\n  ToggleGroupSingleProps | ToggleGroupMultipleProps\n>((props, forwardedRef) => {\n  const { type, ...toggleGroupProps } = props;\n\n  if (type === 'single') {\n    const singleProps = toggleGroupProps as ToggleGroupImplSingleProps;\n    return <ToggleGroupImplSingle {...singleProps} ref={forwardedRef} />;\n  }\n\n  if (type === 'multiple') {\n    const multipleProps = toggleGroupProps as ToggleGroupImplMultipleProps;\n    return <ToggleGroupImplMultiple {...multipleProps} ref={forwardedRef} />;\n  }\n\n  throw new Error(`Missing prop \\`type\\` expected on \\`${TOGGLE_GROUP_NAME}\\``);\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupValueContextValue = {\n  type: 'single' | 'multiple';\n  value: string[];\n  onItemActivate(value: string): void;\n  onItemDeactivate(value: string): void;\n};\n\nconst [ToggleGroupValueProvider, useToggleGroupValueContext] =\n  createToggleGroupContext<ToggleGroupValueContextValue>(TOGGLE_GROUP_NAME);\n\ntype ToggleGroupImplSingleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplSingleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the item that is pressed.\n   */\n  value?: string;\n  /**\n   * The value of the item that is pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the value of the toggle group changes.\n   */\n  onValueChange?(value: string): void;\n}\n\nconst ToggleGroupImplSingle = React.forwardRef<\n  ToggleGroupImplSingleElement,\n  ToggleGroupImplSingleProps\n>((props: ScopedProps<ToggleGroupImplSingleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupSingleProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"single\"\n      value={value ? [value] : []}\n      onItemActivate={setValue}\n      onItemDeactivate={React.useCallback(() => setValue(''), [setValue])}\n    >\n      <ToggleGroupImpl {...toggleGroupSingleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\ntype ToggleGroupImplMultipleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplMultipleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the items that are pressed.\n   */\n  value?: string[];\n  /**\n   * The value of the items that are pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the toggle group changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst ToggleGroupImplMultiple = React.forwardRef<\n  ToggleGroupImplMultipleElement,\n  ToggleGroupImplMultipleProps\n>((props: ScopedProps<ToggleGroupImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleButtonActivate = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleButtonDeactivate = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"multiple\"\n      value={value}\n      onItemActivate={handleButtonActivate}\n      onItemDeactivate={handleButtonDeactivate}\n    >\n      <ToggleGroupImpl {...toggleGroupMultipleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupContextValue = { rovingFocus: boolean; disabled: boolean };\n\nconst [ToggleGroupContext, useToggleGroupContext] =\n  createToggleGroupContext<ToggleGroupContextValue>(TOGGLE_GROUP_NAME);\n\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype ToggleGroupImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToggleGroupImplProps extends PrimitiveDivProps {\n  /**\n   * Whether the group is disabled from user interaction.\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * Whether the group should maintain roving focus of its buttons.\n   * @defaultValue true\n   */\n  rovingFocus?: boolean;\n  loop?: RovingFocusGroupProps['loop'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst ToggleGroupImpl = React.forwardRef<ToggleGroupImplElement, ToggleGroupImplProps>(\n  (props: ScopedProps<ToggleGroupImplProps>, forwardedRef) => {\n    const {\n      __scopeToggleGroup,\n      disabled = false,\n      rovingFocus = true,\n      orientation,\n      dir,\n      loop = true,\n      ...toggleGroupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToggleGroup);\n    const direction = useDirection(dir);\n    const commonProps = { role: 'group', dir: direction, ...toggleGroupProps };\n    return (\n      <ToggleGroupContext scope={__scopeToggleGroup} rovingFocus={rovingFocus} disabled={disabled}>\n        {rovingFocus ? (\n          <RovingFocusGroup.Root\n            asChild\n            {...rovingFocusGroupScope}\n            orientation={orientation}\n            dir={direction}\n            loop={loop}\n          >\n            <Primitive.div {...commonProps} ref={forwardedRef} />\n          </RovingFocusGroup.Root>\n        ) : (\n          <Primitive.div {...commonProps} ref={forwardedRef} />\n        )}\n      </ToggleGroupContext>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'ToggleGroupItem';\n\ntype ToggleGroupItemElement = ToggleGroupItemImplElement;\ninterface ToggleGroupItemProps extends Omit<ToggleGroupItemImplProps, 'pressed'> {}\n\nconst ToggleGroupItem = React.forwardRef<ToggleGroupItemElement, ToggleGroupItemProps>(\n  (props: ScopedProps<ToggleGroupItemProps>, forwardedRef) => {\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, props.__scopeToggleGroup);\n    const context = useToggleGroupContext(ITEM_NAME, props.__scopeToggleGroup);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(props.__scopeToggleGroup);\n    const pressed = valueContext.value.includes(props.value);\n    const disabled = context.disabled || props.disabled;\n    const commonProps = { ...props, pressed, disabled };\n    const ref = React.useRef<HTMLDivElement>(null);\n    return context.rovingFocus ? (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!disabled}\n        active={pressed}\n        ref={ref}\n      >\n        <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n      </RovingFocusGroup.Item>\n    ) : (\n      <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n    );\n  }\n);\n\nToggleGroupItem.displayName = ITEM_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupItemImplElement = React.ElementRef<typeof Toggle>;\ntype ToggleProps = React.ComponentPropsWithoutRef<typeof Toggle>;\ninterface ToggleGroupItemImplProps extends Omit<ToggleProps, 'defaultPressed' | 'onPressedChange'> {\n  /**\n   * A string value for the toggle group item. All items within a toggle group should use a unique value.\n   */\n  value: string;\n}\n\nconst ToggleGroupItemImpl = React.forwardRef<ToggleGroupItemImplElement, ToggleGroupItemImplProps>(\n  (props: ScopedProps<ToggleGroupItemImplProps>, forwardedRef) => {\n    const { __scopeToggleGroup, value, ...itemProps } = props;\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, __scopeToggleGroup);\n    const singleProps = { role: 'radio', 'aria-checked': props.pressed, 'aria-pressed': undefined };\n    const typeProps = valueContext.type === 'single' ? singleProps : undefined;\n    return (\n      <Toggle\n        {...typeProps}\n        {...itemProps}\n        ref={forwardedRef}\n        onPressedChange={(pressed) => {\n          if (pressed) {\n            valueContext.onItemActivate(value);\n          } else {\n            valueContext.onItemDeactivate(value);\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ToggleGroup;\nconst Item = ToggleGroupItem;\n\nexport {\n  createToggleGroupScope,\n  //\n  ToggleGroup,\n  ToggleGroupItem,\n  //\n  Root,\n  Item,\n};\nexport type { ToggleGroupSingleProps, ToggleGroupMultipleProps, ToggleGroupItemProps };\n"]},"metadata":{},"sourceType":"module"}