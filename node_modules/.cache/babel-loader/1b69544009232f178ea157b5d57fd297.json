{"ast":null,"code":"import _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useEffect } from 'react';\nimport { useInstantLayoutTransition } from '../projection/use-instant-layout-transition.mjs';\nimport { useForceUpdate } from './use-force-update.mjs';\nimport { instantAnimationState } from './use-instant-transition-state.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction useInstantTransition() {\n  var _useForceUpdate = useForceUpdate(),\n      _useForceUpdate2 = _slicedToArray(_useForceUpdate, 2),\n      forceUpdate = _useForceUpdate2[0],\n      forcedRenderCount = _useForceUpdate2[1];\n\n  var startInstantLayoutTransition = useInstantLayoutTransition();\n  var unlockOnFrameRef = useRef(-1);\n  useEffect(function () {\n    /**\n     * Unblock after two animation frames, otherwise this will unblock too soon.\n     */\n    frame.postRender(function () {\n      return frame.postRender(function () {\n        /**\n         * If the callback has been called again after the effect\n         * triggered this 2 frame delay, don't unblock animations. This\n         * prevents the previous effect from unblocking the current\n         * instant transition too soon. This becomes more likely when\n         * used in conjunction with React.startTransition().\n         */\n        if (forcedRenderCount !== unlockOnFrameRef.current) return;\n        instantAnimationState.current = false;\n      });\n    });\n  }, [forcedRenderCount]);\n  return function (callback) {\n    startInstantLayoutTransition(function () {\n      instantAnimationState.current = true;\n      forceUpdate();\n      callback();\n      unlockOnFrameRef.current = forcedRenderCount + 1;\n    });\n  };\n}\n\nfunction disableInstantTransitions() {\n  instantAnimationState.current = false;\n}\n\nexport { disableInstantTransitions, useInstantTransition };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/utils/use-instant-transition.mjs"],"names":["useRef","useEffect","useInstantLayoutTransition","useForceUpdate","instantAnimationState","frame","useInstantTransition","forceUpdate","forcedRenderCount","startInstantLayoutTransition","unlockOnFrameRef","postRender","current","callback","disableInstantTransitions"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,qBAAT,QAAsC,oCAAtC;AACA,SAASC,KAAT,QAAsB,wBAAtB;;AAEA,SAASC,oBAAT,GAAgC;AAC5B,wBAAyCH,cAAc,EAAvD;AAAA;AAAA,MAAOI,WAAP;AAAA,MAAoBC,iBAApB;;AACA,MAAMC,4BAA4B,GAAGP,0BAA0B,EAA/D;AACA,MAAMQ,gBAAgB,GAAGV,MAAM,CAAC,CAAC,CAAF,CAA/B;AACAC,EAAAA,SAAS,CAAC,YAAM;AACZ;AACR;AACA;AACQI,IAAAA,KAAK,CAACM,UAAN,CAAiB;AAAA,aAAMN,KAAK,CAACM,UAAN,CAAiB,YAAM;AAC1C;AACZ;AACA;AACA;AACA;AACA;AACA;AACY,YAAIH,iBAAiB,KAAKE,gBAAgB,CAACE,OAA3C,EACI;AACJR,QAAAA,qBAAqB,CAACQ,OAAtB,GAAgC,KAAhC;AACH,OAXsB,CAAN;AAAA,KAAjB;AAYH,GAhBQ,EAgBN,CAACJ,iBAAD,CAhBM,CAAT;AAiBA,SAAO,UAACK,QAAD,EAAc;AACjBJ,IAAAA,4BAA4B,CAAC,YAAM;AAC/BL,MAAAA,qBAAqB,CAACQ,OAAtB,GAAgC,IAAhC;AACAL,MAAAA,WAAW;AACXM,MAAAA,QAAQ;AACRH,MAAAA,gBAAgB,CAACE,OAAjB,GAA2BJ,iBAAiB,GAAG,CAA/C;AACH,KAL2B,CAA5B;AAMH,GAPD;AAQH;;AACD,SAASM,yBAAT,GAAqC;AACjCV,EAAAA,qBAAqB,CAACQ,OAAtB,GAAgC,KAAhC;AACH;;AAED,SAASE,yBAAT,EAAoCR,oBAApC","sourcesContent":["import { useRef, useEffect } from 'react';\nimport { useInstantLayoutTransition } from '../projection/use-instant-layout-transition.mjs';\nimport { useForceUpdate } from './use-force-update.mjs';\nimport { instantAnimationState } from './use-instant-transition-state.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction useInstantTransition() {\n    const [forceUpdate, forcedRenderCount] = useForceUpdate();\n    const startInstantLayoutTransition = useInstantLayoutTransition();\n    const unlockOnFrameRef = useRef(-1);\n    useEffect(() => {\n        /**\n         * Unblock after two animation frames, otherwise this will unblock too soon.\n         */\n        frame.postRender(() => frame.postRender(() => {\n            /**\n             * If the callback has been called again after the effect\n             * triggered this 2 frame delay, don't unblock animations. This\n             * prevents the previous effect from unblocking the current\n             * instant transition too soon. This becomes more likely when\n             * used in conjunction with React.startTransition().\n             */\n            if (forcedRenderCount !== unlockOnFrameRef.current)\n                return;\n            instantAnimationState.current = false;\n        }));\n    }, [forcedRenderCount]);\n    return (callback) => {\n        startInstantLayoutTransition(() => {\n            instantAnimationState.current = true;\n            forceUpdate();\n            callback();\n            unlockOnFrameRef.current = forcedRenderCount + 1;\n        });\n    };\n}\nfunction disableInstantTransitions() {\n    instantAnimationState.current = false;\n}\n\nexport { disableInstantTransitions, useInstantTransition };\n"]},"metadata":{},"sourceType":"module"}