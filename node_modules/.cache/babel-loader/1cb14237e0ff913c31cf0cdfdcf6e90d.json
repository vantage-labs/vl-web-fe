{"ast":null,"code":"import { isPressing } from './state.mjs';\n/**\n * Filter out events that are not \"Enter\" keys.\n */\n\nfunction filterEvents(callback) {\n  return event => {\n    if (event.key !== \"Enter\") return;\n    callback(event);\n  };\n}\n\nfunction firePointerEvent(target, type) {\n  target.dispatchEvent(new PointerEvent(\"pointer\" + type, {\n    isPrimary: true,\n    bubbles: true\n  }));\n}\n\nconst enableKeyboardPress = (focusEvent, eventOptions) => {\n  const element = focusEvent.currentTarget;\n  if (!element) return;\n  const handleKeydown = filterEvents(() => {\n    if (isPressing.has(element)) return;\n    firePointerEvent(element, \"down\");\n    const handleKeyup = filterEvents(() => {\n      firePointerEvent(element, \"up\");\n    });\n\n    const handleBlur = () => firePointerEvent(element, \"cancel\");\n\n    element.addEventListener(\"keyup\", handleKeyup, eventOptions);\n    element.addEventListener(\"blur\", handleBlur, eventOptions);\n  });\n  element.addEventListener(\"keydown\", handleKeydown, eventOptions);\n  /**\n   * Add an event listener that fires on blur to remove the keydown events.\n   */\n\n  element.addEventListener(\"blur\", () => element.removeEventListener(\"keydown\", handleKeydown), eventOptions);\n};\n\nexport { enableKeyboardPress };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/motion-dom/dist/es/gestures/press/utils/keyboard.mjs"],"names":["isPressing","filterEvents","callback","event","key","firePointerEvent","target","type","dispatchEvent","PointerEvent","isPrimary","bubbles","enableKeyboardPress","focusEvent","eventOptions","element","currentTarget","handleKeydown","has","handleKeyup","handleBlur","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AAEA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC5B,SAAQC,KAAD,IAAW;AACd,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EACI;AACJF,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACH,GAJD;AAKH;;AACD,SAASE,gBAAT,CAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;AACpCD,EAAAA,MAAM,CAACE,aAAP,CAAqB,IAAIC,YAAJ,CAAiB,YAAYF,IAA7B,EAAmC;AAAEG,IAAAA,SAAS,EAAE,IAAb;AAAmBC,IAAAA,OAAO,EAAE;AAA5B,GAAnC,CAArB;AACH;;AACD,MAAMC,mBAAmB,GAAG,CAACC,UAAD,EAAaC,YAAb,KAA8B;AACtD,QAAMC,OAAO,GAAGF,UAAU,CAACG,aAA3B;AACA,MAAI,CAACD,OAAL,EACI;AACJ,QAAME,aAAa,GAAGhB,YAAY,CAAC,MAAM;AACrC,QAAID,UAAU,CAACkB,GAAX,CAAeH,OAAf,CAAJ,EACI;AACJV,IAAAA,gBAAgB,CAACU,OAAD,EAAU,MAAV,CAAhB;AACA,UAAMI,WAAW,GAAGlB,YAAY,CAAC,MAAM;AACnCI,MAAAA,gBAAgB,CAACU,OAAD,EAAU,IAAV,CAAhB;AACH,KAF+B,CAAhC;;AAGA,UAAMK,UAAU,GAAG,MAAMf,gBAAgB,CAACU,OAAD,EAAU,QAAV,CAAzC;;AACAA,IAAAA,OAAO,CAACM,gBAAR,CAAyB,OAAzB,EAAkCF,WAAlC,EAA+CL,YAA/C;AACAC,IAAAA,OAAO,CAACM,gBAAR,CAAyB,MAAzB,EAAiCD,UAAjC,EAA6CN,YAA7C;AACH,GAViC,CAAlC;AAWAC,EAAAA,OAAO,CAACM,gBAAR,CAAyB,SAAzB,EAAoCJ,aAApC,EAAmDH,YAAnD;AACA;AACJ;AACA;;AACIC,EAAAA,OAAO,CAACM,gBAAR,CAAyB,MAAzB,EAAiC,MAAMN,OAAO,CAACO,mBAAR,CAA4B,SAA5B,EAAuCL,aAAvC,CAAvC,EAA8FH,YAA9F;AACH,CApBD;;AAsBA,SAASF,mBAAT","sourcesContent":["import { isPressing } from './state.mjs';\n\n/**\n * Filter out events that are not \"Enter\" keys.\n */\nfunction filterEvents(callback) {\n    return (event) => {\n        if (event.key !== \"Enter\")\n            return;\n        callback(event);\n    };\n}\nfunction firePointerEvent(target, type) {\n    target.dispatchEvent(new PointerEvent(\"pointer\" + type, { isPrimary: true, bubbles: true }));\n}\nconst enableKeyboardPress = (focusEvent, eventOptions) => {\n    const element = focusEvent.currentTarget;\n    if (!element)\n        return;\n    const handleKeydown = filterEvents(() => {\n        if (isPressing.has(element))\n            return;\n        firePointerEvent(element, \"down\");\n        const handleKeyup = filterEvents(() => {\n            firePointerEvent(element, \"up\");\n        });\n        const handleBlur = () => firePointerEvent(element, \"cancel\");\n        element.addEventListener(\"keyup\", handleKeyup, eventOptions);\n        element.addEventListener(\"blur\", handleBlur, eventOptions);\n    });\n    element.addEventListener(\"keydown\", handleKeydown, eventOptions);\n    /**\n     * Add an event listener that fires on blur to remove the keydown events.\n     */\n    element.addEventListener(\"blur\", () => element.removeEventListener(\"keydown\", handleKeydown), eventOptions);\n};\n\nexport { enableKeyboardPress };\n"]},"metadata":{},"sourceType":"module"}