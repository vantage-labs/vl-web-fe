{"ast":null,"code":"import _classCallCheck from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nvar FocusGesture = /*#__PURE__*/function (_Feature) {\n  _inherits(FocusGesture, _Feature);\n\n  var _super = _createSuper(FocusGesture);\n\n  function FocusGesture() {\n    var _this;\n\n    _classCallCheck(this, FocusGesture);\n\n    _this = _super.apply(this, arguments);\n    _this.isActive = false;\n    return _this;\n  }\n\n  _createClass(FocusGesture, [{\n    key: \"onFocus\",\n    value: function onFocus() {\n      var isFocusVisible = false;\n      /**\n       * If this element doesn't match focus-visible then don't\n       * apply whileHover. But, if matches throws that focus-visible\n       * is not a valid selector then in that browser outline styles will be applied\n       * to the element by default and we want to match that behaviour with whileFocus.\n       */\n\n      try {\n        isFocusVisible = this.node.current.matches(\":focus-visible\");\n      } catch (e) {\n        isFocusVisible = true;\n      }\n\n      if (!isFocusVisible || !this.node.animationState) return;\n      this.node.animationState.setActive(\"whileFocus\", true);\n      this.isActive = true;\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      if (!this.isActive || !this.node.animationState) return;\n      this.node.animationState.setActive(\"whileFocus\", false);\n      this.isActive = false;\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var _this2 = this;\n\n      this.unmount = pipe(addDomEvent(this.node.current, \"focus\", function () {\n        return _this2.onFocus();\n      }), addDomEvent(this.node.current, \"blur\", function () {\n        return _this2.onBlur();\n      }));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n\n  return FocusGesture;\n}(Feature);\n\nexport { FocusGesture };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/gestures/focus.mjs"],"names":["addDomEvent","Feature","pipe","FocusGesture","arguments","isActive","isFocusVisible","node","current","matches","e","animationState","setActive","unmount","onFocus","onBlur"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,6BAA5B;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,IAAT,QAAqB,mBAArB;;IAEMC,Y;;;;;AACF,0BAAc;AAAA;;AAAA;;AACV,+BAASC,SAAT;AACA,UAAKC,QAAL,GAAgB,KAAhB;AAFU;AAGb;;;;WACD,mBAAU;AACN,UAAIC,cAAc,GAAG,KAArB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,UAAI;AACAA,QAAAA,cAAc,GAAG,KAAKC,IAAL,CAAUC,OAAV,CAAkBC,OAAlB,CAA0B,gBAA1B,CAAjB;AACH,OAFD,CAGA,OAAOC,CAAP,EAAU;AACNJ,QAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,UAAI,CAACA,cAAD,IAAmB,CAAC,KAAKC,IAAL,CAAUI,cAAlC,EACI;AACJ,WAAKJ,IAAL,CAAUI,cAAV,CAAyBC,SAAzB,CAAmC,YAAnC,EAAiD,IAAjD;AACA,WAAKP,QAAL,GAAgB,IAAhB;AACH;;;WACD,kBAAS;AACL,UAAI,CAAC,KAAKA,QAAN,IAAkB,CAAC,KAAKE,IAAL,CAAUI,cAAjC,EACI;AACJ,WAAKJ,IAAL,CAAUI,cAAV,CAAyBC,SAAzB,CAAmC,YAAnC,EAAiD,KAAjD;AACA,WAAKP,QAAL,GAAgB,KAAhB;AACH;;;WACD,iBAAQ;AAAA;;AACJ,WAAKQ,OAAL,GAAeX,IAAI,CAACF,WAAW,CAAC,KAAKO,IAAL,CAAUC,OAAX,EAAoB,OAApB,EAA6B;AAAA,eAAM,MAAI,CAACM,OAAL,EAAN;AAAA,OAA7B,CAAZ,EAAgEd,WAAW,CAAC,KAAKO,IAAL,CAAUC,OAAX,EAAoB,MAApB,EAA4B;AAAA,eAAM,MAAI,CAACO,MAAL,EAAN;AAAA,OAA5B,CAA3E,CAAnB;AACH;;;WACD,mBAAU,CAAG;;;;EAjCUd,O;;AAoC3B,SAASE,YAAT","sourcesContent":["import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n"]},"metadata":{},"sourceType":"module"}