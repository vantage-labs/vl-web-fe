{"ast":null,"code":"\"use client\"; // packages/react/hover-card/src/HoverCard.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport * as PopperPrimitive from \"@radix-ui/react-popper\";\nimport { createPopperScope } from \"@radix-ui/react-popper\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { jsx } from \"react/jsx-runtime\";\nvar originalBodyUserSelect;\nvar HOVERCARD_NAME = \"HoverCard\";\nvar [createHoverCardContext, createHoverCardScope] = createContextScope(HOVERCARD_NAME, [createPopperScope]);\nvar usePopperScope = createPopperScope();\nvar [HoverCardProvider, useHoverCardContext] = createHoverCardContext(HOVERCARD_NAME);\n\nvar HoverCard = props => {\n  const {\n    __scopeHoverCard,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    openDelay = 700,\n    closeDelay = 300\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n  const hasSelectionRef = React.useRef(false);\n  const isPointerDownOnContentRef = React.useRef(false);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  const handleOpen = React.useCallback(() => {\n    clearTimeout(closeTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);\n  }, [openDelay, setOpen]);\n  const handleClose = React.useCallback(() => {\n    clearTimeout(openTimerRef.current);\n\n    if (!hasSelectionRef.current && !isPointerDownOnContentRef.current) {\n      closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);\n    }\n  }, [closeDelay, setOpen]);\n  const handleDismiss = React.useCallback(() => setOpen(false), [setOpen]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(openTimerRef.current);\n      clearTimeout(closeTimerRef.current);\n    };\n  }, []);\n  return /* @__PURE__ */jsx(HoverCardProvider, {\n    scope: __scopeHoverCard,\n    open,\n    onOpenChange: setOpen,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    onDismiss: handleDismiss,\n    hasSelectionRef,\n    isPointerDownOnContentRef,\n    children: /* @__PURE__ */jsx(PopperPrimitive.Root, { ...popperScope,\n      children\n    })\n  });\n};\n\nHoverCard.displayName = HOVERCARD_NAME;\nvar TRIGGER_NAME = \"HoverCardTrigger\";\nvar HoverCardTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    ...triggerProps\n  } = props;\n  const context = useHoverCardContext(TRIGGER_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  return /* @__PURE__ */jsx(PopperPrimitive.Anchor, {\n    asChild: true,\n    ...popperScope,\n    children: /* @__PURE__ */jsx(Primitive.a, {\n      \"data-state\": context.open ? \"open\" : \"closed\",\n      ...triggerProps,\n      ref: forwardedRef,\n      onPointerEnter: composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen)),\n      onPointerLeave: composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose)),\n      onFocus: composeEventHandlers(props.onFocus, context.onOpen),\n      onBlur: composeEventHandlers(props.onBlur, context.onClose),\n      onTouchStart: composeEventHandlers(props.onTouchStart, event => event.preventDefault())\n    })\n  });\n});\nHoverCardTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"HoverCardPortal\";\nvar [PortalProvider, usePortalContext] = createHoverCardContext(PORTAL_NAME, {\n  forceMount: void 0\n});\n\nvar HoverCardPortal = props => {\n  const {\n    __scopeHoverCard,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useHoverCardContext(PORTAL_NAME, __scopeHoverCard);\n  return /* @__PURE__ */jsx(PortalProvider, {\n    scope: __scopeHoverCard,\n    forceMount,\n    children: /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(PortalPrimitive, {\n        asChild: true,\n        container,\n        children\n      })\n    })\n  });\n};\n\nHoverCardPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"HoverCardContent\";\nvar HoverCardContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeHoverCard);\n  const {\n    forceMount = portalContext.forceMount,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, props.__scopeHoverCard);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: /* @__PURE__ */jsx(HoverCardContentImpl, {\n      \"data-state\": context.open ? \"open\" : \"closed\",\n      ...contentProps,\n      onPointerEnter: composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen)),\n      onPointerLeave: composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose)),\n      ref: forwardedRef\n    })\n  });\n});\nHoverCardContent.displayName = CONTENT_NAME;\nvar HoverCardContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [containSelection, setContainSelection] = React.useState(false);\n  React.useEffect(() => {\n    if (containSelection) {\n      const body = document.body;\n      originalBodyUserSelect = body.style.userSelect || body.style.webkitUserSelect;\n      body.style.userSelect = \"none\";\n      body.style.webkitUserSelect = \"none\";\n      return () => {\n        body.style.userSelect = originalBodyUserSelect;\n        body.style.webkitUserSelect = originalBodyUserSelect;\n      };\n    }\n  }, [containSelection]);\n  React.useEffect(() => {\n    if (ref.current) {\n      const handlePointerUp = () => {\n        setContainSelection(false);\n        context.isPointerDownOnContentRef.current = false;\n        setTimeout(() => {\n          const hasSelection = document.getSelection()?.toString() !== \"\";\n          if (hasSelection) context.hasSelectionRef.current = true;\n        });\n      };\n\n      document.addEventListener(\"pointerup\", handlePointerUp);\n      return () => {\n        document.removeEventListener(\"pointerup\", handlePointerUp);\n        context.hasSelectionRef.current = false;\n        context.isPointerDownOnContentRef.current = false;\n      };\n    }\n  }, [context.isPointerDownOnContentRef, context.hasSelectionRef]);\n  React.useEffect(() => {\n    if (ref.current) {\n      const tabbables = getTabbableNodes(ref.current);\n      tabbables.forEach(tabbable => tabbable.setAttribute(\"tabindex\", \"-1\"));\n    }\n  });\n  return /* @__PURE__ */jsx(DismissableLayer, {\n    asChild: true,\n    disableOutsidePointerEvents: false,\n    onInteractOutside,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside: composeEventHandlers(onFocusOutside, event => {\n      event.preventDefault();\n    }),\n    onDismiss: context.onDismiss,\n    children: /* @__PURE__ */jsx(PopperPrimitive.Content, { ...popperScope,\n      ...contentProps,\n      onPointerDown: composeEventHandlers(contentProps.onPointerDown, event => {\n        if (event.currentTarget.contains(event.target)) {\n          setContainSelection(true);\n        }\n\n        context.hasSelectionRef.current = false;\n        context.isPointerDownOnContentRef.current = true;\n      }),\n      ref: composedRefs,\n      style: { ...contentProps.style,\n        userSelect: containSelection ? \"text\" : void 0,\n        // Safari requires prefix\n        WebkitUserSelect: containSelection ? \"text\" : void 0,\n        // re-namespace exposed content custom properties\n        ...{\n          \"--radix-hover-card-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n          \"--radix-hover-card-content-available-width\": \"var(--radix-popper-available-width)\",\n          \"--radix-hover-card-content-available-height\": \"var(--radix-popper-available-height)\",\n          \"--radix-hover-card-trigger-width\": \"var(--radix-popper-anchor-width)\",\n          \"--radix-hover-card-trigger-height\": \"var(--radix-popper-anchor-height)\"\n        }\n      }\n    })\n  });\n});\nvar ARROW_NAME = \"HoverCardArrow\";\nvar HoverCardArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    ...arrowProps\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  return /* @__PURE__ */jsx(PopperPrimitive.Arrow, { ...popperScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nHoverCardArrow.displayName = ARROW_NAME;\n\nfunction excludeTouch(eventHandler) {\n  return event => event.pointerType === \"touch\" ? void 0 : eventHandler();\n}\n\nfunction getTabbableNodes(container) {\n  const nodes = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: node => {\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  });\n\n  while (walker.nextNode()) nodes.push(walker.currentNode);\n\n  return nodes;\n}\n\nvar Root2 = HoverCard;\nvar Trigger = HoverCardTrigger;\nvar Portal = HoverCardPortal;\nvar Content2 = HoverCardContent;\nvar Arrow2 = HoverCardArrow;\nexport { Arrow2 as Arrow, Content2 as Content, HoverCard, HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardTrigger, Portal, Root2 as Root, Trigger, createHoverCardScope };","map":{"version":3,"mappings":";;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,oBAAT,QAAqC,wCAArC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,YAAYC,eAAZ,MAAiC,wBAAjC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,UAAUC,eAAnB,QAA0C,wBAA1C;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AA+FM;AAvFN,IAAIC,sBAAJ;AAEA,IAAMC,iBAAiB,WAAvB;AAGA,IAAM,CAACC,sBAAD,EAAyBC,oBAAzB,IAAiDb,mBAAmBW,cAAnB,EAAmC,CACxFP,iBADwF,CAAnC,CAAvD;AAGA,IAAMU,iBAAiBV,mBAAvB;AAYA,IAAM,CAACW,iBAAD,EAAoBC,mBAApB,IACJJ,uBAA8CD,cAA9C,CADF;;AAYA,IAAMM,YAAuCC,KAAD,IAAwC;AAClF,QAAM;AACJC,oBADI;AAEJC,YAFI;AAGJC,UAAMC,QAHF;AAIJC,eAJI;AAKJC,gBALI;AAMJC,gBAAY,GANR;AAOJC,iBAAa;AAPT,MAQFR,KARJ;AASA,QAAMS,cAAcb,eAAeK,gBAAf,CAApB;AACA,QAAMS,eAAqB9B,aAAO,CAAP,CAA3B;AACA,QAAM+B,gBAAsB/B,aAAO,CAAP,CAA5B;AACA,QAAMgC,kBAAwBhC,aAAO,KAAP,CAA9B;AACA,QAAMiC,4BAAkCjC,aAAO,KAAP,CAAxC;AAEA,QAAM,CAACuB,OAAO,KAAR,EAAeW,OAAf,IAA0B/B,qBAAqB;AACnDgC,UAAMX,QAD6C;AAEnDY,iBAAaX,WAFsC;AAGnDY,cAAUX;AAHyC,GAArB,CAAhC;AAMA,QAAMY,aAAmBtC,kBAAY,MAAM;AACzCuC,iBAAaR,cAAcS,OAA3B;AACAV,iBAAaU,OAAb,GAAuBC,OAAOC,UAAP,CAAkB,MAAMR,QAAQ,IAAR,CAAxB,EAAuCP,SAAvC,CAAvB;AACF,GAHyB,EAGtB,CAACA,SAAD,EAAYO,OAAZ,CAHsB,CAAzB;AAKA,QAAMS,cAAoB3C,kBAAY,MAAM;AAC1CuC,iBAAaT,aAAaU,OAA1B;;AACA,QAAI,CAACR,gBAAgBQ,OAAjB,IAA4B,CAACP,0BAA0BO,OAA3D,EAAoE;AAClET,oBAAcS,OAAd,GAAwBC,OAAOC,UAAP,CAAkB,MAAMR,QAAQ,KAAR,CAAxB,EAAwCN,UAAxC,CAAxB;AACF;AACF,GAL0B,EAKvB,CAACA,UAAD,EAAaM,OAAb,CALuB,CAA1B;AAOA,QAAMU,gBAAsB5C,kBAAY,MAAMkC,QAAQ,KAAR,CAAlB,EAAkC,CAACA,OAAD,CAAlC,CAA5B;AAGMlC,kBAAU,MAAM;AACpB,WAAO,MAAM;AACXuC,mBAAaT,aAAaU,OAA1B;AACAD,mBAAaR,cAAcS,OAA3B;AACF,KAHA;AAIF,GALM,EAKH,EALG;AAON,SACE,mBAACvB,iBAAD,EAAC;AACC4B,WAAOxB,gBADR;AAECE,QAFD;AAGCG,kBAAcQ,OAHf;AAICY,YAAQR,UAJT;AAKCS,aAASJ,WALV;AAMCK,eAAWJ,aANZ;AAOCZ,mBAPD;AAQCC,6BARD;AAUCX,iCAAiBjB,oBAAjB,EAAC,EAAsB,GAAGwB,WAAzB;AAAuCP;AAAvC,KAAD;AAVD,GAAD,CADF;AAcF,CA1DA;;AA4DAH,UAAU8B,WAAV,GAAwBpC,cAAxB;AAMA,IAAMqC,eAAe,kBAArB;AAMA,IAAMC,mBAAyBnD,iBAC7B,CAACoB,KAAD,EAA4CgC,YAA5C,KAA6D;AAC3D,QAAM;AAAE/B,oBAAF;AAAoB,OAAGgC;AAAvB,MAAwCjC,KAA9C;AACA,QAAMkC,UAAUpC,oBAAoBgC,YAApB,EAAkC7B,gBAAlC,CAAhB;AACA,QAAMQ,cAAcb,eAAeK,gBAAf,CAApB;AACA,SACE,mBAAiBhB,sBAAjB,EAAC;AAAuBkD,aAAO,IAA9B;AAAgC,OAAG1B,WAAnC;AACCP,iCAACZ,UAAU8C,CAAX,EAAC;AACC,oBAAYF,QAAQ/B,IAAR,GAAe,MAAf,GAAwB,QADrC;AAEE,SAAG8B,YAFL;AAGCI,WAAKL,YAHN;AAICM,sBAAgBzD,qBAAqBmB,MAAMsC,cAA3B,EAA2CC,aAAaL,QAAQR,MAArB,CAA3C,CAJjB;AAKCc,sBAAgB3D,qBAAqBmB,MAAMwC,cAA3B,EAA2CD,aAAaL,QAAQP,OAArB,CAA3C,CALjB;AAMCc,eAAS5D,qBAAqBmB,MAAMyC,OAA3B,EAAoCP,QAAQR,MAA5C,CANV;AAOCgB,cAAQ7D,qBAAqBmB,MAAM0C,MAA3B,EAAmCR,QAAQP,OAA3C,CAPT;AASCgB,oBAAc9D,qBAAqBmB,MAAM2C,YAA3B,EAA0CC,KAAD,IAAWA,MAAMC,cAAN,EAApD;AATf,KAAD;AADD,GAAD,CADF;AAeF,CApB6B,CAA/B;AAuBAd,iBAAiBF,WAAjB,GAA+BC,YAA/B;AAMA,IAAMgB,cAAc,iBAApB;AAGA,IAAM,CAACC,cAAD,EAAiBC,gBAAjB,IAAqCtD,uBAA2CoD,WAA3C,EAAwD;AACjGG,cAAY;AADqF,CAAxD,CAA3C;;AAkBA,IAAMC,kBACJlD,KADsD,IAEnD;AACH,QAAM;AAAEC,oBAAF;AAAoBgD,cAApB;AAAgC/C,YAAhC;AAA0CiD;AAA1C,MAAwDnD,KAA9D;AACA,QAAMkC,UAAUpC,oBAAoBgD,WAApB,EAAiC7C,gBAAjC,CAAhB;AACA,SACE,mBAAC8C,cAAD,EAAC;AAAetB,WAAOxB,gBAAtB;AAAwCgD,cAAxC;AACC/C,iCAACb,QAAD,EAAC;AAAS+D,eAASH,cAAcf,QAAQ/B,IAAxC;AACCD,mCAACd,eAAD,EAAC;AAAgB+C,iBAAO,IAAvB;AAAwBgB,iBAAxB;AACEjD;AADF,OAAD;AADD,KAAD;AADD,GAAD,CADF;AASF,CAdA;;AAgBAgD,gBAAgBrB,WAAhB,GAA8BiB,WAA9B;AAMA,IAAMO,eAAe,kBAArB;AAWA,IAAMC,mBAAyB1E,iBAC7B,CAACoB,KAAD,EAA4CgC,YAA5C,KAA6D;AAC3D,QAAMuB,gBAAgBP,iBAAiBK,YAAjB,EAA+BrD,MAAMC,gBAArC,CAAtB;AACA,QAAM;AAAEgD,iBAAaM,cAAcN,UAA7B;AAAyC,OAAGO;AAA5C,MAA6DxD,KAAnE;AACA,QAAMkC,UAAUpC,oBAAoBuD,YAApB,EAAkCrD,MAAMC,gBAAxC,CAAhB;AACA,SACE,mBAACZ,QAAD,EAAC;AAAS+D,aAASH,cAAcf,QAAQ/B,IAAxC;AACCD,iCAACuD,oBAAD,EAAC;AACC,oBAAYvB,QAAQ/B,IAAR,GAAe,MAAf,GAAwB,QADrC;AAEE,SAAGqD,YAFL;AAGClB,sBAAgBzD,qBAAqBmB,MAAMsC,cAA3B,EAA2CC,aAAaL,QAAQR,MAArB,CAA3C,CAHjB;AAICc,sBAAgB3D,qBAAqBmB,MAAMwC,cAA3B,EAA2CD,aAAaL,QAAQP,OAArB,CAA3C,CAJjB;AAKCU,WAAKL;AALN,KAAD;AADD,GAAD,CADF;AAWF,CAhB6B,CAA/B;AAmBAsB,iBAAiBzB,WAAjB,GAA+BwB,YAA/B;AA+BA,IAAMI,uBAA6B7E,iBAGjC,CAACoB,KAAD,EAAgDgC,YAAhD,KAAiE;AACjE,QAAM;AACJ/B,oBADI;AAEJyD,mBAFI;AAGJC,wBAHI;AAIJC,kBAJI;AAKJC,qBALI;AAMJ,OAAGL;AANC,MAOFxD,KAPJ;AAQA,QAAMkC,UAAUpC,oBAAoBuD,YAApB,EAAkCpD,gBAAlC,CAAhB;AACA,QAAMQ,cAAcb,eAAeK,gBAAf,CAApB;AACA,QAAMoC,MAAYzD,aAAoC,IAApC,CAAlB;AACA,QAAMkF,eAAe9E,gBAAgBgD,YAAhB,EAA8BK,GAA9B,CAArB;AACA,QAAM,CAAC0B,gBAAD,EAAmBC,mBAAnB,IAAgDpF,eAAS,KAAT,CAAtD;AAEMA,kBAAU,MAAM;AACpB,QAAImF,gBAAJ,EAAsB;AACpB,YAAME,OAAOC,SAASD,IAAtB;AAGAzE,+BAAyByE,KAAKE,KAAL,CAAWC,UAAX,IAAyBH,KAAKE,KAAL,CAAWE,gBAA7D;AAEAJ,WAAKE,KAAL,CAAWC,UAAX,GAAwB,MAAxB;AACAH,WAAKE,KAAL,CAAWE,gBAAX,GAA8B,MAA9B;AACA,aAAO,MAAM;AACXJ,aAAKE,KAAL,CAAWC,UAAX,GAAwB5E,sBAAxB;AACAyE,aAAKE,KAAL,CAAWE,gBAAX,GAA8B7E,sBAA9B;AACF,OAHA;AAIF;AACF,GAdM,EAcH,CAACuE,gBAAD,CAdG;AAgBAnF,kBAAU,MAAM;AACpB,QAAIyD,IAAIjB,OAAR,EAAiB;AACf,YAAMkD,kBAAkB,MAAM;AAC5BN,4BAAoB,KAApB;AACA9B,gBAAQrB,yBAAR,CAAkCO,OAAlC,GAA4C,KAA5C;AAGAE,mBAAW,MAAM;AACf,gBAAMiD,eAAeL,SAASM,YAAT,IAAyBC,QAAzB,OAAwC,EAA7D;AACA,cAAIF,YAAJ,EAAkBrC,QAAQtB,eAAR,CAAwBQ,OAAxB,GAAkC,IAAlC;AACnB,SAHD;AAIF,OATA;;AAWA8C,eAASQ,gBAAT,CAA0B,WAA1B,EAAuCJ,eAAvC;AACA,aAAO,MAAM;AACXJ,iBAASS,mBAAT,CAA6B,WAA7B,EAA0CL,eAA1C;AACApC,gBAAQtB,eAAR,CAAwBQ,OAAxB,GAAkC,KAAlC;AACAc,gBAAQrB,yBAAR,CAAkCO,OAAlC,GAA4C,KAA5C;AACF,OAJA;AAKF;AACF,GApBM,EAoBH,CAACc,QAAQrB,yBAAT,EAAoCqB,QAAQtB,eAA5C,CApBG;AAsBAhC,kBAAU,MAAM;AACpB,QAAIyD,IAAIjB,OAAR,EAAiB;AACf,YAAMwD,YAAYC,iBAAiBxC,IAAIjB,OAArB,CAAlB;AACAwD,gBAAUE,OAAV,CAAmBC,QAAD,IAAcA,SAASC,YAAT,CAAsB,UAAtB,EAAkC,IAAlC,CAAhC;AACF;AACD,GALK;AAON,SACE,mBAACzF,gBAAD,EAAC;AACC4C,aAAO,IADR;AAEC8C,iCAA6B,KAF9B;AAGCpB,qBAHD;AAICH,mBAJD;AAKCC,wBALD;AAMCC,oBAAgB/E,qBAAqB+E,cAArB,EAAsChB,KAAD,IAAW;AAC9DA,YAAMC,cAAN;AACD,KAFe,CANjB;AASCjB,eAAWM,QAAQN,SATpB;AAWC1B,iCAAiBjB,uBAAjB,EAAC,EACE,GAAGwB,WADL;AAEE,SAAG+C,YAFL;AAGC0B,qBAAerG,qBAAqB2E,aAAa0B,aAAlC,EAAkDtC,KAAD,IAAW;AAEzE,YAAIA,MAAMuC,aAAN,CAAoBC,QAApB,CAA6BxC,MAAMyC,MAAnC,CAAJ,EAA+D;AAC7DrB,8BAAoB,IAApB;AACF;;AACA9B,gBAAQtB,eAAR,CAAwBQ,OAAxB,GAAkC,KAAlC;AACAc,gBAAQrB,yBAAR,CAAkCO,OAAlC,GAA4C,IAA5C;AACD,OAPc,CAHhB;AAWCiB,WAAKyB,YAXN;AAYCK,aAAO,EACL,GAAGX,aAAaW,KADX;AAELC,oBAAYL,mBAAmB,MAAnB,GAA4B,MAFnC;AAEmC;AAExCuB,0BAAkBvB,mBAAmB,MAAnB,GAA4B,MAJzC;AAIyC;AAE9C,WAAG;AACD,yDAA+C,sCAD9C;AAED,wDAA8C,qCAF7C;AAGD,yDAA+C,sCAH9C;AAID,8CAAoC,kCAJnC;AAKD,+CAAqC;AALpC;AANE;AAZR,KAAD;AAXD,GAAD,CADF;AAyCD,CAxGkC,CAAnC;AA8GA,IAAMwB,aAAa,gBAAnB;AAMA,IAAMC,iBAAuB5G,iBAC3B,CAACoB,KAAD,EAA0CgC,YAA1C,KAA2D;AACzD,QAAM;AAAE/B,oBAAF;AAAoB,OAAGwF;AAAvB,MAAsCzF,KAA5C;AACA,QAAMS,cAAcb,eAAeK,gBAAf,CAApB;AACA,SAAO,mBAAiBhB,qBAAjB,EAAC,EAAuB,GAAGwB,WAA1B;AAAwC,OAAGgF,UAA3C;AAAuDpD,SAAKL;AAA5D,GAAD,CAAP;AACF,CAL2B,CAA7B;AAQAwD,eAAe3D,WAAf,GAA6B0D,UAA7B;;AAIA,SAAShD,YAAT,CAAyBmD,YAAzB,EAAmD;AACjD,SAAQ9C,KAAD,IACLA,MAAM+C,WAAN,KAAsB,OAAtB,GAAgC,MAAhC,GAA4CD,cAD9C;AAEF;;AAMA,SAASb,gBAAT,CAA0B1B,SAA1B,EAAkD;AAChD,QAAMyC,QAAuB,EAA7B;AACA,QAAMC,SAAS3B,SAAS4B,gBAAT,CAA0B3C,SAA1B,EAAqC4C,WAAWC,YAAhD,EAA8D;AAC3EC,gBAAaC,IAAD,IAAe;AAIzB,aAAOA,KAAKC,QAAL,IAAiB,CAAjB,GAAqBJ,WAAWK,aAAhC,GAAgDL,WAAWM,WAAlE;AACF;AAN2E,GAA9D,CAAf;;AAQA,SAAOR,OAAOS,QAAP,EAAP,EAA0BV,MAAMW,IAAN,CAAWV,OAAOW,WAAlB;;AAC1B,SAAOZ,KAAP;AACF;;AAEA,IAAMa,QAAO1G,SAAb;AACA,IAAM2G,UAAU3E,gBAAhB;AACA,IAAM5C,SAAS+D,eAAf;AACA,IAAMyD,WAAUrD,gBAAhB;AACA,IAAMsD,SAAQpB,cAAd","names":["React","composeEventHandlers","createContextScope","useControllableState","useComposedRefs","PopperPrimitive","createPopperScope","Portal","PortalPrimitive","Presence","Primitive","DismissableLayer","originalBodyUserSelect","HOVERCARD_NAME","createHoverCardContext","createHoverCardScope","usePopperScope","HoverCardProvider","useHoverCardContext","HoverCard","props","__scopeHoverCard","children","open","openProp","defaultOpen","onOpenChange","openDelay","closeDelay","popperScope","openTimerRef","closeTimerRef","hasSelectionRef","isPointerDownOnContentRef","setOpen","prop","defaultProp","onChange","handleOpen","clearTimeout","current","window","setTimeout","handleClose","handleDismiss","scope","onOpen","onClose","onDismiss","displayName","TRIGGER_NAME","HoverCardTrigger","forwardedRef","triggerProps","context","asChild","a","ref","onPointerEnter","excludeTouch","onPointerLeave","onFocus","onBlur","onTouchStart","event","preventDefault","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","HoverCardPortal","container","present","CONTENT_NAME","HoverCardContent","portalContext","contentProps","HoverCardContentImpl","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","composedRefs","containSelection","setContainSelection","body","document","style","userSelect","webkitUserSelect","handlePointerUp","hasSelection","getSelection","toString","addEventListener","removeEventListener","tabbables","getTabbableNodes","forEach","tabbable","setAttribute","disableOutsidePointerEvents","onPointerDown","currentTarget","contains","target","WebkitUserSelect","ARROW_NAME","HoverCardArrow","arrowProps","eventHandler","pointerType","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","node","tabIndex","FILTER_ACCEPT","FILTER_SKIP","nextNode","push","currentNode","Root","Trigger","Content","Arrow"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-hover-card/src/HoverCard.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCard\n * -----------------------------------------------------------------------------------------------*/\n\nlet originalBodyUserSelect: string;\n\nconst HOVERCARD_NAME = 'HoverCard';\n\ntype ScopedProps<P> = P & { __scopeHoverCard?: Scope };\nconst [createHoverCardContext, createHoverCardScope] = createContextScope(HOVERCARD_NAME, [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype HoverCardContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpen(): void;\n  onClose(): void;\n  onDismiss(): void;\n  hasSelectionRef: React.MutableRefObject<boolean>;\n  isPointerDownOnContentRef: React.MutableRefObject<boolean>;\n};\n\nconst [HoverCardProvider, useHoverCardContext] =\n  createHoverCardContext<HoverCardContextValue>(HOVERCARD_NAME);\n\ninterface HoverCardProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  openDelay?: number;\n  closeDelay?: number;\n}\n\nconst HoverCard: React.FC<HoverCardProps> = (props: ScopedProps<HoverCardProps>) => {\n  const {\n    __scopeHoverCard,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    openDelay = 700,\n    closeDelay = 300,\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n  const hasSelectionRef = React.useRef(false);\n  const isPointerDownOnContentRef = React.useRef(false);\n\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  const handleOpen = React.useCallback(() => {\n    clearTimeout(closeTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);\n  }, [openDelay, setOpen]);\n\n  const handleClose = React.useCallback(() => {\n    clearTimeout(openTimerRef.current);\n    if (!hasSelectionRef.current && !isPointerDownOnContentRef.current) {\n      closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);\n    }\n  }, [closeDelay, setOpen]);\n\n  const handleDismiss = React.useCallback(() => setOpen(false), [setOpen]);\n\n  // cleanup any queued state updates on unmount\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(openTimerRef.current);\n      clearTimeout(closeTimerRef.current);\n    };\n  }, []);\n\n  return (\n    <HoverCardProvider\n      scope={__scopeHoverCard}\n      open={open}\n      onOpenChange={setOpen}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      onDismiss={handleDismiss}\n      hasSelectionRef={hasSelectionRef}\n      isPointerDownOnContentRef={isPointerDownOnContentRef}\n    >\n      <PopperPrimitive.Root {...popperScope}>{children}</PopperPrimitive.Root>\n    </HoverCardProvider>\n  );\n};\n\nHoverCard.displayName = HOVERCARD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'HoverCardTrigger';\n\ntype HoverCardTriggerElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = React.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface HoverCardTriggerProps extends PrimitiveLinkProps {}\n\nconst HoverCardTrigger = React.forwardRef<HoverCardTriggerElement, HoverCardTriggerProps>(\n  (props: ScopedProps<HoverCardTriggerProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...triggerProps } = props;\n    const context = useHoverCardContext(TRIGGER_NAME, __scopeHoverCard);\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.a\n          data-state={context.open ? 'open' : 'closed'}\n          {...triggerProps}\n          ref={forwardedRef}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          onFocus={composeEventHandlers(props.onFocus, context.onOpen)}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          // prevent focus event on touch devices\n          onTouchStart={composeEventHandlers(props.onTouchStart, (event) => event.preventDefault())}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nHoverCardTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'HoverCardPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createHoverCardContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface HoverCardPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardPortal: React.FC<HoverCardPortalProps> = (\n  props: ScopedProps<HoverCardPortalProps>\n) => {\n  const { __scopeHoverCard, forceMount, children, container } = props;\n  const context = useHoverCardContext(PORTAL_NAME, __scopeHoverCard);\n  return (\n    <PortalProvider scope={__scopeHoverCard} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nHoverCardPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'HoverCardContent';\n\ntype HoverCardContentElement = HoverCardContentImplElement;\ninterface HoverCardContentProps extends HoverCardContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardContent = React.forwardRef<HoverCardContentElement, HoverCardContentProps>(\n  (props: ScopedProps<HoverCardContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeHoverCard);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useHoverCardContext(CONTENT_NAME, props.__scopeHoverCard);\n    return (\n      <Presence present={forceMount || context.open}>\n        <HoverCardContentImpl\n          data-state={context.open ? 'open' : 'closed'}\n          {...contentProps}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nHoverCardContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype HoverCardContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface HoverCardContentImplProps extends Omit<PopperContentProps, 'onPlaced'> {\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  /**\n   * Event handler called when the focus moves outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onFocusOutside?: DismissableLayerProps['onFocusOutside'];\n  /**\n   * Event handler called when an interaction happens outside the `HoverCard`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: DismissableLayerProps['onInteractOutside'];\n}\n\nconst HoverCardContentImpl = React.forwardRef<\n  HoverCardContentImplElement,\n  HoverCardContentImplProps\n>((props: ScopedProps<HoverCardContentImplProps>, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const ref = React.useRef<HoverCardContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [containSelection, setContainSelection] = React.useState(false);\n\n  React.useEffect(() => {\n    if (containSelection) {\n      const body = document.body;\n\n      // Safari requires prefix\n      originalBodyUserSelect = body.style.userSelect || body.style.webkitUserSelect;\n\n      body.style.userSelect = 'none';\n      body.style.webkitUserSelect = 'none';\n      return () => {\n        body.style.userSelect = originalBodyUserSelect;\n        body.style.webkitUserSelect = originalBodyUserSelect;\n      };\n    }\n  }, [containSelection]);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const handlePointerUp = () => {\n        setContainSelection(false);\n        context.isPointerDownOnContentRef.current = false;\n\n        // Delay a frame to ensure we always access the latest selection\n        setTimeout(() => {\n          const hasSelection = document.getSelection()?.toString() !== '';\n          if (hasSelection) context.hasSelectionRef.current = true;\n        });\n      };\n\n      document.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        document.removeEventListener('pointerup', handlePointerUp);\n        context.hasSelectionRef.current = false;\n        context.isPointerDownOnContentRef.current = false;\n      };\n    }\n  }, [context.isPointerDownOnContentRef, context.hasSelectionRef]);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const tabbables = getTabbableNodes(ref.current);\n      tabbables.forEach((tabbable) => tabbable.setAttribute('tabindex', '-1'));\n    }\n  });\n\n  return (\n    <DismissableLayer\n      asChild\n      disableOutsidePointerEvents={false}\n      onInteractOutside={onInteractOutside}\n      onEscapeKeyDown={onEscapeKeyDown}\n      onPointerDownOutside={onPointerDownOutside}\n      onFocusOutside={composeEventHandlers(onFocusOutside, (event) => {\n        event.preventDefault();\n      })}\n      onDismiss={context.onDismiss}\n    >\n      <PopperPrimitive.Content\n        {...popperScope}\n        {...contentProps}\n        onPointerDown={composeEventHandlers(contentProps.onPointerDown, (event) => {\n          // Contain selection to current layer\n          if (event.currentTarget.contains(event.target as HTMLElement)) {\n            setContainSelection(true);\n          }\n          context.hasSelectionRef.current = false;\n          context.isPointerDownOnContentRef.current = true;\n        })}\n        ref={composedRefs}\n        style={{\n          ...contentProps.style,\n          userSelect: containSelection ? 'text' : undefined,\n          // Safari requires prefix\n          WebkitUserSelect: containSelection ? 'text' : undefined,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-hover-card-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-hover-card-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-hover-card-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-hover-card-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-hover-card-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    </DismissableLayer>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'HoverCardArrow';\n\ntype HoverCardArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface HoverCardArrowProps extends PopperArrowProps {}\n\nconst HoverCardArrow = React.forwardRef<HoverCardArrowElement, HoverCardArrowProps>(\n  (props: ScopedProps<HoverCardArrowProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nHoverCardArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction excludeTouch<E>(eventHandler: () => void) {\n  return (event: React.PointerEvent<E>) =>\n    event.pointerType === 'touch' ? undefined : eventHandler();\n}\n\n/**\n * Returns a list of nodes that can be in the tab sequence.\n * @see: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n */\nfunction getTabbableNodes(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  return nodes;\n}\n\nconst Root = HoverCard;\nconst Trigger = HoverCardTrigger;\nconst Portal = HoverCardPortal;\nconst Content = HoverCardContent;\nconst Arrow = HoverCardArrow;\n\nexport {\n  createHoverCardScope,\n  //\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n  HoverCardArrow,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n};\nexport type {\n  HoverCardProps,\n  HoverCardTriggerProps,\n  HoverCardPortalProps,\n  HoverCardContentProps,\n  HoverCardArrowProps,\n};\n"]},"metadata":{},"sourceType":"module"}