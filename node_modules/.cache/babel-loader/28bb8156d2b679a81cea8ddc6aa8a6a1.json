{"ast":null,"code":"import { getValueTransition, GroupPlaybackControls } from 'motion-dom';\nimport { secondsToMilliseconds } from 'motion-utils';\nimport { frame } from '../../frameloop/frame.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { AcceleratedAnimation } from '../animators/AcceleratedAnimation.mjs';\nimport { MainThreadAnimation } from '../animators/MainThreadAnimation.mjs';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = function (name, value, target) {\n  let transition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let element = arguments.length > 4 ? arguments[4] : undefined;\n  let isHandoff = arguments.length > 5 ? arguments[5] : undefined;\n  return onComplete => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n\n    let {\n      elapsed = 0\n    } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    let options = {\n      keyframes: Array.isArray(target) ? target : [null, target],\n      ease: \"easeOut\",\n      velocity: value.getVelocity(),\n      ...valueTransition,\n      delay: -elapsed,\n      onUpdate: v => {\n        value.set(v);\n        valueTransition.onUpdate && valueTransition.onUpdate(v);\n      },\n      onComplete: () => {\n        onComplete();\n        valueTransition.onComplete && valueTransition.onComplete();\n      },\n      name,\n      motionValue: value,\n      element: isHandoff ? undefined : element\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */\n\n    if (!isTransitionDefined(valueTransition)) {\n      options = { ...options,\n        ...getDefaultTransition(name, options)\n      };\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n\n\n    if (options.duration) {\n      options.duration = secondsToMilliseconds(options.duration);\n    }\n\n    if (options.repeatDelay) {\n      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n\n    if (options.from !== undefined) {\n      options.keyframes[0] = options.from;\n    }\n\n    let shouldSkip = false;\n\n    if (options.type === false || options.duration === 0 && !options.repeatDelay) {\n      options.duration = 0;\n\n      if (options.delay === 0) {\n        shouldSkip = true;\n      }\n    }\n\n    if (instantAnimationState.current || MotionGlobalConfig.skipAnimations) {\n      shouldSkip = true;\n      options.duration = 0;\n      options.delay = 0;\n    }\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n\n\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n      const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n\n      if (finalKeyframe !== undefined) {\n        frame.update(() => {\n          options.onUpdate(finalKeyframe);\n          options.onComplete();\n        }); // We still want to return some animation controls here rather\n        // than returning undefined\n\n        return new GroupPlaybackControls([]);\n      }\n    }\n    /**\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n     * optimised animation.\n     */\n\n\n    if (!isHandoff && AcceleratedAnimation.supports(options)) {\n      return new AcceleratedAnimation(options);\n    } else {\n      return new MainThreadAnimation(options);\n    }\n  };\n};\n\nexport { animateMotionValue };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs"],"names":["getValueTransition","GroupPlaybackControls","secondsToMilliseconds","frame","MotionGlobalConfig","instantAnimationState","AcceleratedAnimation","MainThreadAnimation","getFinalKeyframe","getDefaultTransition","isTransitionDefined","animateMotionValue","name","value","target","transition","element","isHandoff","onComplete","valueTransition","delay","elapsed","options","keyframes","Array","isArray","ease","velocity","getVelocity","onUpdate","v","set","motionValue","undefined","duration","repeatDelay","from","shouldSkip","type","current","skipAnimations","get","finalKeyframe","update","supports"],"mappings":"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","sourcesContent":["import { getValueTransition, GroupPlaybackControls } from 'motion-dom';\nimport { secondsToMilliseconds } from 'motion-utils';\nimport { frame } from '../../frameloop/frame.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { AcceleratedAnimation } from '../animators/AcceleratedAnimation.mjs';\nimport { MainThreadAnimation } from '../animators/MainThreadAnimation.mjs';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    let options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        options = {\n            ...options,\n            ...getDefaultTransition(name, options),\n        };\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    if (options.duration) {\n        options.duration = secondsToMilliseconds(options.duration);\n    }\n    if (options.repeatDelay) {\n        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (instantAnimationState.current ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            // We still want to return some animation controls here rather\n            // than returning undefined\n            return new GroupPlaybackControls([]);\n        }\n    }\n    /**\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n     * optimised animation.\n     */\n    if (!isHandoff && AcceleratedAnimation.supports(options)) {\n        return new AcceleratedAnimation(options);\n    }\n    else {\n        return new MainThreadAnimation(options);\n    }\n};\n\nexport { animateMotionValue };\n"]},"metadata":{},"sourceType":"module"}