{"ast":null,"code":"import _objectSpread from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/regenerator/index.js\";\nimport { secondsToMilliseconds } from 'motion-utils';\nimport { BaseGroupPlaybackControls } from '../animation/controls/BaseGroup.mjs';\nimport { getValueTransition } from '../animation/utils/get-value-transition.mjs';\nimport { NativeAnimationControls } from '../animation/waapi/NativeAnimationControls.mjs';\nimport { PseudoAnimation } from '../animation/waapi/PseudoAnimation.mjs';\nimport { applyGeneratorOptions } from '../animation/waapi/utils/convert-options.mjs';\nimport { mapEasingToNativeEasing } from '../animation/waapi/utils/easing.mjs';\nimport { chooseLayerType } from './utils/choose-layer-type.mjs';\nimport { css } from './utils/css.mjs';\nimport { getLayerName } from './utils/get-layer-name.mjs';\nimport { getViewAnimations } from './utils/get-view-animations.mjs';\nimport { hasTarget } from './utils/has-target.mjs';\nvar definitionNames = [\"layout\", \"enter\", \"exit\", \"new\", \"old\"];\n\nfunction startViewAnimation(update, defaultOptions, targets) {\n  if (!document.startViewTransition) {\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return update();\n\n              case 2:\n                resolve(new BaseGroupPlaybackControls([]));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  } // TODO: Go over existing targets and ensure they all have ids\n\n  /**\n   * If we don't have any animations defined for the root target,\n   * remove it from being captured.\n   */\n\n\n  if (!hasTarget(\"root\", targets)) {\n    css.set(\":root\", {\n      \"view-transition-name\": \"none\"\n    });\n  }\n  /**\n   * Set the timing curve to linear for all view transition layers.\n   * This gets baked into the keyframes, which can't be changed\n   * without breaking the generated animation.\n   *\n   * This allows us to set easing via updateTiming - which can be changed.\n   */\n\n\n  css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\", {\n    \"animation-timing-function\": \"linear !important\"\n  });\n  css.commit(); // Write\n\n  var transition = document.startViewTransition( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return update();\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n  transition.finished.finally(function () {\n    css.remove(); // Write\n  });\n  return new Promise(function (resolve) {\n    transition.ready.then(function () {\n      var _a;\n\n      var generatedViewAnimations = getViewAnimations();\n      var animations = [];\n      /**\n       * Create animations for our definitions\n       */\n\n      targets.forEach(function (definition, target) {\n        // TODO: If target is not \"root\", resolve elements\n        // and iterate over each\n        var _iterator = _createForOfIteratorHelper(definitionNames),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var key = _step.value;\n            if (!definition[key]) continue;\n            var _definition$key = definition[key],\n                keyframes = _definition$key.keyframes,\n                options = _definition$key.options;\n\n            for (var _i = 0, _Object$entries = Object.entries(keyframes); _i < _Object$entries.length; _i++) {\n              var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                  valueName = _Object$entries$_i[0],\n                  valueKeyframes = _Object$entries$_i[1];\n\n              if (!valueKeyframes) continue;\n\n              var valueOptions = _objectSpread(_objectSpread({}, getValueTransition(defaultOptions, valueName)), getValueTransition(options, valueName));\n\n              var type = chooseLayerType(key);\n              /**\n               * If this is an opacity animation, and keyframes are not an array,\n               * we need to convert them into an array and set an initial value.\n               */\n\n              if (valueName === \"opacity\" && !Array.isArray(valueKeyframes)) {\n                var initialValue = type === \"new\" ? 0 : 1;\n                valueKeyframes = [initialValue, valueKeyframes];\n              }\n              /**\n               * Resolve stagger function if provided.\n               */\n\n\n              if (typeof valueOptions.delay === \"function\") {\n                valueOptions.delay = valueOptions.delay(0, 1);\n              }\n\n              var animation = new PseudoAnimation(document.documentElement, \"::view-transition-\".concat(type, \"(\").concat(target, \")\"), valueName, valueKeyframes, valueOptions);\n              animations.push(animation);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n      /**\n       * Handle browser generated animations\n       */\n\n      var _iterator2 = _createForOfIteratorHelper(generatedViewAnimations),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var animation = _step2.value;\n          if (animation.playState === \"finished\") continue;\n          var effect = animation.effect;\n          if (!effect || !(effect instanceof KeyframeEffect)) continue;\n          var pseudoElement = effect.pseudoElement;\n          if (!pseudoElement) continue;\n          var name = getLayerName(pseudoElement);\n          if (!name) continue;\n          var targetDefinition = targets.get(name.layer);\n\n          if (!targetDefinition) {\n            /**\n             * If transition name is group then update the timing of the animation\n             * whereas if it's old or new then we could possibly replace it using\n             * the above method.\n             */\n            var transitionName = name.type === \"group\" ? \"layout\" : \"\";\n\n            var animationTransition = _objectSpread({}, getValueTransition(defaultOptions, transitionName));\n\n            applyGeneratorOptions(animationTransition);\n            var easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration);\n            effect.updateTiming({\n              delay: secondsToMilliseconds((_a = animationTransition.delay) !== null && _a !== void 0 ? _a : 0),\n              duration: animationTransition.duration,\n              easing: easing\n            });\n            animations.push(new NativeAnimationControls(animation));\n          } else if (hasOpacity(targetDefinition, \"enter\") && hasOpacity(targetDefinition, \"exit\") && effect.getKeyframes().some(function (keyframe) {\n            return keyframe.mixBlendMode;\n          })) {\n            animations.push(new NativeAnimationControls(animation));\n          } else {\n            animation.cancel();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      resolve(new BaseGroupPlaybackControls(animations));\n    });\n  });\n}\n\nfunction hasOpacity(target, key) {\n  var _a;\n\n  return (_a = target === null || target === void 0 ? void 0 : target[key]) === null || _a === void 0 ? void 0 : _a.keyframes.opacity;\n}\n\nexport { startViewAnimation };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/motion-dom/dist/es/view/start.mjs"],"names":["secondsToMilliseconds","BaseGroupPlaybackControls","getValueTransition","NativeAnimationControls","PseudoAnimation","applyGeneratorOptions","mapEasingToNativeEasing","chooseLayerType","css","getLayerName","getViewAnimations","hasTarget","definitionNames","startViewAnimation","update","defaultOptions","targets","document","startViewTransition","Promise","resolve","set","commit","transition","finished","finally","remove","ready","then","_a","generatedViewAnimations","animations","forEach","definition","target","key","keyframes","options","Object","entries","valueName","valueKeyframes","valueOptions","type","Array","isArray","initialValue","delay","animation","documentElement","push","playState","effect","KeyframeEffect","pseudoElement","name","targetDefinition","get","layer","transitionName","animationTransition","easing","ease","duration","updateTiming","hasOpacity","getKeyframes","some","keyframe","mixBlendMode","cancel","opacity"],"mappings":";;;;;AAAA,SAASA,qBAAT,QAAsC,cAAtC;AACA,SAASC,yBAAT,QAA0C,qCAA1C;AACA,SAASC,kBAAT,QAAmC,6CAAnC;AACA,SAASC,uBAAT,QAAwC,gDAAxC;AACA,SAASC,eAAT,QAAgC,wCAAhC;AACA,SAASC,qBAAT,QAAsC,8CAAtC;AACA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,IAAMC,eAAe,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA4B,KAA5B,EAAmC,KAAnC,CAAxB;;AACA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,cAApC,EAAoDC,OAApD,EAA6D;AACzD,MAAI,CAACC,QAAQ,CAACC,mBAAd,EAAmC;AAC/B,WAAO,IAAIC,OAAJ;AAAA,0EAAY,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACTN,MAAM,EADG;;AAAA;AAEfM,gBAAAA,OAAO,CAAC,IAAInB,yBAAJ,CAA8B,EAA9B,CAAD,CAAP;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAZ;;AAAA;AAAA;AAAA;AAAA,QAAP;AAIH,GANwD,CAOzD;;AACA;AACJ;AACA;AACA;;;AACI,MAAI,CAACU,SAAS,CAAC,MAAD,EAASK,OAAT,CAAd,EAAiC;AAC7BR,IAAAA,GAAG,CAACa,GAAJ,CAAQ,OAAR,EAAiB;AACb,8BAAwB;AADX,KAAjB;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIb,EAAAA,GAAG,CAACa,GAAJ,CAAQ,gFAAR,EAA0F;AAAE,iCAA6B;AAA/B,GAA1F;AACAb,EAAAA,GAAG,CAACc,MAAJ,GAzByD,CAyB3C;;AACd,MAAMC,UAAU,GAAGN,QAAQ,CAACC,mBAAT,wEAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACtCJ,MAAM,EADgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B,GAAnB;AAIAS,EAAAA,UAAU,CAACC,QAAX,CAAoBC,OAApB,CAA4B,YAAM;AAC9BjB,IAAAA,GAAG,CAACkB,MAAJ,GAD8B,CAChB;AACjB,GAFD;AAGA,SAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BG,IAAAA,UAAU,CAACI,KAAX,CAAiBC,IAAjB,CAAsB,YAAM;AACxB,UAAIC,EAAJ;;AACA,UAAMC,uBAAuB,GAAGpB,iBAAiB,EAAjD;AACA,UAAMqB,UAAU,GAAG,EAAnB;AACA;AACZ;AACA;;AACYf,MAAAA,OAAO,CAACgB,OAAR,CAAgB,UAACC,UAAD,EAAaC,MAAb,EAAwB;AACpC;AACA;AAFoC,mDAGlBtB,eAHkB;AAAA;;AAAA;AAGpC,8DAAmC;AAAA,gBAAxBuB,GAAwB;AAC/B,gBAAI,CAACF,UAAU,CAACE,GAAD,CAAf,EACI;AACJ,kCAA+BF,UAAU,CAACE,GAAD,CAAzC;AAAA,gBAAQC,SAAR,mBAAQA,SAAR;AAAA,gBAAmBC,OAAnB,mBAAmBA,OAAnB;;AACA,+CAAwCC,MAAM,CAACC,OAAP,CAAeH,SAAf,CAAxC,qCAAmE;AAA9D;AAAA,kBAAKI,SAAL;AAAA,kBAAgBC,cAAhB;;AACD,kBAAI,CAACA,cAAL,EACI;;AACJ,kBAAMC,YAAY,mCACXxC,kBAAkB,CAACa,cAAD,EAAiByB,SAAjB,CADP,GAEXtC,kBAAkB,CAACmC,OAAD,EAAUG,SAAV,CAFP,CAAlB;;AAIA,kBAAMG,IAAI,GAAGpC,eAAe,CAAC4B,GAAD,CAA5B;AACA;AACxB;AACA;AACA;;AACwB,kBAAIK,SAAS,KAAK,SAAd,IACA,CAACI,KAAK,CAACC,OAAN,CAAcJ,cAAd,CADL,EACoC;AAChC,oBAAMK,YAAY,GAAGH,IAAI,KAAK,KAAT,GAAiB,CAAjB,GAAqB,CAA1C;AACAF,gBAAAA,cAAc,GAAG,CAACK,YAAD,EAAeL,cAAf,CAAjB;AACH;AACD;AACxB;AACA;;;AACwB,kBAAI,OAAOC,YAAY,CAACK,KAApB,KAA8B,UAAlC,EAA8C;AAC1CL,gBAAAA,YAAY,CAACK,KAAb,GAAqBL,YAAY,CAACK,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAArB;AACH;;AACD,kBAAMC,SAAS,GAAG,IAAI5C,eAAJ,CAAoBa,QAAQ,CAACgC,eAA7B,8BAAmEN,IAAnE,cAA2ET,MAA3E,QAAsFM,SAAtF,EAAiGC,cAAjG,EAAiHC,YAAjH,CAAlB;AACAX,cAAAA,UAAU,CAACmB,IAAX,CAAgBF,SAAhB;AACH;AACJ;AAjCmC;AAAA;AAAA;AAAA;AAAA;AAkCvC,OAlCD;AAmCA;AACZ;AACA;;AA5CoC,kDA6CAlB,uBA7CA;AAAA;;AAAA;AA6CxB,+DAAiD;AAAA,cAAtCkB,SAAsC;AAC7C,cAAIA,SAAS,CAACG,SAAV,KAAwB,UAA5B,EACI;AACJ,cAAQC,MAAR,GAAmBJ,SAAnB,CAAQI,MAAR;AACA,cAAI,CAACA,MAAD,IAAW,EAAEA,MAAM,YAAYC,cAApB,CAAf,EACI;AACJ,cAAQC,aAAR,GAA0BF,MAA1B,CAAQE,aAAR;AACA,cAAI,CAACA,aAAL,EACI;AACJ,cAAMC,IAAI,GAAG9C,YAAY,CAAC6C,aAAD,CAAzB;AACA,cAAI,CAACC,IAAL,EACI;AACJ,cAAMC,gBAAgB,GAAGxC,OAAO,CAACyC,GAAR,CAAYF,IAAI,CAACG,KAAjB,CAAzB;;AACA,cAAI,CAACF,gBAAL,EAAuB;AACnB;AACpB;AACA;AACA;AACA;AACoB,gBAAMG,cAAc,GAAGJ,IAAI,CAACZ,IAAL,KAAc,OAAd,GAAwB,QAAxB,GAAmC,EAA1D;;AACA,gBAAMiB,mBAAmB,qBAClB1D,kBAAkB,CAACa,cAAD,EAAiB4C,cAAjB,CADA,CAAzB;;AAGAtD,YAAAA,qBAAqB,CAACuD,mBAAD,CAArB;AACA,gBAAMC,MAAM,GAAGvD,uBAAuB,CAACsD,mBAAmB,CAACE,IAArB,EAA2BF,mBAAmB,CAACG,QAA/C,CAAtC;AACAX,YAAAA,MAAM,CAACY,YAAP,CAAoB;AAChBjB,cAAAA,KAAK,EAAE/C,qBAAqB,CAAC,CAAC6B,EAAE,GAAG+B,mBAAmB,CAACb,KAA1B,MAAqC,IAArC,IAA6ClB,EAAE,KAAK,KAAK,CAAzD,GAA6DA,EAA7D,GAAkE,CAAnE,CADZ;AAEhBkC,cAAAA,QAAQ,EAAEH,mBAAmB,CAACG,QAFd;AAGhBF,cAAAA,MAAM,EAANA;AAHgB,aAApB;AAKA9B,YAAAA,UAAU,CAACmB,IAAX,CAAgB,IAAI/C,uBAAJ,CAA4B6C,SAA5B,CAAhB;AACH,WAlBD,MAmBK,IAAIiB,UAAU,CAACT,gBAAD,EAAmB,OAAnB,CAAV,IACLS,UAAU,CAACT,gBAAD,EAAmB,MAAnB,CADL,IAELJ,MAAM,CACDc,YADL,GAEKC,IAFL,CAEU,UAACC,QAAD;AAAA,mBAAcA,QAAQ,CAACC,YAAvB;AAAA,WAFV,CAFC,EAI+C;AAChDtC,YAAAA,UAAU,CAACmB,IAAX,CAAgB,IAAI/C,uBAAJ,CAA4B6C,SAA5B,CAAhB;AACH,WANI,MAOA;AACDA,YAAAA,SAAS,CAACsB,MAAV;AACH;AACJ;AAvFuB;AAAA;AAAA;AAAA;AAAA;;AAwFxBlD,MAAAA,OAAO,CAAC,IAAInB,yBAAJ,CAA8B8B,UAA9B,CAAD,CAAP;AACH,KAzFD;AA0FH,GA3FM,CAAP;AA4FH;;AACD,SAASkC,UAAT,CAAoB/B,MAApB,EAA4BC,GAA5B,EAAiC;AAC7B,MAAIN,EAAJ;;AACA,SAAO,CAACA,EAAE,GAAGK,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACC,GAAD,CAA5D,MAAuE,IAAvE,IAA+EN,EAAE,KAAK,KAAK,CAA3F,GAA+F,KAAK,CAApG,GAAwGA,EAAE,CAACO,SAAH,CAAamC,OAA5H;AACH;;AAED,SAAS1D,kBAAT","sourcesContent":["import { secondsToMilliseconds } from 'motion-utils';\nimport { BaseGroupPlaybackControls } from '../animation/controls/BaseGroup.mjs';\nimport { getValueTransition } from '../animation/utils/get-value-transition.mjs';\nimport { NativeAnimationControls } from '../animation/waapi/NativeAnimationControls.mjs';\nimport { PseudoAnimation } from '../animation/waapi/PseudoAnimation.mjs';\nimport { applyGeneratorOptions } from '../animation/waapi/utils/convert-options.mjs';\nimport { mapEasingToNativeEasing } from '../animation/waapi/utils/easing.mjs';\nimport { chooseLayerType } from './utils/choose-layer-type.mjs';\nimport { css } from './utils/css.mjs';\nimport { getLayerName } from './utils/get-layer-name.mjs';\nimport { getViewAnimations } from './utils/get-view-animations.mjs';\nimport { hasTarget } from './utils/has-target.mjs';\n\nconst definitionNames = [\"layout\", \"enter\", \"exit\", \"new\", \"old\"];\nfunction startViewAnimation(update, defaultOptions, targets) {\n    if (!document.startViewTransition) {\n        return new Promise(async (resolve) => {\n            await update();\n            resolve(new BaseGroupPlaybackControls([]));\n        });\n    }\n    // TODO: Go over existing targets and ensure they all have ids\n    /**\n     * If we don't have any animations defined for the root target,\n     * remove it from being captured.\n     */\n    if (!hasTarget(\"root\", targets)) {\n        css.set(\":root\", {\n            \"view-transition-name\": \"none\",\n        });\n    }\n    /**\n     * Set the timing curve to linear for all view transition layers.\n     * This gets baked into the keyframes, which can't be changed\n     * without breaking the generated animation.\n     *\n     * This allows us to set easing via updateTiming - which can be changed.\n     */\n    css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\", { \"animation-timing-function\": \"linear !important\" });\n    css.commit(); // Write\n    const transition = document.startViewTransition(async () => {\n        await update();\n        // TODO: Go over new targets and ensure they all have ids\n    });\n    transition.finished.finally(() => {\n        css.remove(); // Write\n    });\n    return new Promise((resolve) => {\n        transition.ready.then(() => {\n            var _a;\n            const generatedViewAnimations = getViewAnimations();\n            const animations = [];\n            /**\n             * Create animations for our definitions\n             */\n            targets.forEach((definition, target) => {\n                // TODO: If target is not \"root\", resolve elements\n                // and iterate over each\n                for (const key of definitionNames) {\n                    if (!definition[key])\n                        continue;\n                    const { keyframes, options } = definition[key];\n                    for (let [valueName, valueKeyframes] of Object.entries(keyframes)) {\n                        if (!valueKeyframes)\n                            continue;\n                        const valueOptions = {\n                            ...getValueTransition(defaultOptions, valueName),\n                            ...getValueTransition(options, valueName),\n                        };\n                        const type = chooseLayerType(key);\n                        /**\n                         * If this is an opacity animation, and keyframes are not an array,\n                         * we need to convert them into an array and set an initial value.\n                         */\n                        if (valueName === \"opacity\" &&\n                            !Array.isArray(valueKeyframes)) {\n                            const initialValue = type === \"new\" ? 0 : 1;\n                            valueKeyframes = [initialValue, valueKeyframes];\n                        }\n                        /**\n                         * Resolve stagger function if provided.\n                         */\n                        if (typeof valueOptions.delay === \"function\") {\n                            valueOptions.delay = valueOptions.delay(0, 1);\n                        }\n                        const animation = new PseudoAnimation(document.documentElement, `::view-transition-${type}(${target})`, valueName, valueKeyframes, valueOptions);\n                        animations.push(animation);\n                    }\n                }\n            });\n            /**\n             * Handle browser generated animations\n             */\n            for (const animation of generatedViewAnimations) {\n                if (animation.playState === \"finished\")\n                    continue;\n                const { effect } = animation;\n                if (!effect || !(effect instanceof KeyframeEffect))\n                    continue;\n                const { pseudoElement } = effect;\n                if (!pseudoElement)\n                    continue;\n                const name = getLayerName(pseudoElement);\n                if (!name)\n                    continue;\n                const targetDefinition = targets.get(name.layer);\n                if (!targetDefinition) {\n                    /**\n                     * If transition name is group then update the timing of the animation\n                     * whereas if it's old or new then we could possibly replace it using\n                     * the above method.\n                     */\n                    const transitionName = name.type === \"group\" ? \"layout\" : \"\";\n                    const animationTransition = {\n                        ...getValueTransition(defaultOptions, transitionName),\n                    };\n                    applyGeneratorOptions(animationTransition);\n                    const easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration);\n                    effect.updateTiming({\n                        delay: secondsToMilliseconds((_a = animationTransition.delay) !== null && _a !== void 0 ? _a : 0),\n                        duration: animationTransition.duration,\n                        easing,\n                    });\n                    animations.push(new NativeAnimationControls(animation));\n                }\n                else if (hasOpacity(targetDefinition, \"enter\") &&\n                    hasOpacity(targetDefinition, \"exit\") &&\n                    effect\n                        .getKeyframes()\n                        .some((keyframe) => keyframe.mixBlendMode)) {\n                    animations.push(new NativeAnimationControls(animation));\n                }\n                else {\n                    animation.cancel();\n                }\n            }\n            resolve(new BaseGroupPlaybackControls(animations));\n        });\n    });\n}\nfunction hasOpacity(target, key) {\n    var _a;\n    return (_a = target === null || target === void 0 ? void 0 : target[key]) === null || _a === void 0 ? void 0 : _a.keyframes.opacity;\n}\n\nexport { startViewAnimation };\n"]},"metadata":{},"sourceType":"module"}