{"ast":null,"code":"import _objectWithoutProperties from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"attrX\", \"attrY\", \"attrScale\", \"originX\", \"originY\", \"pathLength\", \"pathSpacing\", \"pathOffset\"];\nimport { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\n\nfunction buildSVGAttrs(state, _ref, isSVGTag, transformTemplate) {\n  var attrX = _ref.attrX,\n      attrY = _ref.attrY,\n      attrScale = _ref.attrScale,\n      originX = _ref.originX,\n      originY = _ref.originY,\n      pathLength = _ref.pathLength,\n      _ref$pathSpacing = _ref.pathSpacing,\n      pathSpacing = _ref$pathSpacing === void 0 ? 1 : _ref$pathSpacing,\n      _ref$pathOffset = _ref.pathOffset,\n      pathOffset = _ref$pathOffset === void 0 ? 0 : _ref$pathOffset,\n      latest = _objectWithoutProperties(_ref, _excluded);\n\n  buildHTMLStyles(state, latest, transformTemplate);\n  /**\n   * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n   * as normal HTML tags.\n   */\n\n  if (isSVGTag) {\n    if (state.style.viewBox) {\n      state.attrs.viewBox = state.style.viewBox;\n    }\n\n    return;\n  }\n\n  state.attrs = state.style;\n  state.style = {};\n  var attrs = state.attrs,\n      style = state.style,\n      dimensions = state.dimensions;\n  /**\n   * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n   * and copy it into style.\n   */\n\n  if (attrs.transform) {\n    if (dimensions) style.transform = attrs.transform;\n    delete attrs.transform;\n  } // Parse transformOrigin\n\n\n  if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n  } // Render attrX/attrY/attrScale as attributes\n\n\n  if (attrX !== undefined) attrs.x = attrX;\n  if (attrY !== undefined) attrs.y = attrY;\n  if (attrScale !== undefined) attrs.scale = attrScale; // Build SVG path if one has been defined\n\n  if (pathLength !== undefined) {\n    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n  }\n}\n\nexport { buildSVGAttrs };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs"],"names":["buildHTMLStyles","calcSVGTransformOrigin","buildSVGPath","buildSVGAttrs","state","isSVGTag","transformTemplate","attrX","attrY","attrScale","originX","originY","pathLength","pathSpacing","pathOffset","latest","style","viewBox","attrs","dimensions","transform","undefined","transformOrigin","x","y","scale"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,mCAAhC;AACA,SAASC,sBAAT,QAAuC,wBAAvC;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,KAAvB,QAEaC,QAFb,EAEuBC,iBAFvB,EAE0C;AAAA,MAFVC,KAEU,QAFVA,KAEU;AAAA,MAFHC,KAEG,QAFHA,KAEG;AAAA,MAFIC,SAEJ,QAFIA,SAEJ;AAAA,MAFeC,OAEf,QAFeA,OAEf;AAAA,MAFwBC,OAExB,QAFwBA,OAExB;AAAA,MAFiCC,UAEjC,QAFiCA,UAEjC;AAAA,8BAF6CC,WAE7C;AAAA,MAF6CA,WAE7C,iCAF2D,CAE3D;AAAA,6BAF8DC,UAE9D;AAAA,MAF8DA,UAE9D,gCAF2E,CAE3E;AAAA,MAAvCC,MAAuC;;AACtCf,EAAAA,eAAe,CAACI,KAAD,EAAQW,MAAR,EAAgBT,iBAAhB,CAAf;AACA;AACJ;AACA;AACA;;AACI,MAAID,QAAJ,EAAc;AACV,QAAID,KAAK,CAACY,KAAN,CAAYC,OAAhB,EAAyB;AACrBb,MAAAA,KAAK,CAACc,KAAN,CAAYD,OAAZ,GAAsBb,KAAK,CAACY,KAAN,CAAYC,OAAlC;AACH;;AACD;AACH;;AACDb,EAAAA,KAAK,CAACc,KAAN,GAAcd,KAAK,CAACY,KAApB;AACAZ,EAAAA,KAAK,CAACY,KAAN,GAAc,EAAd;AACA,MAAQE,KAAR,GAAqCd,KAArC,CAAQc,KAAR;AAAA,MAAeF,KAAf,GAAqCZ,KAArC,CAAeY,KAAf;AAAA,MAAsBG,UAAtB,GAAqCf,KAArC,CAAsBe,UAAtB;AACA;AACJ;AACA;AACA;;AACI,MAAID,KAAK,CAACE,SAAV,EAAqB;AACjB,QAAID,UAAJ,EACIH,KAAK,CAACI,SAAN,GAAkBF,KAAK,CAACE,SAAxB;AACJ,WAAOF,KAAK,CAACE,SAAb;AACH,GAvBqC,CAwBtC;;;AACA,MAAID,UAAU,KACTT,OAAO,KAAKW,SAAZ,IAAyBV,OAAO,KAAKU,SAArC,IAAkDL,KAAK,CAACI,SAD/C,CAAd,EACyE;AACrEJ,IAAAA,KAAK,CAACM,eAAN,GAAwBrB,sBAAsB,CAACkB,UAAD,EAAaT,OAAO,KAAKW,SAAZ,GAAwBX,OAAxB,GAAkC,GAA/C,EAAoDC,OAAO,KAAKU,SAAZ,GAAwBV,OAAxB,GAAkC,GAAtF,CAA9C;AACH,GA5BqC,CA6BtC;;;AACA,MAAIJ,KAAK,KAAKc,SAAd,EACIH,KAAK,CAACK,CAAN,GAAUhB,KAAV;AACJ,MAAIC,KAAK,KAAKa,SAAd,EACIH,KAAK,CAACM,CAAN,GAAUhB,KAAV;AACJ,MAAIC,SAAS,KAAKY,SAAlB,EACIH,KAAK,CAACO,KAAN,GAAchB,SAAd,CAnCkC,CAoCtC;;AACA,MAAIG,UAAU,KAAKS,SAAnB,EAA8B;AAC1BnB,IAAAA,YAAY,CAACgB,KAAD,EAAQN,UAAR,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6C,KAA7C,CAAZ;AACH;AACJ;;AAED,SAASX,aAAT","sourcesContent":["import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n"]},"metadata":{},"sourceType":"module"}