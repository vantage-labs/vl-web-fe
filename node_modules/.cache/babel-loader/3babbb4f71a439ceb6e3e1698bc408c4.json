{"ast":null,"code":"\"use client\"; // packages/react/tabs/src/Tabs.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { jsx } from \"react/jsx-runtime\";\nvar TABS_NAME = \"Tabs\";\nvar [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [createRovingFocusGroupScope]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);\nvar Tabs = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTabs,\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    orientation = \"horizontal\",\n    dir,\n    activationMode = \"automatic\",\n    ...tabsProps\n  } = props;\n  const direction = useDirection(dir);\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    onChange: onValueChange,\n    defaultProp: defaultValue\n  });\n  return /* @__PURE__ */jsx(TabsProvider, {\n    scope: __scopeTabs,\n    baseId: useId(),\n    value,\n    onValueChange: setValue,\n    orientation,\n    dir: direction,\n    activationMode,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      dir: direction,\n      \"data-orientation\": orientation,\n      ...tabsProps,\n      ref: forwardedRef\n    })\n  });\n});\nTabs.displayName = TABS_NAME;\nvar TAB_LIST_NAME = \"TabsList\";\nvar TabsList = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTabs,\n    loop = true,\n    ...listProps\n  } = props;\n  const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n  return /* @__PURE__ */jsx(RovingFocusGroup.Root, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    orientation: context.orientation,\n    dir: context.dir,\n    loop,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      role: \"tablist\",\n      \"aria-orientation\": context.orientation,\n      ...listProps,\n      ref: forwardedRef\n    })\n  });\n});\nTabsList.displayName = TAB_LIST_NAME;\nvar TRIGGER_NAME = \"TabsTrigger\";\nvar TabsTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTabs,\n    value,\n    disabled = false,\n    ...triggerProps\n  } = props;\n  const context = useTabsContext(TRIGGER_NAME, __scopeTabs);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const isSelected = value === context.value;\n  return /* @__PURE__ */jsx(RovingFocusGroup.Item, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    focusable: !disabled,\n    active: isSelected,\n    children: /* @__PURE__ */jsx(Primitive.button, {\n      type: \"button\",\n      role: \"tab\",\n      \"aria-selected\": isSelected,\n      \"aria-controls\": contentId,\n      \"data-state\": isSelected ? \"active\" : \"inactive\",\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      id: triggerId,\n      ...triggerProps,\n      ref: forwardedRef,\n      onMouseDown: composeEventHandlers(props.onMouseDown, event => {\n        if (!disabled && event.button === 0 && event.ctrlKey === false) {\n          context.onValueChange(value);\n        } else {\n          event.preventDefault();\n        }\n      }),\n      onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n        if ([\" \", \"Enter\"].includes(event.key)) context.onValueChange(value);\n      }),\n      onFocus: composeEventHandlers(props.onFocus, () => {\n        const isAutomaticActivation = context.activationMode !== \"manual\";\n\n        if (!isSelected && !disabled && isAutomaticActivation) {\n          context.onValueChange(value);\n        }\n      })\n    })\n  });\n});\nTabsTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"TabsContent\";\nvar TabsContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTabs,\n    value,\n    forceMount,\n    children,\n    ...contentProps\n  } = props;\n  const context = useTabsContext(CONTENT_NAME, __scopeTabs);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const isSelected = value === context.value;\n  const isMountAnimationPreventedRef = React.useRef(isSelected);\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || isSelected,\n    children: _ref => {\n      let {\n        present\n      } = _ref;\n      return /* @__PURE__ */jsx(Primitive.div, {\n        \"data-state\": isSelected ? \"active\" : \"inactive\",\n        \"data-orientation\": context.orientation,\n        role: \"tabpanel\",\n        \"aria-labelledby\": triggerId,\n        hidden: !present,\n        id: contentId,\n        tabIndex: 0,\n        ...contentProps,\n        ref: forwardedRef,\n        style: { ...props.style,\n          animationDuration: isMountAnimationPreventedRef.current ? \"0s\" : void 0\n        },\n        children: present && children\n      });\n    }\n  });\n});\nTabsContent.displayName = CONTENT_NAME;\n\nfunction makeTriggerId(baseId, value) {\n  return `${baseId}-trigger-${value}`;\n}\n\nfunction makeContentId(baseId, value) {\n  return `${baseId}-content-${value}`;\n}\n\nvar Root2 = Tabs;\nvar List = TabsList;\nvar Trigger = TabsTrigger;\nvar Content = TabsContent;\nexport { Content, List, Root2 as Root, Tabs, TabsContent, TabsList, TabsTrigger, Trigger, createTabsScope };","map":{"version":3,"mappings":"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","names":["React","composeEventHandlers","createContextScope","createRovingFocusGroupScope","Presence","Primitive","RovingFocusGroup","useDirection","useControllableState","useId","TABS_NAME","createTabsContext","createTabsScope","useRovingFocusGroupScope","TabsProvider","useTabsContext","Tabs","props","forwardedRef","__scopeTabs","value","valueProp","onValueChange","defaultValue","orientation","dir","activationMode","tabsProps","direction","setValue","prop","onChange","defaultProp","scope","baseId","children","div","ref","displayName","TAB_LIST_NAME","TabsList","loop","listProps","context","rovingFocusGroupScope","asChild","role","TRIGGER_NAME","TabsTrigger","disabled","triggerProps","triggerId","makeTriggerId","contentId","makeContentId","isSelected","focusable","active","button","type","id","onMouseDown","event","ctrlKey","preventDefault","onKeyDown","includes","key","onFocus","isAutomaticActivation","CONTENT_NAME","TabsContent","forceMount","contentProps","isMountAnimationPreventedRef","rAF","requestAnimationFrame","current","cancelAnimationFrame","present","hidden","tabIndex","style","animationDuration","Root","List","Trigger","Content"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-tabs/src/Tabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Tabs\n * -----------------------------------------------------------------------------------------------*/\n\nconst TABS_NAME = 'Tabs';\n\ntype ScopedProps<P> = P & { __scopeTabs?: Scope };\nconst [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [\n  createRovingFocusGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype TabsContextValue = {\n  baseId: string;\n  value?: string;\n  onValueChange: (value: string) => void;\n  orientation?: TabsProps['orientation'];\n  dir?: TabsProps['dir'];\n  activationMode?: TabsProps['activationMode'];\n};\n\nconst [TabsProvider, useTabsContext] = createTabsContext<TabsContextValue>(TABS_NAME);\n\ntype TabsElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface TabsProps extends PrimitiveDivProps {\n  /** The value for the selected tab, if controlled */\n  value?: string;\n  /** The value of the tab to select by default, if uncontrolled */\n  defaultValue?: string;\n  /** A function called when a new tab is selected */\n  onValueChange?: (value: string) => void;\n  /**\n   * The orientation the tabs are layed out.\n   * Mainly so arrow navigation is done accordingly (left & right vs. up & down)\n   * @defaultValue horizontal\n   */\n  orientation?: RovingFocusGroupProps['orientation'];\n  /**\n   * The direction of navigation between toolbar items.\n   */\n  dir?: RovingFocusGroupProps['dir'];\n  /**\n   * Whether a tab is activated automatically or manually.\n   * @defaultValue automatic\n   * */\n  activationMode?: 'automatic' | 'manual';\n}\n\nconst Tabs = React.forwardRef<TabsElement, TabsProps>(\n  (props: ScopedProps<TabsProps>, forwardedRef) => {\n    const {\n      __scopeTabs,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      orientation = 'horizontal',\n      dir,\n      activationMode = 'automatic',\n      ...tabsProps\n    } = props;\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    return (\n      <TabsProvider\n        scope={__scopeTabs}\n        baseId={useId()}\n        value={value}\n        onValueChange={setValue}\n        orientation={orientation}\n        dir={direction}\n        activationMode={activationMode}\n      >\n        <Primitive.div\n          dir={direction}\n          data-orientation={orientation}\n          {...tabsProps}\n          ref={forwardedRef}\n        />\n      </TabsProvider>\n    );\n  }\n);\n\nTabs.displayName = TABS_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsList\n * -----------------------------------------------------------------------------------------------*/\n\nconst TAB_LIST_NAME = 'TabsList';\n\ntype TabsListElement = React.ElementRef<typeof Primitive.div>;\ninterface TabsListProps extends PrimitiveDivProps {\n  loop?: RovingFocusGroupProps['loop'];\n}\n\nconst TabsList = React.forwardRef<TabsListElement, TabsListProps>(\n  (props: ScopedProps<TabsListProps>, forwardedRef) => {\n    const { __scopeTabs, loop = true, ...listProps } = props;\n    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n    return (\n      <RovingFocusGroup.Root\n        asChild\n        {...rovingFocusGroupScope}\n        orientation={context.orientation}\n        dir={context.dir}\n        loop={loop}\n      >\n        <Primitive.div\n          role=\"tablist\"\n          aria-orientation={context.orientation}\n          {...listProps}\n          ref={forwardedRef}\n        />\n      </RovingFocusGroup.Root>\n    );\n  }\n);\n\nTabsList.displayName = TAB_LIST_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'TabsTrigger';\n\ntype TabsTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface TabsTriggerProps extends PrimitiveButtonProps {\n  value: string;\n}\n\nconst TabsTrigger = React.forwardRef<TabsTriggerElement, TabsTriggerProps>(\n  (props: ScopedProps<TabsTriggerProps>, forwardedRef) => {\n    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;\n    const context = useTabsContext(TRIGGER_NAME, __scopeTabs);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n    const triggerId = makeTriggerId(context.baseId, value);\n    const contentId = makeContentId(context.baseId, value);\n    const isSelected = value === context.value;\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!disabled}\n        active={isSelected}\n      >\n        <Primitive.button\n          type=\"button\"\n          role=\"tab\"\n          aria-selected={isSelected}\n          aria-controls={contentId}\n          data-state={isSelected ? 'active' : 'inactive'}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          id={triggerId}\n          {...triggerProps}\n          ref={forwardedRef}\n          onMouseDown={composeEventHandlers(props.onMouseDown, (event) => {\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (!disabled && event.button === 0 && event.ctrlKey === false) {\n              context.onValueChange(value);\n            } else {\n              // prevent focus to avoid accidental activation\n              event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if ([' ', 'Enter'].includes(event.key)) context.onValueChange(value);\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => {\n            // handle \"automatic\" activation if necessary\n            // ie. activate tab following focus\n            const isAutomaticActivation = context.activationMode !== 'manual';\n            if (!isSelected && !disabled && isAutomaticActivation) {\n              context.onValueChange(value);\n            }\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nTabsTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'TabsContent';\n\ntype TabsContentElement = React.ElementRef<typeof Primitive.div>;\ninterface TabsContentProps extends PrimitiveDivProps {\n  value: string;\n\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TabsContent = React.forwardRef<TabsContentElement, TabsContentProps>(\n  (props: ScopedProps<TabsContentProps>, forwardedRef) => {\n    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;\n    const context = useTabsContext(CONTENT_NAME, __scopeTabs);\n    const triggerId = makeTriggerId(context.baseId, value);\n    const contentId = makeContentId(context.baseId, value);\n    const isSelected = value === context.value;\n    const isMountAnimationPreventedRef = React.useRef(isSelected);\n\n    React.useEffect(() => {\n      const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n      return () => cancelAnimationFrame(rAF);\n    }, []);\n\n    return (\n      <Presence present={forceMount || isSelected}>\n        {({ present }) => (\n          <Primitive.div\n            data-state={isSelected ? 'active' : 'inactive'}\n            data-orientation={context.orientation}\n            role=\"tabpanel\"\n            aria-labelledby={triggerId}\n            hidden={!present}\n            id={contentId}\n            tabIndex={0}\n            {...contentProps}\n            ref={forwardedRef}\n            style={{\n              ...props.style,\n              animationDuration: isMountAnimationPreventedRef.current ? '0s' : undefined,\n            }}\n          >\n            {present && children}\n          </Primitive.div>\n        )}\n      </Presence>\n    );\n  }\n);\n\nTabsContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction makeTriggerId(baseId: string, value: string) {\n  return `${baseId}-trigger-${value}`;\n}\n\nfunction makeContentId(baseId: string, value: string) {\n  return `${baseId}-content-${value}`;\n}\n\nconst Root = Tabs;\nconst List = TabsList;\nconst Trigger = TabsTrigger;\nconst Content = TabsContent;\n\nexport {\n  createTabsScope,\n  //\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  //\n  Root,\n  List,\n  Trigger,\n  Content,\n};\nexport type { TabsProps, TabsListProps, TabsTriggerProps, TabsContentProps };\n"]},"metadata":{},"sourceType":"module"}