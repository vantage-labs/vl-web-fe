{"ast":null,"code":"import _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { invariant } from 'motion-utils';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\n\nvar splitCSSVariableRegex = // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(\\x2D\\x2D(?:([\\x2D0-9A-Z_a-z]+)|([\\x2D0-9A-Z_a-z]+), ?([ #%\\(\\),-\\.0-9A-Za-z]+))\\)/;\n\nfunction parseCSSVariable(current) {\n  var match = splitCSSVariableRegex.exec(current);\n  if (!match) return [,];\n\n  var _match = _slicedToArray(match, 4),\n      token1 = _match[1],\n      token2 = _match[2],\n      fallback = _match[3];\n\n  return [\"--\".concat(token1 !== null && token1 !== void 0 ? token1 : token2), fallback];\n}\n\nvar maxDepth = 4;\n\nfunction getVariableValue(current, element) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\".concat(current, \"\\\". This may indicate a circular fallback dependency.\"));\n\n  var _parseCSSVariable = parseCSSVariable(current),\n      _parseCSSVariable2 = _slicedToArray(_parseCSSVariable, 2),\n      token = _parseCSSVariable2[0],\n      fallback = _parseCSSVariable2[1]; // No CSS variable detected\n\n\n  if (!token) return; // Attempt to read this CSS variable off the element\n\n  var resolved = window.getComputedStyle(element).getPropertyValue(token);\n\n  if (resolved) {\n    var trimmed = resolved.trim();\n    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n  }\n\n  return isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs"],"names":["invariant","isNumericalString","isCSSVariableToken","splitCSSVariableRegex","parseCSSVariable","current","match","exec","token1","token2","fallback","maxDepth","getVariableValue","element","depth","token","resolved","window","getComputedStyle","getPropertyValue","trimmed","trim","parseFloat"],"mappings":";AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,qBAAqB,GAC3B;AACA,yFAFA;;AAGA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,MAAMC,KAAK,GAAGH,qBAAqB,CAACI,IAAtB,CAA2BF,OAA3B,CAAd;AACA,MAAI,CAACC,KAAL,EACI,OAAO,GAAP;;AACJ,8BAAqCA,KAArC;AAAA,MAASE,MAAT;AAAA,MAAiBC,MAAjB;AAAA,MAAyBC,QAAzB;;AACA,SAAO,aAAMF,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgDC,MAAtD,GAAgEC,QAAhE,CAAP;AACH;;AACD,IAAMC,QAAQ,GAAG,CAAjB;;AACA,SAASC,gBAAT,CAA0BP,OAA1B,EAAmCQ,OAAnC,EAAuD;AAAA,MAAXC,KAAW,uEAAH,CAAG;AACnDd,EAAAA,SAAS,CAACc,KAAK,IAAIH,QAAV,mEAA6EN,OAA7E,2DAAT;;AACA,0BAA0BD,gBAAgB,CAACC,OAAD,CAA1C;AAAA;AAAA,MAAOU,KAAP;AAAA,MAAcL,QAAd,yBAFmD,CAGnD;;;AACA,MAAI,CAACK,KAAL,EACI,OAL+C,CAMnD;;AACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,gBAAP,CAAwBL,OAAxB,EAAiCM,gBAAjC,CAAkDJ,KAAlD,CAAjB;;AACA,MAAIC,QAAJ,EAAc;AACV,QAAMI,OAAO,GAAGJ,QAAQ,CAACK,IAAT,EAAhB;AACA,WAAOpB,iBAAiB,CAACmB,OAAD,CAAjB,GAA6BE,UAAU,CAACF,OAAD,CAAvC,GAAmDA,OAA1D;AACH;;AACD,SAAOlB,kBAAkB,CAACQ,QAAD,CAAlB,GACDE,gBAAgB,CAACF,QAAD,EAAWG,OAAX,EAAoBC,KAAK,GAAG,CAA5B,CADf,GAEDJ,QAFN;AAGH;;AAED,SAASE,gBAAT,EAA2BR,gBAA3B","sourcesContent":["import { invariant } from 'motion-utils';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = \n// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token1, token2, fallback] = match;\n    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    return isCSSVariableToken(fallback)\n        ? getVariableValue(fallback, element, depth + 1)\n        : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };\n"]},"metadata":{},"sourceType":"module"}