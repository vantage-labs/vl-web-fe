{"ast":null,"code":"import { transformPropOrder } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\nvar translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\nvar numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\n\nfunction buildTransform(latestValues, transform, transformTemplate) {\n  // The transform string we're going to build into.\n  var transformString = \"\";\n  var transformIsDefault = true;\n  /**\n   * Loop over all possible transforms in order, adding the ones that\n   * are present to the transform string.\n   */\n\n  for (var i = 0; i < numTransforms; i++) {\n    var key = transformPropOrder[i];\n    var value = latestValues[key];\n    if (value === undefined) continue;\n    var valueIsDefault = true;\n\n    if (typeof value === \"number\") {\n      valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n    } else {\n      valueIsDefault = parseFloat(value) === 0;\n    }\n\n    if (!valueIsDefault || transformTemplate) {\n      var valueAsType = getValueAsType(value, numberValueTypes[key]);\n\n      if (!valueIsDefault) {\n        transformIsDefault = false;\n        var transformName = translateAlias[key] || key;\n        transformString += \"\".concat(transformName, \"(\").concat(valueAsType, \") \");\n      }\n\n      if (transformTemplate) {\n        transform[key] = valueAsType;\n      }\n    }\n  }\n\n  transformString = transformString.trim(); // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (transformIsDefault) {\n    transformString = \"none\";\n  }\n\n  return transformString;\n}\n\nexport { buildTransform };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"names":["transformPropOrder","getValueAsType","numberValueTypes","translateAlias","x","y","z","transformPerspective","numTransforms","length","buildTransform","latestValues","transform","transformTemplate","transformString","transformIsDefault","i","key","value","undefined","valueIsDefault","startsWith","parseFloat","valueAsType","transformName","trim"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AAEA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,CAAC,EAAE,YADgB;AAEnBC,EAAAA,CAAC,EAAE,YAFgB;AAGnBC,EAAAA,CAAC,EAAE,YAHgB;AAInBC,EAAAA,oBAAoB,EAAE;AAJH,CAAvB;AAMA,IAAMC,aAAa,GAAGR,kBAAkB,CAACS,MAAzC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,SAAtC,EAAiDC,iBAAjD,EAAoE;AAChE;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,kBAAkB,GAAG,IAAzB;AACA;AACJ;AACA;AACA;;AACI,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,aAApB,EAAmCQ,CAAC,EAApC,EAAwC;AACpC,QAAMC,GAAG,GAAGjB,kBAAkB,CAACgB,CAAD,CAA9B;AACA,QAAME,KAAK,GAAGP,YAAY,CAACM,GAAD,CAA1B;AACA,QAAIC,KAAK,KAAKC,SAAd,EACI;AACJ,QAAIC,cAAc,GAAG,IAArB;;AACA,QAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC3BE,MAAAA,cAAc,GAAGF,KAAK,MAAMD,GAAG,CAACI,UAAJ,CAAe,OAAf,IAA0B,CAA1B,GAA8B,CAApC,CAAtB;AACH,KAFD,MAGK;AACDD,MAAAA,cAAc,GAAGE,UAAU,CAACJ,KAAD,CAAV,KAAsB,CAAvC;AACH;;AACD,QAAI,CAACE,cAAD,IAAmBP,iBAAvB,EAA0C;AACtC,UAAMU,WAAW,GAAGtB,cAAc,CAACiB,KAAD,EAAQhB,gBAAgB,CAACe,GAAD,CAAxB,CAAlC;;AACA,UAAI,CAACG,cAAL,EAAqB;AACjBL,QAAAA,kBAAkB,GAAG,KAArB;AACA,YAAMS,aAAa,GAAGrB,cAAc,CAACc,GAAD,CAAd,IAAuBA,GAA7C;AACAH,QAAAA,eAAe,cAAOU,aAAP,cAAwBD,WAAxB,OAAf;AACH;;AACD,UAAIV,iBAAJ,EAAuB;AACnBD,QAAAA,SAAS,CAACK,GAAD,CAAT,GAAiBM,WAAjB;AACH;AACJ;AACJ;;AACDT,EAAAA,eAAe,GAAGA,eAAe,CAACW,IAAhB,EAAlB,CAhCgE,CAiChE;AACA;;AACA,MAAIZ,iBAAJ,EAAuB;AACnBC,IAAAA,eAAe,GAAGD,iBAAiB,CAACD,SAAD,EAAYG,kBAAkB,GAAG,EAAH,GAAQD,eAAtC,CAAnC;AACH,GAFD,MAGK,IAAIC,kBAAJ,EAAwB;AACzBD,IAAAA,eAAe,GAAG,MAAlB;AACH;;AACD,SAAOA,eAAP;AACH;;AAED,SAASJ,cAAT","sourcesContent":["import { transformPropOrder } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"]},"metadata":{},"sourceType":"module"}