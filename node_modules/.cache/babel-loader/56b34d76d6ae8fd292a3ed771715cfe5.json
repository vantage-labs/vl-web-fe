{"ast":null,"code":"import _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { isDragActive } from './drag/state/is-active.mjs';\nimport { setupGesture } from './utils/setup.mjs';\n/**\n * Filter out events that are not pointer events, or are triggering\n * while a Motion gesture is active.\n */\n\nfunction filterEvents(callback) {\n  return function (event) {\n    if (event.pointerType === \"touch\" || isDragActive()) return;\n    callback(event);\n  };\n}\n/**\n * Create a hover gesture. hover() is different to .addEventListener(\"pointerenter\")\n * in that it has an easier syntax, filters out polyfilled touch events, interoperates\n * with drag gestures, and automatically removes the \"pointerennd\" event listener when the hover ends.\n *\n * @public\n */\n\n\nfunction hover(elementOrSelector, onHoverStart) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _setupGesture = setupGesture(elementOrSelector, options),\n      _setupGesture2 = _slicedToArray(_setupGesture, 3),\n      elements = _setupGesture2[0],\n      eventOptions = _setupGesture2[1],\n      cancel = _setupGesture2[2];\n\n  var onPointerEnter = filterEvents(function (enterEvent) {\n    var target = enterEvent.target;\n    var onHoverEnd = onHoverStart(enterEvent);\n    if (!onHoverEnd || !target) return;\n    var onPointerLeave = filterEvents(function (leaveEvent) {\n      onHoverEnd(leaveEvent);\n      target.removeEventListener(\"pointerleave\", onPointerLeave);\n    });\n    target.addEventListener(\"pointerleave\", onPointerLeave, eventOptions);\n  });\n  elements.forEach(function (element) {\n    element.addEventListener(\"pointerenter\", onPointerEnter, eventOptions);\n  });\n  return cancel;\n}\n\nexport { hover };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/motion-dom/dist/es/gestures/hover.mjs"],"names":["isDragActive","setupGesture","filterEvents","callback","event","pointerType","hover","elementOrSelector","onHoverStart","options","elements","eventOptions","cancel","onPointerEnter","enterEvent","target","onHoverEnd","onPointerLeave","leaveEvent","removeEventListener","addEventListener","forEach","element"],"mappings":";AAAA,SAASA,YAAT,QAA6B,4BAA7B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AAEA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC5B,SAAO,UAACC,KAAD,EAAW;AACd,QAAIA,KAAK,CAACC,WAAN,KAAsB,OAAtB,IAAiCL,YAAY,EAAjD,EACI;AACJG,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACH,GAJD;AAKH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,KAAT,CAAeC,iBAAf,EAAkCC,YAAlC,EAA8D;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC1D,sBAAyCR,YAAY,CAACM,iBAAD,EAAoBE,OAApB,CAArD;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,YAAjB;AAAA,MAA+BC,MAA/B;;AACA,MAAMC,cAAc,GAAGX,YAAY,CAAC,UAACY,UAAD,EAAgB;AAChD,QAAQC,MAAR,GAAmBD,UAAnB,CAAQC,MAAR;AACA,QAAMC,UAAU,GAAGR,YAAY,CAACM,UAAD,CAA/B;AACA,QAAI,CAACE,UAAD,IAAe,CAACD,MAApB,EACI;AACJ,QAAME,cAAc,GAAGf,YAAY,CAAC,UAACgB,UAAD,EAAgB;AAChDF,MAAAA,UAAU,CAACE,UAAD,CAAV;AACAH,MAAAA,MAAM,CAACI,mBAAP,CAA2B,cAA3B,EAA2CF,cAA3C;AACH,KAHkC,CAAnC;AAIAF,IAAAA,MAAM,CAACK,gBAAP,CAAwB,cAAxB,EAAwCH,cAAxC,EAAwDN,YAAxD;AACH,GAVkC,CAAnC;AAWAD,EAAAA,QAAQ,CAACW,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CAACF,gBAAR,CAAyB,cAAzB,EAAyCP,cAAzC,EAAyDF,YAAzD;AACH,GAFD;AAGA,SAAOC,MAAP;AACH;;AAED,SAASN,KAAT","sourcesContent":["import { isDragActive } from './drag/state/is-active.mjs';\nimport { setupGesture } from './utils/setup.mjs';\n\n/**\n * Filter out events that are not pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction filterEvents(callback) {\n    return (event) => {\n        if (event.pointerType === \"touch\" || isDragActive())\n            return;\n        callback(event);\n    };\n}\n/**\n * Create a hover gesture. hover() is different to .addEventListener(\"pointerenter\")\n * in that it has an easier syntax, filters out polyfilled touch events, interoperates\n * with drag gestures, and automatically removes the \"pointerennd\" event listener when the hover ends.\n *\n * @public\n */\nfunction hover(elementOrSelector, onHoverStart, options = {}) {\n    const [elements, eventOptions, cancel] = setupGesture(elementOrSelector, options);\n    const onPointerEnter = filterEvents((enterEvent) => {\n        const { target } = enterEvent;\n        const onHoverEnd = onHoverStart(enterEvent);\n        if (!onHoverEnd || !target)\n            return;\n        const onPointerLeave = filterEvents((leaveEvent) => {\n            onHoverEnd(leaveEvent);\n            target.removeEventListener(\"pointerleave\", onPointerLeave);\n        });\n        target.addEventListener(\"pointerleave\", onPointerLeave, eventOptions);\n    });\n    elements.forEach((element) => {\n        element.addEventListener(\"pointerenter\", onPointerEnter, eventOptions);\n    });\n    return cancel;\n}\n\nexport { hover };\n"]},"metadata":{},"sourceType":"module"}