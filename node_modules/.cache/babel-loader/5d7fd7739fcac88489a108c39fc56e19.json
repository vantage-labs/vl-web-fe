{"ast":null,"code":"import _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction useForceUpdate() {\n  var isMounted = useIsMounted();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      forcedRenderCount = _useState2[0],\n      setForcedRenderCount = _useState2[1];\n\n  var forceRender = useCallback(function () {\n    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n  }, [forcedRenderCount]);\n  /**\n   * Defer this to the end of the next animation frame in case there are multiple\n   * synchronous calls.\n   */\n\n  var deferredForceRender = useCallback(function () {\n    return frame.postRender(forceRender);\n  }, [forceRender]);\n  return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/utils/use-force-update.mjs"],"names":["useState","useCallback","useIsMounted","frame","useForceUpdate","isMounted","forcedRenderCount","setForcedRenderCount","forceRender","current","deferredForceRender","postRender"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,KAAT,QAAsB,wBAAtB;;AAEA,SAASC,cAAT,GAA0B;AACtB,MAAMC,SAAS,GAAGH,YAAY,EAA9B;;AACA,kBAAkDF,QAAQ,CAAC,CAAD,CAA1D;AAAA;AAAA,MAAOM,iBAAP;AAAA,MAA0BC,oBAA1B;;AACA,MAAMC,WAAW,GAAGP,WAAW,CAAC,YAAM;AAClCI,IAAAA,SAAS,CAACI,OAAV,IAAqBF,oBAAoB,CAACD,iBAAiB,GAAG,CAArB,CAAzC;AACH,GAF8B,EAE5B,CAACA,iBAAD,CAF4B,CAA/B;AAGA;AACJ;AACA;AACA;;AACI,MAAMI,mBAAmB,GAAGT,WAAW,CAAC;AAAA,WAAME,KAAK,CAACQ,UAAN,CAAiBH,WAAjB,CAAN;AAAA,GAAD,EAAsC,CAACA,WAAD,CAAtC,CAAvC;AACA,SAAO,CAACE,mBAAD,EAAsBJ,iBAAtB,CAAP;AACH;;AAED,SAASF,cAAT","sourcesContent":["import { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\n    const forceRender = useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = useCallback(() => frame.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n"]},"metadata":{},"sourceType":"module"}