{"ast":null,"code":"import _objectSpread from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender() {\n  var forwardMotionProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var useRender = function useRender(Component, props, ref, _ref, isStatic) {\n    var latestValues = _ref.latestValues;\n    var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n    var visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    var filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    var elementProps = Component !== Fragment ? _objectSpread(_objectSpread(_objectSpread({}, filteredProps), visualProps), {}, {\n      ref: ref\n    }) : {};\n    /**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */\n\n    var children = props.children;\n    var renderedChildren = useMemo(function () {\n      return isMotionValue(children) ? children.get() : children;\n    }, [children]);\n    return createElement(Component, _objectSpread(_objectSpread({}, elementProps), {}, {\n      children: renderedChildren\n    }));\n  };\n\n  return useRender;\n}\n\nexport { createUseRender };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/dom/use-render.mjs"],"names":["Fragment","useMemo","createElement","useHTMLProps","filterProps","isSVGComponent","useSVGProps","isMotionValue","createUseRender","forwardMotionProps","useRender","Component","props","ref","isStatic","latestValues","useVisualProps","visualProps","filteredProps","elementProps","children","renderedChildren","get"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,aAA5B,QAAiD,OAAjD;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,aAAT,QAA8B,uCAA9B;;AAEA,SAASC,eAAT,GAAqD;AAAA,MAA5BC,kBAA4B,uEAAP,KAAO;;AACjD,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,GAAnB,QAA0CC,QAA1C,EAAuD;AAAA,QAA7BC,YAA6B,QAA7BA,YAA6B;AACrE,QAAMC,cAAc,GAAGX,cAAc,CAACM,SAAD,CAAd,GACjBL,WADiB,GAEjBH,YAFN;AAGA,QAAMc,WAAW,GAAGD,cAAc,CAACJ,KAAD,EAAQG,YAAR,EAAsBD,QAAtB,EAAgCH,SAAhC,CAAlC;AACA,QAAMO,aAAa,GAAGd,WAAW,CAACQ,KAAD,EAAQ,OAAOD,SAAP,KAAqB,QAA7B,EAAuCF,kBAAvC,CAAjC;AACA,QAAMU,YAAY,GAAGR,SAAS,KAAKX,QAAd,iDACVkB,aADU,GACQD,WADR;AACqBJ,MAAAA,GAAG,EAAHA;AADrB,SAEf,EAFN;AAGA;AACR;AACA;AACA;AACA;;AACQ,QAAQO,QAAR,GAAqBR,KAArB,CAAQQ,QAAR;AACA,QAAMC,gBAAgB,GAAGpB,OAAO,CAAC;AAAA,aAAOM,aAAa,CAACa,QAAD,CAAb,GAA0BA,QAAQ,CAACE,GAAT,EAA1B,GAA2CF,QAAlD;AAAA,KAAD,EAA8D,CAACA,QAAD,CAA9D,CAAhC;AACA,WAAOlB,aAAa,CAACS,SAAD,kCACbQ,YADa;AAEhBC,MAAAA,QAAQ,EAAEC;AAFM,OAApB;AAIH,GApBD;;AAqBA,SAAOX,SAAP;AACH;;AAED,SAASF,eAAT","sourcesContent":["import { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n"]},"metadata":{},"sourceType":"module"}