{"ast":null,"code":"\"use client\"; // packages/react/dropdown-menu/src/DropdownMenu.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { composeRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as MenuPrimitive from \"@radix-ui/react-menu\";\nimport { createMenuScope } from \"@radix-ui/react-menu\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { jsx } from \"react/jsx-runtime\";\nvar DROPDOWN_MENU_NAME = \"DropdownMenu\";\nvar [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(DROPDOWN_MENU_NAME, [createMenuScope]);\nvar useMenuScope = createMenuScope();\nvar [DropdownMenuProvider, useDropdownMenuContext] = createDropdownMenuContext(DROPDOWN_MENU_NAME);\n\nvar DropdownMenu = props => {\n  const {\n    __scopeDropdownMenu,\n    children,\n    dir,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const triggerRef = React.useRef(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */jsx(DropdownMenuProvider, {\n    scope: __scopeDropdownMenu,\n    triggerId: useId(),\n    triggerRef,\n    contentId: useId(),\n    open,\n    onOpenChange: setOpen,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    modal,\n    children: /* @__PURE__ */jsx(MenuPrimitive.Root, { ...menuScope,\n      open,\n      onOpenChange: setOpen,\n      dir,\n      modal,\n      children\n    })\n  });\n};\n\nDropdownMenu.displayName = DROPDOWN_MENU_NAME;\nvar TRIGGER_NAME = \"DropdownMenuTrigger\";\nvar DropdownMenuTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    disabled = false,\n    ...triggerProps\n  } = props;\n  const context = useDropdownMenuContext(TRIGGER_NAME, __scopeDropdownMenu);\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Anchor, {\n    asChild: true,\n    ...menuScope,\n    children: /* @__PURE__ */jsx(Primitive.button, {\n      type: \"button\",\n      id: context.triggerId,\n      \"aria-haspopup\": \"menu\",\n      \"aria-expanded\": context.open,\n      \"aria-controls\": context.open ? context.contentId : void 0,\n      \"data-state\": context.open ? \"open\" : \"closed\",\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      ...triggerProps,\n      ref: composeRefs(forwardedRef, context.triggerRef),\n      onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n        if (!disabled && event.button === 0 && event.ctrlKey === false) {\n          context.onOpenToggle();\n          if (!context.open) event.preventDefault();\n        }\n      }),\n      onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n        if (disabled) return;\n        if ([\"Enter\", \" \"].includes(event.key)) context.onOpenToggle();\n        if (event.key === \"ArrowDown\") context.onOpenChange(true);\n        if ([\"Enter\", \" \", \"ArrowDown\"].includes(event.key)) event.preventDefault();\n      })\n    })\n  });\n});\nDropdownMenuTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"DropdownMenuPortal\";\n\nvar DropdownMenuPortal = props => {\n  const {\n    __scopeDropdownMenu,\n    ...portalProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Portal, { ...menuScope,\n    ...portalProps\n  });\n};\n\nDropdownMenuPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"DropdownMenuContent\";\nvar DropdownMenuContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...contentProps\n  } = props;\n  const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const hasInteractedOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(MenuPrimitive.Content, {\n    id: context.contentId,\n    \"aria-labelledby\": context.triggerId,\n    ...menuScope,\n    ...contentProps,\n    ref: forwardedRef,\n    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, event => {\n      if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n      hasInteractedOutsideRef.current = false;\n      event.preventDefault();\n    }),\n    onInteractOutside: composeEventHandlers(props.onInteractOutside, event => {\n      const originalEvent = event.detail.originalEvent;\n      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n      if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;\n    }),\n    style: { ...props.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-dropdown-menu-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-dropdown-menu-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-dropdown-menu-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-dropdown-menu-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-dropdown-menu-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nDropdownMenuContent.displayName = CONTENT_NAME;\nvar GROUP_NAME = \"DropdownMenuGroup\";\nvar DropdownMenuGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...groupProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Group, { ...menuScope,\n    ...groupProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"DropdownMenuLabel\";\nvar DropdownMenuLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...labelProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Label, { ...menuScope,\n    ...labelProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"DropdownMenuItem\";\nvar DropdownMenuItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...itemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Item, { ...menuScope,\n    ...itemProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuItem.displayName = ITEM_NAME;\nvar CHECKBOX_ITEM_NAME = \"DropdownMenuCheckboxItem\";\nvar DropdownMenuCheckboxItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...checkboxItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.CheckboxItem, { ...menuScope,\n    ...checkboxItemProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"DropdownMenuRadioGroup\";\nvar DropdownMenuRadioGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...radioGroupProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.RadioGroup, { ...menuScope,\n    ...radioGroupProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"DropdownMenuRadioItem\";\nvar DropdownMenuRadioItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...radioItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.RadioItem, { ...menuScope,\n    ...radioItemProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuRadioItem.displayName = RADIO_ITEM_NAME;\nvar INDICATOR_NAME = \"DropdownMenuItemIndicator\";\nvar DropdownMenuItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...itemIndicatorProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.ItemIndicator, { ...menuScope,\n    ...itemIndicatorProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuItemIndicator.displayName = INDICATOR_NAME;\nvar SEPARATOR_NAME = \"DropdownMenuSeparator\";\nvar DropdownMenuSeparator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...separatorProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Separator, { ...menuScope,\n    ...separatorProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"DropdownMenuArrow\";\nvar DropdownMenuArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...arrowProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Arrow, { ...menuScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuArrow.displayName = ARROW_NAME;\n\nvar DropdownMenuSub = props => {\n  const {\n    __scopeDropdownMenu,\n    children,\n    open: openProp,\n    onOpenChange,\n    defaultOpen\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */jsx(MenuPrimitive.Sub, { ...menuScope,\n    open,\n    onOpenChange: setOpen,\n    children\n  });\n};\n\nvar SUB_TRIGGER_NAME = \"DropdownMenuSubTrigger\";\nvar DropdownMenuSubTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...subTriggerProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.SubTrigger, { ...menuScope,\n    ...subTriggerProps,\n    ref: forwardedRef\n  });\n});\nDropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"DropdownMenuSubContent\";\nvar DropdownMenuSubContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDropdownMenu,\n    ...subContentProps\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.SubContent, { ...menuScope,\n    ...subContentProps,\n    ref: forwardedRef,\n    style: { ...props.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-dropdown-menu-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-dropdown-menu-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-dropdown-menu-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-dropdown-menu-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-dropdown-menu-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nDropdownMenuSubContent.displayName = SUB_CONTENT_NAME;\nvar Root2 = DropdownMenu;\nvar Trigger = DropdownMenuTrigger;\nvar Portal2 = DropdownMenuPortal;\nvar Content2 = DropdownMenuContent;\nvar Group2 = DropdownMenuGroup;\nvar Label2 = DropdownMenuLabel;\nvar Item2 = DropdownMenuItem;\nvar CheckboxItem2 = DropdownMenuCheckboxItem;\nvar RadioGroup2 = DropdownMenuRadioGroup;\nvar RadioItem2 = DropdownMenuRadioItem;\nvar ItemIndicator2 = DropdownMenuItemIndicator;\nvar Separator2 = DropdownMenuSeparator;\nvar Arrow2 = DropdownMenuArrow;\nvar Sub2 = DropdownMenuSub;\nvar SubTrigger2 = DropdownMenuSubTrigger;\nvar SubContent2 = DropdownMenuSubContent;\nexport { Arrow2 as Arrow, CheckboxItem2 as CheckboxItem, Content2 as Content, DropdownMenu, DropdownMenuArrow, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuItemIndicator, DropdownMenuLabel, DropdownMenuPortal, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuSeparator, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuTrigger, Group2 as Group, Item2 as Item, ItemIndicator2 as ItemIndicator, Label2 as Label, Portal2 as Portal, RadioGroup2 as RadioGroup, RadioItem2 as RadioItem, Root2 as Root, Separator2 as Separator, Sub2 as Sub, SubContent2 as SubContent, SubTrigger2 as SubTrigger, Trigger, createDropdownMenuScope };","map":{"version":3,"mappings":"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","names":["React","composeEventHandlers","composeRefs","createContextScope","useControllableState","Primitive","MenuPrimitive","createMenuScope","useId","DROPDOWN_MENU_NAME","createDropdownMenuContext","createDropdownMenuScope","useMenuScope","DropdownMenuProvider","useDropdownMenuContext","DropdownMenu","props","__scopeDropdownMenu","children","dir","open","openProp","defaultOpen","onOpenChange","modal","menuScope","triggerRef","setOpen","prop","defaultProp","onChange","scope","triggerId","contentId","onOpenToggle","prevOpen","displayName","TRIGGER_NAME","DropdownMenuTrigger","forwardedRef","disabled","triggerProps","context","asChild","button","type","id","ref","onPointerDown","event","ctrlKey","preventDefault","onKeyDown","includes","key","PORTAL_NAME","DropdownMenuPortal","portalProps","CONTENT_NAME","DropdownMenuContent","contentProps","hasInteractedOutsideRef","onCloseAutoFocus","current","focus","onInteractOutside","originalEvent","detail","ctrlLeftClick","isRightClick","style","GROUP_NAME","DropdownMenuGroup","groupProps","LABEL_NAME","DropdownMenuLabel","labelProps","ITEM_NAME","DropdownMenuItem","itemProps","CHECKBOX_ITEM_NAME","DropdownMenuCheckboxItem","checkboxItemProps","RADIO_GROUP_NAME","DropdownMenuRadioGroup","radioGroupProps","RADIO_ITEM_NAME","DropdownMenuRadioItem","radioItemProps","INDICATOR_NAME","DropdownMenuItemIndicator","itemIndicatorProps","SEPARATOR_NAME","DropdownMenuSeparator","separatorProps","ARROW_NAME","DropdownMenuArrow","arrowProps","DropdownMenuSub","SUB_TRIGGER_NAME","DropdownMenuSubTrigger","subTriggerProps","SUB_CONTENT_NAME","DropdownMenuSubContent","subContentProps","Root","Trigger","Portal","Content","Group","Label","Item","CheckboxItem","RadioGroup","RadioItem","ItemIndicator","Separator","Arrow","Sub","SubTrigger","SubContent"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-dropdown-menu/src/DropdownMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst DROPDOWN_MENU_NAME = 'DropdownMenu';\n\ntype ScopedProps<P> = P & { __scopeDropdownMenu?: Scope };\nconst [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(\n  DROPDOWN_MENU_NAME,\n  [createMenuScope]\n);\nconst useMenuScope = createMenuScope();\n\ntype DropdownMenuContextValue = {\n  triggerId: string;\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DropdownMenuProvider, useDropdownMenuContext] =\n  createDropdownMenuContext<DropdownMenuContextValue>(DROPDOWN_MENU_NAME);\n\ninterface DropdownMenuProps {\n  children?: React.ReactNode;\n  dir?: Direction;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst DropdownMenu: React.FC<DropdownMenuProps> = (props: ScopedProps<DropdownMenuProps>) => {\n  const {\n    __scopeDropdownMenu,\n    children,\n    dir,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DropdownMenuProvider\n      scope={__scopeDropdownMenu}\n      triggerId={useId()}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      <MenuPrimitive.Root {...menuScope} open={open} onOpenChange={setOpen} dir={dir} modal={modal}>\n        {children}\n      </MenuPrimitive.Root>\n    </DropdownMenuProvider>\n  );\n};\n\nDropdownMenu.displayName = DROPDOWN_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DropdownMenuTrigger';\n\ntype DropdownMenuTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DropdownMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst DropdownMenuTrigger = React.forwardRef<DropdownMenuTriggerElement, DropdownMenuTriggerProps>(\n  (props: ScopedProps<DropdownMenuTriggerProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;\n    const context = useDropdownMenuContext(TRIGGER_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return (\n      <MenuPrimitive.Anchor asChild {...menuScope}>\n        <Primitive.button\n          type=\"button\"\n          id={context.triggerId}\n          aria-haspopup=\"menu\"\n          aria-expanded={context.open}\n          aria-controls={context.open ? context.contentId : undefined}\n          data-state={context.open ? 'open' : 'closed'}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          {...triggerProps}\n          ref={composeRefs(forwardedRef, context.triggerRef)}\n          onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (!disabled && event.button === 0 && event.ctrlKey === false) {\n              context.onOpenToggle();\n              // prevent trigger focusing when opening\n              // this allows the content to be given focus without competition\n              if (!context.open) event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (disabled) return;\n            if (['Enter', ' '].includes(event.key)) context.onOpenToggle();\n            if (event.key === 'ArrowDown') context.onOpenChange(true);\n            // prevent keydown from scrolling window / first focused item to execute\n            // that keydown (inadvertently closing the menu)\n            if (['Enter', ' ', 'ArrowDown'].includes(event.key)) event.preventDefault();\n          })}\n        />\n      </MenuPrimitive.Anchor>\n    );\n  }\n);\n\nDropdownMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DropdownMenuPortal';\n\ntype MenuPortalProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;\ninterface DropdownMenuPortalProps extends MenuPortalProps {}\n\nconst DropdownMenuPortal: React.FC<DropdownMenuPortalProps> = (\n  props: ScopedProps<DropdownMenuPortalProps>\n) => {\n  const { __scopeDropdownMenu, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.Portal {...menuScope} {...portalProps} />;\n};\n\nDropdownMenuPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DropdownMenuContent';\n\ntype DropdownMenuContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface DropdownMenuContentProps extends Omit<MenuContentProps, 'onEntryFocus'> {}\n\nconst DropdownMenuContent = React.forwardRef<DropdownMenuContentElement, DropdownMenuContentProps>(\n  (props: ScopedProps<DropdownMenuContentProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...contentProps } = props;\n    const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <MenuPrimitive.Content\n        id={context.contentId}\n        aria-labelledby={context.triggerId}\n        {...menuScope}\n        {...contentProps}\n        ref={forwardedRef}\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n          hasInteractedOutsideRef.current = false;\n          // Always prevent auto focus because we either focus manually or want user agent focus\n          event.preventDefault();\n        })}\n        onInteractOutside={composeEventHandlers(props.onInteractOutside, (event) => {\n          const originalEvent = event.detail.originalEvent as PointerEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n          if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;\n        })}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-dropdown-menu-content-transform-origin':\n              'var(--radix-popper-transform-origin)',\n            '--radix-dropdown-menu-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-dropdown-menu-content-available-height':\n              'var(--radix-popper-available-height)',\n            '--radix-dropdown-menu-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-dropdown-menu-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nDropdownMenuContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'DropdownMenuGroup';\n\ntype DropdownMenuGroupElement = React.ElementRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface DropdownMenuGroupProps extends MenuGroupProps {}\n\nconst DropdownMenuGroup = React.forwardRef<DropdownMenuGroupElement, DropdownMenuGroupProps>(\n  (props: ScopedProps<DropdownMenuGroupProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'DropdownMenuLabel';\n\ntype DropdownMenuLabelElement = React.ElementRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface DropdownMenuLabelProps extends MenuLabelProps {}\n\nconst DropdownMenuLabel = React.forwardRef<DropdownMenuLabelElement, DropdownMenuLabelProps>(\n  (props: ScopedProps<DropdownMenuLabelProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'DropdownMenuItem';\n\ntype DropdownMenuItemElement = React.ElementRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface DropdownMenuItemProps extends MenuItemProps {}\n\nconst DropdownMenuItem = React.forwardRef<DropdownMenuItemElement, DropdownMenuItemProps>(\n  (props: ScopedProps<DropdownMenuItemProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'DropdownMenuCheckboxItem';\n\ntype DropdownMenuCheckboxItemElement = React.ElementRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface DropdownMenuCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  DropdownMenuCheckboxItemElement,\n  DropdownMenuCheckboxItemProps\n>((props: ScopedProps<DropdownMenuCheckboxItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...checkboxItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'DropdownMenuRadioGroup';\n\ntype DropdownMenuRadioGroupElement = React.ElementRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface DropdownMenuRadioGroupProps extends MenuRadioGroupProps {}\n\nconst DropdownMenuRadioGroup = React.forwardRef<\n  DropdownMenuRadioGroupElement,\n  DropdownMenuRadioGroupProps\n>((props: ScopedProps<DropdownMenuRadioGroupProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...radioGroupProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n});\n\nDropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'DropdownMenuRadioItem';\n\ntype DropdownMenuRadioItemElement = React.ElementRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface DropdownMenuRadioItemProps extends MenuRadioItemProps {}\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  DropdownMenuRadioItemElement,\n  DropdownMenuRadioItemProps\n>((props: ScopedProps<DropdownMenuRadioItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...radioItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'DropdownMenuItemIndicator';\n\ntype DropdownMenuItemIndicatorElement = React.ElementRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface DropdownMenuItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst DropdownMenuItemIndicator = React.forwardRef<\n  DropdownMenuItemIndicatorElement,\n  DropdownMenuItemIndicatorProps\n>((props: ScopedProps<DropdownMenuItemIndicatorProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nDropdownMenuItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'DropdownMenuSeparator';\n\ntype DropdownMenuSeparatorElement = React.ElementRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface DropdownMenuSeparatorProps extends MenuSeparatorProps {}\n\nconst DropdownMenuSeparator = React.forwardRef<\n  DropdownMenuSeparatorElement,\n  DropdownMenuSeparatorProps\n>((props: ScopedProps<DropdownMenuSeparatorProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...separatorProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n});\n\nDropdownMenuSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'DropdownMenuArrow';\n\ntype DropdownMenuArrowElement = React.ElementRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface DropdownMenuArrowProps extends MenuArrowProps {}\n\nconst DropdownMenuArrow = React.forwardRef<DropdownMenuArrowElement, DropdownMenuArrowProps>(\n  (props: ScopedProps<DropdownMenuArrowProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DropdownMenuSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst DropdownMenuSub: React.FC<DropdownMenuSubProps> = (\n  props: ScopedProps<DropdownMenuSubProps>\n) => {\n  const { __scopeDropdownMenu, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n      {children}\n    </MenuPrimitive.Sub>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'DropdownMenuSubTrigger';\n\ntype DropdownMenuSubTriggerElement = React.ElementRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface DropdownMenuSubTriggerProps extends MenuSubTriggerProps {}\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  DropdownMenuSubTriggerElement,\n  DropdownMenuSubTriggerProps\n>((props: ScopedProps<DropdownMenuSubTriggerProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...subTriggerProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.SubTrigger {...menuScope} {...subTriggerProps} ref={forwardedRef} />;\n});\n\nDropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'DropdownMenuSubContent';\n\ntype DropdownMenuSubContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuSubContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;\ninterface DropdownMenuSubContentProps extends MenuSubContentProps {}\n\nconst DropdownMenuSubContent = React.forwardRef<\n  DropdownMenuSubContentElement,\n  DropdownMenuSubContentProps\n>((props: ScopedProps<DropdownMenuSubContentProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...subContentProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n\n  return (\n    <MenuPrimitive.SubContent\n      {...menuScope}\n      {...subContentProps}\n      ref={forwardedRef}\n      style={{\n        ...props.style,\n        // re-namespace exposed content custom properties\n        ...{\n          '--radix-dropdown-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',\n          '--radix-dropdown-menu-content-available-width': 'var(--radix-popper-available-width)',\n          '--radix-dropdown-menu-content-available-height': 'var(--radix-popper-available-height)',\n          '--radix-dropdown-menu-trigger-width': 'var(--radix-popper-anchor-width)',\n          '--radix-dropdown-menu-trigger-height': 'var(--radix-popper-anchor-height)',\n        },\n      }}\n    />\n  );\n});\n\nDropdownMenuSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = DropdownMenu;\nconst Trigger = DropdownMenuTrigger;\nconst Portal = DropdownMenuPortal;\nconst Content = DropdownMenuContent;\nconst Group = DropdownMenuGroup;\nconst Label = DropdownMenuLabel;\nconst Item = DropdownMenuItem;\nconst CheckboxItem = DropdownMenuCheckboxItem;\nconst RadioGroup = DropdownMenuRadioGroup;\nconst RadioItem = DropdownMenuRadioItem;\nconst ItemIndicator = DropdownMenuItemIndicator;\nconst Separator = DropdownMenuSeparator;\nconst Arrow = DropdownMenuArrow;\nconst Sub = DropdownMenuSub;\nconst SubTrigger = DropdownMenuSubTrigger;\nconst SubContent = DropdownMenuSubContent;\n\nexport {\n  createDropdownMenuScope,\n  //\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuPortal,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuSeparator,\n  DropdownMenuArrow,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  DropdownMenuProps,\n  DropdownMenuTriggerProps,\n  DropdownMenuPortalProps,\n  DropdownMenuContentProps,\n  DropdownMenuGroupProps,\n  DropdownMenuLabelProps,\n  DropdownMenuItemProps,\n  DropdownMenuCheckboxItemProps,\n  DropdownMenuRadioGroupProps,\n  DropdownMenuRadioItemProps,\n  DropdownMenuItemIndicatorProps,\n  DropdownMenuSeparatorProps,\n  DropdownMenuArrowProps,\n  DropdownMenuSubProps,\n  DropdownMenuSubTriggerProps,\n  DropdownMenuSubContentProps,\n};\n"]},"metadata":{},"sourceType":"module"}