{"ast":null,"code":"// packages/react/use-escape-keydown/src/useEscapeKeydown.tsx\nimport * as React from \"react\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\n\nfunction useEscapeKeydown(onEscapeKeyDownProp) {\n  let ownerDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis?.document;\n  const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);\n  React.useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === \"Escape\") {\n        onEscapeKeyDown(event);\n      }\n    };\n\n    ownerDocument.addEventListener(\"keydown\", handleKeyDown, {\n      capture: true\n    });\n    return () => ownerDocument.removeEventListener(\"keydown\", handleKeyDown, {\n      capture: true\n    });\n  }, [onEscapeKeyDown, ownerDocument]);\n}\n\nexport { useEscapeKeydown };","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,kCAA/B;;AAKA,SAASC,gBAAT,CACEC,mBADF,EAGE;AAAA,MADAC,aACA,uEAD0BC,YAAYC,QACtC;AACA,QAAMC,kBAAkBN,eAAeE,mBAAf,CAAxB;AAEMH,kBAAU,MAAM;AACpB,UAAMQ,gBAAiBC,KAAD,IAA0B;AAC9C,UAAIA,MAAMC,GAAN,KAAc,QAAlB,EAA4B;AAC1BH,wBAAgBE,KAAhB;AACF;AACF,KAJA;;AAKAL,kBAAcO,gBAAd,CAA+B,SAA/B,EAA0CH,aAA1C,EAAyD;AAAEI,eAAS;AAAX,KAAzD;AACA,WAAO,MAAMR,cAAcS,mBAAd,CAAkC,SAAlC,EAA6CL,aAA7C,EAA4D;AAAEI,eAAS;AAAX,KAA5D,CAAb;AACF,GARM,EAQH,CAACL,eAAD,EAAkBH,aAAlB,CARG;AASR","names":["React","useCallbackRef","useEscapeKeydown","onEscapeKeyDownProp","ownerDocument","globalThis","document","onEscapeKeyDown","handleKeyDown","event","key","addEventListener","capture","removeEventListener"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-use-escape-keydown/src/useEscapeKeydown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\n/**\n * Listens for when the escape key is down\n */\nfunction useEscapeKeydown(\n  onEscapeKeyDownProp?: (event: KeyboardEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onEscapeKeyDown(event);\n      }\n    };\n    ownerDocument.addEventListener('keydown', handleKeyDown, { capture: true });\n    return () => ownerDocument.removeEventListener('keydown', handleKeyDown, { capture: true });\n  }, [onEscapeKeyDown, ownerDocument]);\n}\n\nexport { useEscapeKeydown };\n"]},"metadata":{},"sourceType":"module"}