{"ast":null,"code":"import _toConsumableArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { calcInset } from './inset.mjs';\nimport { ScrollOffset } from './presets.mjs';\nimport { resolveOffset } from './offset.mjs';\nimport { interpolate } from '../../../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../../../utils/offsets/default.mjs';\nvar point = {\n  x: 0,\n  y: 0\n};\n\nfunction getTargetSize(target) {\n  return \"getBBox\" in target && target.tagName !== \"svg\" ? target.getBBox() : {\n    width: target.clientWidth,\n    height: target.clientHeight\n  };\n}\n\nfunction resolveOffsets(container, info, options) {\n  var _options$offset = options.offset,\n      offsetDefinition = _options$offset === void 0 ? ScrollOffset.All : _options$offset;\n  var _options$target = options.target,\n      target = _options$target === void 0 ? container : _options$target,\n      _options$axis = options.axis,\n      axis = _options$axis === void 0 ? \"y\" : _options$axis;\n  var lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n  var inset = target !== container ? calcInset(target, container) : point;\n  /**\n   * Measure the target and container. If they're the same thing then we\n   * use the container's scrollWidth/Height as the target, from there\n   * all other calculations can remain the same.\n   */\n\n  var targetSize = target === container ? {\n    width: container.scrollWidth,\n    height: container.scrollHeight\n  } : getTargetSize(target);\n  var containerSize = {\n    width: container.clientWidth,\n    height: container.clientHeight\n  };\n  /**\n   * Reset the length of the resolved offset array rather than creating a new one.\n   * TODO: More reusable data structures for targetSize/containerSize would also be good.\n   */\n\n  info[axis].offset.length = 0;\n  /**\n   * Populate the offset array by resolving the user's offset definition into\n   * a list of pixel scroll offets.\n   */\n\n  var hasChanged = !info[axis].interpolate;\n  var numOffsets = offsetDefinition.length;\n\n  for (var i = 0; i < numOffsets; i++) {\n    var offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n\n    if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n      hasChanged = true;\n    }\n\n    info[axis].offset[i] = offset;\n  }\n  /**\n   * If the pixel scroll offsets have changed, create a new interpolator function\n   * to map scroll value into a progress.\n   */\n\n\n  if (hasChanged) {\n    info[axis].interpolate = interpolate(info[axis].offset, defaultOffset(offsetDefinition));\n    info[axis].interpolatorOffsets = _toConsumableArray(info[axis].offset);\n  }\n\n  info[axis].progress = info[axis].interpolate(info[axis].current);\n}\n\nexport { resolveOffsets };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/dom/scroll/offsets/index.mjs"],"names":["calcInset","ScrollOffset","resolveOffset","interpolate","defaultOffset","point","x","y","getTargetSize","target","tagName","getBBox","width","clientWidth","height","clientHeight","resolveOffsets","container","info","options","offset","offsetDefinition","All","axis","lengthLabel","inset","targetSize","scrollWidth","scrollHeight","containerSize","length","hasChanged","numOffsets","i","interpolatorOffsets","progress","current"],"mappings":"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","sourcesContent":["import { calcInset } from './inset.mjs';\nimport { ScrollOffset } from './presets.mjs';\nimport { resolveOffset } from './offset.mjs';\nimport { interpolate } from '../../../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../../../utils/offsets/default.mjs';\n\nconst point = { x: 0, y: 0 };\nfunction getTargetSize(target) {\n    return \"getBBox\" in target && target.tagName !== \"svg\"\n        ? target.getBBox()\n        : { width: target.clientWidth, height: target.clientHeight };\n}\nfunction resolveOffsets(container, info, options) {\n    const { offset: offsetDefinition = ScrollOffset.All } = options;\n    const { target = container, axis = \"y\" } = options;\n    const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n    const inset = target !== container ? calcInset(target, container) : point;\n    /**\n     * Measure the target and container. If they're the same thing then we\n     * use the container's scrollWidth/Height as the target, from there\n     * all other calculations can remain the same.\n     */\n    const targetSize = target === container\n        ? { width: container.scrollWidth, height: container.scrollHeight }\n        : getTargetSize(target);\n    const containerSize = {\n        width: container.clientWidth,\n        height: container.clientHeight,\n    };\n    /**\n     * Reset the length of the resolved offset array rather than creating a new one.\n     * TODO: More reusable data structures for targetSize/containerSize would also be good.\n     */\n    info[axis].offset.length = 0;\n    /**\n     * Populate the offset array by resolving the user's offset definition into\n     * a list of pixel scroll offets.\n     */\n    let hasChanged = !info[axis].interpolate;\n    const numOffsets = offsetDefinition.length;\n    for (let i = 0; i < numOffsets; i++) {\n        const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n        if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n            hasChanged = true;\n        }\n        info[axis].offset[i] = offset;\n    }\n    /**\n     * If the pixel scroll offsets have changed, create a new interpolator function\n     * to map scroll value into a progress.\n     */\n    if (hasChanged) {\n        info[axis].interpolate = interpolate(info[axis].offset, defaultOffset(offsetDefinition));\n        info[axis].interpolatorOffsets = [...info[axis].offset];\n    }\n    info[axis].progress = info[axis].interpolate(info[axis].current);\n}\n\nexport { resolveOffsets };\n"]},"metadata":{},"sourceType":"module"}