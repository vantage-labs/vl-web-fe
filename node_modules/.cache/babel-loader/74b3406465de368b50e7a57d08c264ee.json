{"ast":null,"code":"import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n  var _a, _b;\n\n  var _useContext = useContext(MotionContext),\n      parent = _useContext.visualElement;\n\n  var lazyContext = useContext(LazyContext);\n  var presenceContext = useContext(PresenceContext);\n  var reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n  var visualElementRef = useRef(null);\n  /**\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n   */\n\n  createVisualElement = createVisualElement || lazyContext.renderer;\n\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState: visualState,\n      parent: parent,\n      props: props,\n      presenceContext: presenceContext,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig: reducedMotionConfig\n    });\n  }\n\n  var visualElement = visualElementRef.current;\n  /**\n   * Load Motion gesture and animation features. These are rendered as renderless\n   * components so each feature can optionally make use of React lifecycle methods.\n   */\n\n  var initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n\n  if (visualElement && !visualElement.projection && ProjectionNodeConstructor && (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n    createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n  }\n\n  var isMounted = useRef(false);\n  useInsertionEffect(function () {\n    /**\n     * Check the component has already mounted before calling\n     * `update` unnecessarily. This ensures we skip the initial update.\n     */\n    if (visualElement && isMounted.current) {\n      visualElement.update(props, presenceContext);\n    }\n  });\n  /**\n   * Cache this value as we want to know whether HandoffAppearAnimations\n   * was present on initial render - it will be deleted after this.\n   */\n\n  var optimisedAppearId = props[optimizedAppearDataAttribute];\n  var wantsHandoff = useRef(Boolean(optimisedAppearId) && !((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)) && ((_b = window.MotionHasOptimisedAnimation) === null || _b === void 0 ? void 0 : _b.call(window, optimisedAppearId)));\n  useIsomorphicLayoutEffect(function () {\n    if (!visualElement) return;\n    isMounted.current = true;\n    window.MotionIsMounted = true;\n    visualElement.updateFeatures();\n    microtask.render(visualElement.render);\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n\n    if (wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  useEffect(function () {\n    if (!visualElement) return;\n\n    if (!wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n\n    if (wantsHandoff.current) {\n      // This ensures all future calls to animateChanges() in this component will run in useEffect\n      queueMicrotask(function () {\n        var _a;\n\n        (_a = window.MotionHandoffMarkAsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId);\n      });\n      wantsHandoff.current = false;\n    }\n  });\n  return visualElement;\n}\n\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n  var layoutId = props.layoutId,\n      layout = props.layout,\n      drag = props.drag,\n      dragConstraints = props.dragConstraints,\n      layoutScroll = props.layoutScroll,\n      layoutRoot = props.layoutRoot;\n  visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"] ? undefined : getClosestProjectingNode(visualElement.parent));\n  visualElement.projection.setOptions({\n    layoutId: layoutId,\n    layout: layout,\n    alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n    visualElement: visualElement,\n\n    /**\n     * TODO: Update options in an effect. This could be tricky as it'll be too late\n     * to update by the time layout animations run.\n     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n     * ensuring it gets called if there's no potential layout animations.\n     *\n     */\n    animationType: typeof layout === \"string\" ? layout : \"both\",\n    initialPromotionConfig: initialPromotionConfig,\n    layoutScroll: layoutScroll,\n    layoutRoot: layoutRoot\n  });\n}\n\nfunction getClosestProjectingNode(visualElement) {\n  if (!visualElement) return undefined;\n  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs"],"names":["useContext","useRef","useInsertionEffect","useEffect","PresenceContext","MotionContext","useIsomorphicLayoutEffect","LazyContext","MotionConfigContext","optimizedAppearDataAttribute","microtask","isRefObject","SwitchLayoutGroupContext","useVisualElement","Component","visualState","props","createVisualElement","ProjectionNodeConstructor","_a","_b","parent","visualElement","lazyContext","presenceContext","reducedMotionConfig","reducedMotion","visualElementRef","renderer","current","blockInitialAnimation","initial","initialLayoutGroupConfig","projection","type","createProjectionNode","isMounted","update","optimisedAppearId","wantsHandoff","Boolean","window","MotionHandoffIsComplete","call","MotionHasOptimisedAnimation","MotionIsMounted","updateFeatures","render","animationState","animateChanges","queueMicrotask","MotionHandoffMarkAsComplete","initialPromotionConfig","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","latestValues","undefined","getClosestProjectingNode","setOptions","alwaysMeasureLayout","animationType","options","allowProjection"],"mappings":"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","sourcesContent":["import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    var _a, _b;\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef(null);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    const isMounted = useRef(false);\n    useInsertionEffect(() => {\n        /**\n         * Check the component has already mounted before calling\n         * `update` unnecessarily. This ensures we skip the initial update.\n         */\n        if (visualElement && isMounted.current) {\n            visualElement.update(props, presenceContext);\n        }\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\n        !((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)) &&\n        ((_b = window.MotionHasOptimisedAnimation) === null || _b === void 0 ? void 0 : _b.call(window, optimisedAppearId)));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        isMounted.current = true;\n        window.MotionIsMounted = true;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\n            queueMicrotask(() => {\n                var _a;\n                (_a = window.MotionHandoffMarkAsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId);\n            });\n            wantsHandoff.current = false;\n        }\n    });\n    return visualElement;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n"]},"metadata":{},"sourceType":"module"}