{"ast":null,"code":"import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nclass VisualElement {\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n    return {};\n  }\n\n  constructor(_ref) {\n    let {\n      parent,\n      props,\n      presenceContext,\n      reducedMotionConfig,\n      blockInitialAnimation,\n      visualState\n    } = _ref;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n\n    this.renderScheduledAt = 0.0;\n\n    this.scheduleRender = () => {\n      const now = time.now();\n\n      if (this.renderScheduledAt < now) {\n        this.renderScheduledAt = now;\n        frame.render(this.render, false, true);\n      }\n    };\n\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    this.latestValues = latestValues;\n    this.baseTarget = { ...latestValues\n    };\n    this.initialValues = props.initial ? { ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't necessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {}, this);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n  }\n\n  mount(instance) {\n    this.current = instance;\n    visualElementStore.set(instance, this);\n\n    if (this.projection && !this.projection.instance) {\n      this.projection.mount(instance);\n    }\n\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = this.parent.addVariantChild(this);\n    }\n\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n\n    if (this.parent) this.parent.children.add(this);\n    this.update(this.props, this.presenceContext);\n  }\n\n  unmount() {\n    visualElementStore.delete(this.current);\n    this.projection && this.projection.unmount();\n    cancelFrame(this.notifyUpdate);\n    cancelFrame(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    this.valueSubscriptions.clear();\n    this.removeFromVariantTree && this.removeFromVariantTree();\n    this.parent && this.parent.children.delete(this);\n\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n\n    for (const key in this.features) {\n      const feature = this.features[key];\n\n      if (feature) {\n        feature.unmount();\n        feature.isMounted = false;\n      }\n    }\n\n    this.current = null;\n  }\n\n  bindToMotionValue(key, value) {\n    if (this.valueSubscriptions.has(key)) {\n      this.valueSubscriptions.get(key)();\n    }\n\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && frame.preRender(this.notifyUpdate);\n\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    let removeSyncCheck;\n\n    if (window.MotionCheckAppearSync) {\n      removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n    }\n\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n      if (removeSyncCheck) removeSyncCheck();\n      if (value.owner) value.stop();\n    });\n  }\n\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n      return 0;\n    }\n\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n\n  updateFeatures() {\n    let key = \"animation\";\n\n    for (key in featureDefinitions) {\n      const featureDefinition = featureDefinitions[key];\n      if (!featureDefinition) continue;\n      const {\n        isEnabled,\n        Feature: FeatureConstructor\n      } = featureDefinition;\n      /**\n       * If this feature is enabled but not active, make a new instance.\n       */\n\n      if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {\n        this.features[key] = new FeatureConstructor(this);\n      }\n      /**\n       * If we have a feature, mount or update it.\n       */\n\n\n      if (this.features[key]) {\n        const feature = this.features[key];\n\n        if (feature.isMounted) {\n          feature.update();\n        } else {\n          feature.mount();\n          feature.isMounted = true;\n        }\n      }\n    }\n  }\n\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n\n\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n\n\n  update(props, presenceContext) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n\n    this.prevProps = this.props;\n    this.props = props;\n    this.prevPresenceContext = this.presenceContext;\n    this.presenceContext = presenceContext;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n\n      const listenerName = \"on\" + key;\n      const listener = props[listenerName];\n\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n  }\n\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n\n\n  getVariant(name) {\n    return this.props.variants ? this.props.variants[name] : undefined;\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n\n\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n\n  getClosestVariantNode() {\n    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n\n\n  addVariantChild(child) {\n    const closestVariantNode = this.getClosestVariantNode();\n\n    if (closestVariantNode) {\n      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n\n\n  addValue(key, value) {\n    // Remove existing value if it exists\n    const existingValue = this.values.get(key);\n\n    if (value !== existingValue) {\n      if (existingValue) this.removeValue(key);\n      this.bindToMotionValue(key, value);\n      this.values.set(key, value);\n      this.latestValues[key] = value.get();\n    }\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n\n\n  removeValue(key) {\n    this.values.delete(key);\n    const unsubscribe = this.valueSubscriptions.get(key);\n\n    if (unsubscribe) {\n      unsubscribe();\n      this.valueSubscriptions.delete(key);\n    }\n\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n\n\n  hasValue(key) {\n    return this.values.has(key);\n  }\n\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n\n    let value = this.values.get(key);\n\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue === null ? undefined : defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n\n\n  readValue(key, target) {\n    var _a;\n\n    let value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n\n    if (value !== undefined && value !== null) {\n      if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n        // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n        value = parseFloat(value);\n      } else if (!findValueType(value) && complex.test(target)) {\n        value = getAnimatableNone(key, target);\n      }\n\n      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n    }\n\n    return isMotionValue(value) ? value.get() : value;\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n\n\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n\n\n  getBaseTarget(key) {\n    var _a;\n\n    const {\n      initial\n    } = this.props;\n    let valueFromInitial;\n\n    if (typeof initial === \"string\" || typeof initial === \"object\") {\n      const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n\n      if (variant) {\n        valueFromInitial = variant[key];\n      }\n    }\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n\n\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n\n\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    return this.events[eventName].add(callback);\n  }\n\n  notify(eventName) {\n    if (this.events[eventName]) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.events[eventName].notify(...args);\n    }\n  }\n\n}\n\nexport { VisualElement };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"names":["initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isMotionValue","transformProps","isControllingVariants","isVariantNode","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","visualElementStore","KeyframeResolver","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","createBox","time","frame","cancelFrame","propEventHandlers","VisualElement","scrapeMotionValuesFromProps","_props","_prevProps","_visualElement","constructor","parent","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","options","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","renderScheduledAt","scheduleRender","now","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","key","value","undefined","set","mount","instance","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","add","update","unmount","delete","remove","clear","feature","isMounted","has","get","valueIsTransform","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeOnRenderRequest","removeSyncCheck","window","MotionCheckAppearSync","owner","stop","sortNodePosition","other","sortInstanceNodePosition","type","updateFeatures","featureDefinition","isEnabled","Feature","FeatureConstructor","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","transformTemplate","prevProps","prevPresenceContext","i","length","listenerName","listener","handleChildMotionValue","getProps","getVariant","name","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","child","closestVariantNode","addValue","existingValue","removeValue","unsubscribe","removeValueFromRenderState","hasValue","getValue","defaultValue","readValue","target","_a","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","getBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"mappings":"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","sourcesContent":["import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"]},"metadata":{},"sourceType":"module"}