{"ast":null,"code":"import { time } from '../../../frameloop/sync-time.mjs';\nimport { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nvar frameloopDriver = function frameloopDriver(update) {\n  var passTimestamp = function passTimestamp(_ref) {\n    var timestamp = _ref.timestamp;\n    return update(timestamp);\n  };\n\n  return {\n    start: function start() {\n      return frame.update(passTimestamp, true);\n    },\n    stop: function stop() {\n      return cancelFrame(passTimestamp);\n    },\n\n    /**\n     * If we're processing this frame we can use the\n     * framelocked timestamp to keep things in sync.\n     */\n    now: function now() {\n      return frameData.isProcessing ? frameData.timestamp : time.now();\n    }\n  };\n};\n\nexport { frameloopDriver };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/animation/animators/drivers/driver-frameloop.mjs"],"names":["time","frame","cancelFrame","frameData","frameloopDriver","update","passTimestamp","timestamp","start","stop","now","isProcessing"],"mappings":"AAAA,SAASA,IAAT,QAAqB,kCAArB;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,8BAA9C;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAAY;AAChC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,QAAGC,SAAH,QAAGA,SAAH;AAAA,WAAmBF,MAAM,CAACE,SAAD,CAAzB;AAAA,GAAtB;;AACA,SAAO;AACHC,IAAAA,KAAK,EAAE;AAAA,aAAMP,KAAK,CAACI,MAAN,CAAaC,aAAb,EAA4B,IAA5B,CAAN;AAAA,KADJ;AAEHG,IAAAA,IAAI,EAAE;AAAA,aAAMP,WAAW,CAACI,aAAD,CAAjB;AAAA,KAFH;;AAGH;AACR;AACA;AACA;AACQI,IAAAA,GAAG,EAAE;AAAA,aAAOP,SAAS,CAACQ,YAAV,GAAyBR,SAAS,CAACI,SAAnC,GAA+CP,IAAI,CAACU,GAAL,EAAtD;AAAA;AAPF,GAAP;AASH,CAXD;;AAaA,SAASN,eAAT","sourcesContent":["import { time } from '../../../frameloop/sync-time.mjs';\nimport { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),\n    };\n};\n\nexport { frameloopDriver };\n"]},"metadata":{},"sourceType":"module"}