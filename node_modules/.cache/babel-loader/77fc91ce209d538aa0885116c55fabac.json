{"ast":null,"code":"\"use client\"; // packages/react/toggle/src/Toggle.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar NAME = \"Toggle\";\nvar Toggle = React.forwardRef((props, forwardedRef) => {\n  const {\n    pressed: pressedProp,\n    defaultPressed = false,\n    onPressedChange,\n    ...buttonProps\n  } = props;\n  const [pressed = false, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed\n  });\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-pressed\": pressed,\n    \"data-state\": pressed ? \"on\" : \"off\",\n    \"data-disabled\": props.disabled ? \"\" : void 0,\n    ...buttonProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, () => {\n      if (!props.disabled) {\n        setPressed(!pressed);\n      }\n    })\n  });\n});\nToggle.displayName = NAME;\nvar Root = Toggle;\nexport { Root, Toggle };","map":{"version":3,"mappings":";;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,oBAAT,QAAqC,wCAArC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAqCI;AA/BJ,IAAMC,OAAO,QAAb;AAqBA,IAAMC,SAAeL,iBAAuC,CAACM,KAAD,EAAQC,YAAR,KAAyB;AACnF,QAAM;AAAEC,aAASC,WAAX;AAAwBC,qBAAiB,KAAzC;AAAgDC,mBAAhD;AAAiE,OAAGC;AAApE,MAAoFN,KAA1F;AAEA,QAAM,CAACE,UAAU,KAAX,EAAkBK,UAAlB,IAAgCX,qBAAqB;AACzDY,UAAML,WADmD;AAEzDM,cAAUJ,eAF+C;AAGzDK,iBAAaN;AAH4C,GAArB,CAAtC;AAMA,SACE,mBAACP,UAAUc,MAAX,EAAC;AACCC,UAAK,QADN;AAEC,oBAAcV,OAFf;AAGC,kBAAYA,UAAU,IAAV,GAAiB,KAH9B;AAIC,qBAAeF,MAAMa,QAAN,GAAiB,EAAjB,GAAsB,MAJtC;AAKE,OAAGP,WALL;AAMCQ,SAAKb,YANN;AAOCc,aAASpB,qBAAqBK,MAAMe,OAA3B,EAAoC,MAAM;AACjD,UAAI,CAACf,MAAMa,QAAX,EAAqB;AACnBN,mBAAW,CAACL,OAAZ;AACF;AACD,KAJQ;AAPV,GAAD,CADF;AAeD,CAxBoB,CAArB;AA0BAH,OAAOiB,WAAP,GAAqBlB,IAArB;AAIA,IAAMmB,OAAOlB,MAAb","names":["React","composeEventHandlers","useControllableState","Primitive","NAME","Toggle","props","forwardedRef","pressed","pressedProp","defaultPressed","onPressedChange","buttonProps","setPressed","prop","onChange","defaultProp","button","type","disabled","ref","onClick","displayName","Root"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-toggle/src/Toggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Toggle';\n\ntype ToggleElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToggleProps extends PrimitiveButtonProps {\n  /**\n   * The controlled state of the toggle.\n   */\n  pressed?: boolean;\n  /**\n   * The state of the toggle when initially rendered. Use `defaultPressed`\n   * if you do not need to control the state of the toggle.\n   * @defaultValue false\n   */\n  defaultPressed?: boolean;\n  /**\n   * The callback that fires when the state of the toggle changes.\n   */\n  onPressedChange?(pressed: boolean): void;\n}\n\nconst Toggle = React.forwardRef<ToggleElement, ToggleProps>((props, forwardedRef) => {\n  const { pressed: pressedProp, defaultPressed = false, onPressedChange, ...buttonProps } = props;\n\n  const [pressed = false, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed,\n  });\n\n  return (\n    <Primitive.button\n      type=\"button\"\n      aria-pressed={pressed}\n      data-state={pressed ? 'on' : 'off'}\n      data-disabled={props.disabled ? '' : undefined}\n      {...buttonProps}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => {\n        if (!props.disabled) {\n          setPressed(!pressed);\n        }\n      })}\n    />\n  );\n});\n\nToggle.displayName = NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toggle;\n\nexport {\n  Toggle,\n  //\n  Root,\n};\nexport type { ToggleProps };\n"]},"metadata":{},"sourceType":"module"}