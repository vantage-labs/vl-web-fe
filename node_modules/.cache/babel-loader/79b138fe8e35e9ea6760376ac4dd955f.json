{"ast":null,"code":"\"use client\";\n\nimport _createForOfIteratorHelper from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useCallback, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nvar PresenceChild = function PresenceChild(_ref) {\n  var children = _ref.children,\n      initial = _ref.initial,\n      isPresent = _ref.isPresent,\n      onExitComplete = _ref.onExitComplete,\n      custom = _ref.custom,\n      presenceAffectsLayout = _ref.presenceAffectsLayout,\n      mode = _ref.mode;\n  var presenceChildren = useConstant(newChildrenMap);\n  var id = useId();\n  var memoizedOnExitComplete = useCallback(function (childId) {\n    presenceChildren.set(childId, true);\n\n    var _iterator = _createForOfIteratorHelper(presenceChildren.values()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var isComplete = _step.value;\n        if (!isComplete) return; // can stop searching when any is incomplete\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    onExitComplete && onExitComplete();\n  }, [presenceChildren, onExitComplete]);\n  var context = useMemo(function () {\n    return {\n      id: id,\n      initial: initial,\n      isPresent: isPresent,\n      custom: custom,\n      onExitComplete: memoizedOnExitComplete,\n      register: function register(childId) {\n        presenceChildren.set(childId, false);\n        return function () {\n          return presenceChildren.delete(childId);\n        };\n      }\n    };\n  },\n  /**\n   * If the presence of a child affects the layout of the components around it,\n   * we want to make a new context value to ensure they get re-rendered\n   * so they can detect that layout change.\n   */\n  presenceAffectsLayout ? [Math.random(), memoizedOnExitComplete] : [isPresent, memoizedOnExitComplete]);\n  useMemo(function () {\n    presenceChildren.forEach(function (_, key) {\n      return presenceChildren.set(key, false);\n    });\n  }, [isPresent]);\n  /**\n   * If there's no `motion` components to fire exit animations, we want to remove this\n   * component immediately.\n   */\n\n  React.useEffect(function () {\n    !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();\n  }, [isPresent]);\n\n  if (mode === \"popLayout\") {\n    children = jsx(PopChild, {\n      isPresent: isPresent,\n      children: children\n    });\n  }\n\n  return jsx(PresenceContext.Provider, {\n    value: context,\n    children: children\n  });\n};\n\nfunction newChildrenMap() {\n  return new Map();\n}\n\nexport { PresenceChild };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs"],"names":["jsx","React","useId","useCallback","useMemo","PresenceContext","useConstant","PopChild","PresenceChild","children","initial","isPresent","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","id","memoizedOnExitComplete","childId","set","values","isComplete","context","register","delete","Math","random","forEach","_","key","useEffect","size","Provider","value","Map"],"mappings":"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","sourcesContent":["\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useCallback, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const memoizedOnExitComplete = useCallback((childId) => {\n        presenceChildren.set(childId, true);\n        for (const isComplete of presenceChildren.values()) {\n            if (!isComplete)\n                return; // can stop searching when any is incomplete\n        }\n        onExitComplete && onExitComplete();\n    }, [presenceChildren, onExitComplete]);\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: memoizedOnExitComplete,\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout\n        ? [Math.random(), memoizedOnExitComplete]\n        : [isPresent, memoizedOnExitComplete]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = jsx(PopChild, { isPresent: isPresent, children: children });\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n"]},"metadata":{},"sourceType":"module"}