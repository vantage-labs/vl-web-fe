{"ast":null,"code":"\"use client\"; // packages/react/dialog/src/Dialog.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContext, createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { hideOthers } from \"aria-hidden\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar DIALOG_NAME = \"Dialog\";\nvar [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\nvar [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);\n\nvar Dialog = props => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true\n  } = props;\n  const triggerRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */jsx(DialogProvider, {\n    scope: __scopeDialog,\n    triggerRef,\n    contentRef,\n    contentId: useId(),\n    titleId: useId(),\n    descriptionId: useId(),\n    open,\n    onOpenChange: setOpen,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    modal,\n    children\n  });\n};\n\nDialog.displayName = DIALOG_NAME;\nvar TRIGGER_NAME = \"DialogTrigger\";\nvar DialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...triggerProps\n  } = props;\n  const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\",\n    \"aria-expanded\": context.open,\n    \"aria-controls\": context.contentId,\n    \"data-state\": getState(context.open),\n    ...triggerProps,\n    ref: composedTriggerRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  });\n});\nDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"DialogPortal\";\nvar [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME, {\n  forceMount: void 0\n});\n\nvar DialogPortal = props => {\n  const {\n    __scopeDialog,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(PortalProvider, {\n    scope: __scopeDialog,\n    forceMount,\n    children: React.Children.map(children, child => /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(PortalPrimitive, {\n        asChild: true,\n        container,\n        children: child\n      })\n    }))\n  });\n};\n\nDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"DialogOverlay\";\nvar DialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n  const {\n    forceMount = portalContext.forceMount,\n    ...overlayProps\n  } = props;\n  const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n  return context.modal ? /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: /* @__PURE__ */jsx(DialogOverlayImpl, { ...overlayProps,\n      ref: forwardedRef\n    })\n  }) : null;\n});\nDialogOverlay.displayName = OVERLAY_NAME;\nvar DialogOverlayImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...overlayProps\n  } = props;\n  const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n  return (// Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n    // ie. when `Overlay` and `Content` are siblings\n\n    /* @__PURE__ */\n    jsx(RemoveScroll, {\n      as: Slot,\n      allowPinchZoom: true,\n      shards: [context.contentRef],\n      children: /* @__PURE__ */jsx(Primitive.div, {\n        \"data-state\": getState(context.open),\n        ...overlayProps,\n        ref: forwardedRef,\n        style: {\n          pointerEvents: \"auto\",\n          ...overlayProps.style\n        }\n      })\n    })\n  );\n});\nvar CONTENT_NAME = \"DialogContent\";\nvar DialogContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n  const {\n    forceMount = portalContext.forceMount,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: context.modal ? /* @__PURE__ */jsx(DialogContentModal, { ...contentProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */jsx(DialogContentNonModal, { ...contentProps,\n      ref: forwardedRef\n    })\n  });\n});\nDialogContent.displayName = CONTENT_NAME;\nvar DialogContentModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n  return /* @__PURE__ */jsx(DialogContentImpl, { ...props,\n    ref: composedRefs,\n    trapFocus: context.open,\n    disableOutsidePointerEvents: true,\n    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, event => {\n      event.preventDefault();\n      context.triggerRef.current?.focus();\n    }),\n    onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, event => {\n      const originalEvent = event.detail.originalEvent;\n      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n      if (isRightClick) event.preventDefault();\n    }),\n    onFocusOutside: composeEventHandlers(props.onFocusOutside, event => event.preventDefault())\n  });\n});\nvar DialogContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const hasInteractedOutsideRef = React.useRef(false);\n  const hasPointerDownOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(DialogContentImpl, { ...props,\n    ref: forwardedRef,\n    trapFocus: false,\n    disableOutsidePointerEvents: false,\n    onCloseAutoFocus: event => {\n      props.onCloseAutoFocus?.(event);\n\n      if (!event.defaultPrevented) {\n        if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n        event.preventDefault();\n      }\n\n      hasInteractedOutsideRef.current = false;\n      hasPointerDownOutsideRef.current = false;\n    },\n    onInteractOutside: event => {\n      props.onInteractOutside?.(event);\n\n      if (!event.defaultPrevented) {\n        hasInteractedOutsideRef.current = true;\n\n        if (event.detail.originalEvent.type === \"pointerdown\") {\n          hasPointerDownOutsideRef.current = true;\n        }\n      }\n\n      const target = event.target;\n      const targetIsTrigger = context.triggerRef.current?.contains(target);\n      if (targetIsTrigger) event.preventDefault();\n\n      if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n        event.preventDefault();\n      }\n    }\n  });\n});\nvar DialogContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    trapFocus,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  useFocusGuards();\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(FocusScope, {\n      asChild: true,\n      loop: true,\n      trapped: trapFocus,\n      onMountAutoFocus: onOpenAutoFocus,\n      onUnmountAutoFocus: onCloseAutoFocus,\n      children: /* @__PURE__ */jsx(DismissableLayer, {\n        role: \"dialog\",\n        id: context.contentId,\n        \"aria-describedby\": context.descriptionId,\n        \"aria-labelledby\": context.titleId,\n        \"data-state\": getState(context.open),\n        ...contentProps,\n        ref: composedRefs,\n        onDismiss: () => context.onOpenChange(false)\n      })\n    }), /* @__PURE__ */jsxs(Fragment, {\n      children: [/* @__PURE__ */jsx(TitleWarning, {\n        titleId: context.titleId\n      }), /* @__PURE__ */jsx(DescriptionWarning, {\n        contentRef,\n        descriptionId: context.descriptionId\n      })]\n    })]\n  });\n});\nvar TITLE_NAME = \"DialogTitle\";\nvar DialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...titleProps\n  } = props;\n  const context = useDialogContext(TITLE_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.h2, {\n    id: context.titleId,\n    ...titleProps,\n    ref: forwardedRef\n  });\n});\nDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"DialogDescription\";\nvar DialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...descriptionProps\n  } = props;\n  const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.p, {\n    id: context.descriptionId,\n    ...descriptionProps,\n    ref: forwardedRef\n  });\n});\nDialogDescription.displayName = DESCRIPTION_NAME;\nvar CLOSE_NAME = \"DialogClose\";\nvar DialogClose = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...closeProps\n  } = props;\n  const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    ...closeProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))\n  });\n});\nDialogClose.displayName = CLOSE_NAME;\n\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\n\nvar TITLE_WARNING_NAME = \"DialogTitleWarning\";\nvar [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: \"dialog\"\n});\n\nvar TitleWarning = _ref => {\n  let {\n    titleId\n  } = _ref;\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n  return null;\n};\n\nvar DESCRIPTION_WARNING_NAME = \"DialogDescriptionWarning\";\n\nvar DescriptionWarning = _ref2 => {\n  let {\n    contentRef,\n    descriptionId\n  } = _ref2;\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute(\"aria-describedby\");\n\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n  return null;\n};\n\nvar Root = Dialog;\nvar Trigger = DialogTrigger;\nvar Portal = DialogPortal;\nvar Overlay = DialogOverlay;\nvar Content = DialogContent;\nvar Title = DialogTitle;\nvar Description = DialogDescription;\nvar Close = DialogClose;\nexport { Close, Content, Description, Dialog, DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogTitle, DialogTrigger, Overlay, Portal, Root, Title, Trigger, WarningProvider, createDialogScope };","map":{"version":3,"mappings":"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","names":["React","composeEventHandlers","useComposedRefs","createContext","createContextScope","useId","useControllableState","DismissableLayer","FocusScope","Portal","PortalPrimitive","Presence","Primitive","useFocusGuards","RemoveScroll","hideOthers","Slot","Fragment","jsxs","DIALOG_NAME","createDialogContext","createDialogScope","DialogProvider","useDialogContext","Dialog","props","__scopeDialog","children","open","openProp","defaultOpen","onOpenChange","modal","triggerRef","contentRef","setOpen","prop","defaultProp","onChange","scope","contentId","titleId","descriptionId","onOpenToggle","prevOpen","displayName","TRIGGER_NAME","DialogTrigger","forwardedRef","triggerProps","context","composedTriggerRef","button","type","getState","ref","onClick","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","DialogPortal","container","map","child","present","asChild","OVERLAY_NAME","DialogOverlay","portalContext","overlayProps","DialogOverlayImpl","jsx","as","allowPinchZoom","shards","div","style","pointerEvents","CONTENT_NAME","DialogContent","contentProps","DialogContentModal","DialogContentNonModal","composedRefs","content","current","DialogContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","isRightClick","onFocusOutside","hasInteractedOutsideRef","hasPointerDownOutsideRef","defaultPrevented","onInteractOutside","target","targetIsTrigger","contains","onOpenAutoFocus","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","role","id","onDismiss","TitleWarning","DescriptionWarning","TITLE_NAME","DialogTitle","titleProps","h2","DESCRIPTION_NAME","DialogDescription","descriptionProps","p","CLOSE_NAME","DialogClose","closeProps","TITLE_WARNING_NAME","WarningProvider","useWarningContext","contentName","titleName","docsSlug","titleWarningContext","MESSAGE","hasTitle","document","getElementById","console","error","DESCRIPTION_WARNING_NAME","descriptionWarningContext","describedById","getAttribute","hasDescription","warn","Root","Trigger","Overlay","Content","Title","Description","Close"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-dialog/src/Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentRef: React.RefObject<DialogContentElement | null>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createDialogContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface DialogPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <PortalPrimitive asChild container={container}>\n            {child}\n          </PortalPrimitive>\n        </Presence>\n      ))}\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning titleId={context.titleId} />\n            <DescriptionWarning contentRef={contentRef} descriptionId={context.descriptionId} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = React.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = React.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype TitleWarningProps = { titleId?: string };\n\nconst TitleWarning: React.FC<TitleWarningProps> = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<DialogContentElement | null>;\n  descriptionId?: string;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    // if we have an id and the user hasn't set aria-describedby={undefined}\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"]},"metadata":{},"sourceType":"module"}