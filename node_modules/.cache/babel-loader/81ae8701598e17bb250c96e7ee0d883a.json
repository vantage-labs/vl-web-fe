{"ast":null,"code":"import _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { isBezierDefinition } from 'motion-dom';\nimport { invariant, noop } from 'motion-utils';\nimport { anticipate } from '../anticipate.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nvar easingLookup = {\n  linear: noop,\n  easeIn: easeIn,\n  easeInOut: easeInOut,\n  easeOut: easeOut,\n  circIn: circIn,\n  circInOut: circInOut,\n  circOut: circOut,\n  backIn: backIn,\n  backInOut: backInOut,\n  backOut: backOut,\n  anticipate: anticipate\n};\n\nvar easingDefinitionToFunction = function easingDefinitionToFunction(definition) {\n  if (isBezierDefinition(definition)) {\n    // If cubic bezier definition, create bezier curve\n    invariant(definition.length === 4, \"Cubic bezier arrays must contain four numerical values.\");\n\n    var _definition = _slicedToArray(definition, 4),\n        x1 = _definition[0],\n        y1 = _definition[1],\n        x2 = _definition[2],\n        y2 = _definition[3];\n\n    return cubicBezier(x1, y1, x2, y2);\n  } else if (typeof definition === \"string\") {\n    // Else lookup from table\n    invariant(easingLookup[definition] !== undefined, \"Invalid easing type '\".concat(definition, \"'\"));\n    return easingLookup[definition];\n  }\n\n  return definition;\n};\n\nexport { easingDefinitionToFunction };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/easing/utils/map.mjs"],"names":["isBezierDefinition","invariant","noop","anticipate","backIn","backInOut","backOut","circIn","circInOut","circOut","cubicBezier","easeIn","easeInOut","easeOut","easingLookup","linear","easingDefinitionToFunction","definition","length","x1","y1","x2","y2","undefined"],"mappings":";AAAA,SAASA,kBAAT,QAAmC,YAAnC;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,cAAhC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,aAA3C;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,aAA3C;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,aAA3C;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAEb,IADS;AAEjBS,EAAAA,MAAM,EAANA,MAFiB;AAGjBC,EAAAA,SAAS,EAATA,SAHiB;AAIjBC,EAAAA,OAAO,EAAPA,OAJiB;AAKjBN,EAAAA,MAAM,EAANA,MALiB;AAMjBC,EAAAA,SAAS,EAATA,SANiB;AAOjBC,EAAAA,OAAO,EAAPA,OAPiB;AAQjBL,EAAAA,MAAM,EAANA,MARiB;AASjBC,EAAAA,SAAS,EAATA,SATiB;AAUjBC,EAAAA,OAAO,EAAPA,OAViB;AAWjBH,EAAAA,UAAU,EAAVA;AAXiB,CAArB;;AAaA,IAAMa,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,UAAD,EAAgB;AAC/C,MAAIjB,kBAAkB,CAACiB,UAAD,CAAtB,EAAoC;AAChC;AACAhB,IAAAA,SAAS,CAACgB,UAAU,CAACC,MAAX,KAAsB,CAAvB,4DAAT;;AACA,qCAAyBD,UAAzB;AAAA,QAAOE,EAAP;AAAA,QAAWC,EAAX;AAAA,QAAeC,EAAf;AAAA,QAAmBC,EAAnB;;AACA,WAAOZ,WAAW,CAACS,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,CAAlB;AACH,GALD,MAMK,IAAI,OAAOL,UAAP,KAAsB,QAA1B,EAAoC;AACrC;AACAhB,IAAAA,SAAS,CAACa,YAAY,CAACG,UAAD,CAAZ,KAA6BM,SAA9B,iCAAiEN,UAAjE,OAAT;AACA,WAAOH,YAAY,CAACG,UAAD,CAAnB;AACH;;AACD,SAAOA,UAAP;AACH,CAbD;;AAeA,SAASD,0BAAT","sourcesContent":["import { isBezierDefinition } from 'motion-dom';\nimport { invariant, noop } from 'motion-utils';\nimport { anticipate } from '../anticipate.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (isBezierDefinition(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n"]},"metadata":{},"sourceType":"module"}