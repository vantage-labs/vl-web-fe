{"ast":null,"code":"import _objectSpread from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { invariant } from 'motion-utils';\nimport { setDragLock } from 'motion-dom';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\n\nvar VisualElementDragControls = /*#__PURE__*/function () {\n  function VisualElementDragControls(visualElement) {\n    _classCallCheck(this, VisualElementDragControls);\n\n    this.openDragLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  _createClass(VisualElementDragControls, [{\n    key: \"start\",\n    value: function start(originEvent) {\n      var _this = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$snapToCursor = _ref.snapToCursor,\n          snapToCursor = _ref$snapToCursor === void 0 ? false : _ref$snapToCursor;\n\n      /**\n       * Don't start dragging if this component is exiting\n       */\n      var presenceContext = this.visualElement.presenceContext;\n      if (presenceContext && presenceContext.isPresent === false) return;\n\n      var onSessionStart = function onSessionStart(event) {\n        var _this$getProps = _this.getProps(),\n            dragSnapToOrigin = _this$getProps.dragSnapToOrigin; // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n        // the component.\n\n\n        dragSnapToOrigin ? _this.pauseAnimation() : _this.stopAnimation();\n\n        if (snapToCursor) {\n          _this.snapToCursor(extractEventInfo(event).point);\n        }\n      };\n\n      var onStart = function onStart(event, info) {\n        // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n        var _this$getProps2 = _this.getProps(),\n            drag = _this$getProps2.drag,\n            dragPropagation = _this$getProps2.dragPropagation,\n            onDragStart = _this$getProps2.onDragStart;\n\n        if (drag && !dragPropagation) {\n          if (_this.openDragLock) _this.openDragLock();\n          _this.openDragLock = setDragLock(drag); // If we don 't have the lock, don't start dragging\n\n          if (!_this.openDragLock) return;\n        }\n\n        _this.isDragging = true;\n        _this.currentDirection = null;\n\n        _this.resolveConstraints();\n\n        if (_this.visualElement.projection) {\n          _this.visualElement.projection.isAnimationBlocked = true;\n          _this.visualElement.projection.target = undefined;\n        }\n        /**\n         * Record gesture origin\n         */\n\n\n        eachAxis(function (axis) {\n          var current = _this.getAxisMotionValue(axis).get() || 0;\n          /**\n           * If the MotionValue is a percentage value convert to px\n           */\n\n          if (percent.test(current)) {\n            var projection = _this.visualElement.projection;\n\n            if (projection && projection.layout) {\n              var measuredAxis = projection.layout.layoutBox[axis];\n\n              if (measuredAxis) {\n                var length = calcLength(measuredAxis);\n                current = length * (parseFloat(current) / 100);\n              }\n            }\n          }\n\n          _this.originPoint[axis] = current;\n        }); // Fire onDragStart event\n\n        if (onDragStart) {\n          frame.postRender(function () {\n            return onDragStart(event, info);\n          });\n        }\n\n        addValueToWillChange(_this.visualElement, \"transform\");\n        var animationState = _this.visualElement.animationState;\n        animationState && animationState.setActive(\"whileDrag\", true);\n      };\n\n      var onMove = function onMove(event, info) {\n        // latestPointerEvent = event\n        var _this$getProps3 = _this.getProps(),\n            dragPropagation = _this$getProps3.dragPropagation,\n            dragDirectionLock = _this$getProps3.dragDirectionLock,\n            onDirectionLock = _this$getProps3.onDirectionLock,\n            onDrag = _this$getProps3.onDrag; // If we didn't successfully receive the gesture lock, early return.\n\n\n        if (!dragPropagation && !_this.openDragLock) return;\n        var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n\n        if (dragDirectionLock && _this.currentDirection === null) {\n          _this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n          if (_this.currentDirection !== null) {\n            onDirectionLock && onDirectionLock(_this.currentDirection);\n          }\n\n          return;\n        } // Update each point with the latest position\n\n\n        _this.updateAxis(\"x\", info.point, offset);\n\n        _this.updateAxis(\"y\", info.point, offset);\n        /**\n         * Ideally we would leave the renderer to fire naturally at the end of\n         * this frame but if the element is about to change layout as the result\n         * of a re-render we want to ensure the browser can read the latest\n         * bounding box to ensure the pointer and element don't fall out of sync.\n         */\n\n\n        _this.visualElement.render();\n        /**\n         * This must fire after the render call as it might trigger a state\n         * change which itself might trigger a layout update.\n         */\n\n\n        onDrag && onDrag(event, info);\n      };\n\n      var onSessionEnd = function onSessionEnd(event, info) {\n        return _this.stop(event, info);\n      };\n\n      var resumeAnimation = function resumeAnimation() {\n        return eachAxis(function (axis) {\n          var _a;\n\n          return _this.getAnimationState(axis) === \"paused\" && ((_a = _this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n      };\n\n      var _this$getProps4 = this.getProps(),\n          dragSnapToOrigin = _this$getProps4.dragSnapToOrigin;\n\n      this.panSession = new PanSession(originEvent, {\n        onSessionStart: onSessionStart,\n        onStart: onStart,\n        onMove: onMove,\n        onSessionEnd: onSessionEnd,\n        resumeAnimation: resumeAnimation\n      }, {\n        transformPagePoint: this.visualElement.getTransformPagePoint(),\n        dragSnapToOrigin: dragSnapToOrigin,\n        contextWindow: getContextWindow(this.visualElement)\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(event, info) {\n      var isDragging = this.isDragging;\n      this.cancel();\n      if (!isDragging) return;\n      var velocity = info.velocity;\n      this.startAnimation(velocity);\n\n      var _this$getProps5 = this.getProps(),\n          onDragEnd = _this$getProps5.onDragEnd;\n\n      if (onDragEnd) {\n        frame.postRender(function () {\n          return onDragEnd(event, info);\n        });\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.isDragging = false;\n      var _this$visualElement = this.visualElement,\n          projection = _this$visualElement.projection,\n          animationState = _this$visualElement.animationState;\n\n      if (projection) {\n        projection.isAnimationBlocked = false;\n      }\n\n      this.panSession && this.panSession.end();\n      this.panSession = undefined;\n\n      var _this$getProps6 = this.getProps(),\n          dragPropagation = _this$getProps6.dragPropagation;\n\n      if (!dragPropagation && this.openDragLock) {\n        this.openDragLock();\n        this.openDragLock = null;\n      }\n\n      animationState && animationState.setActive(\"whileDrag\", false);\n    }\n  }, {\n    key: \"updateAxis\",\n    value: function updateAxis(axis, _point, offset) {\n      var _this$getProps7 = this.getProps(),\n          drag = _this$getProps7.drag; // If we're not dragging this axis, do an early return.\n\n\n      if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n      var axisValue = this.getAxisMotionValue(axis);\n      var next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n      if (this.constraints && this.constraints[axis]) {\n        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n      }\n\n      axisValue.set(next);\n    }\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints() {\n      var _this2 = this;\n\n      var _a;\n\n      var _this$getProps8 = this.getProps(),\n          dragConstraints = _this$getProps8.dragConstraints,\n          dragElastic = _this$getProps8.dragElastic;\n\n      var layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n      var prevConstraints = this.constraints;\n\n      if (dragConstraints && isRefObject(dragConstraints)) {\n        if (!this.constraints) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      } else {\n        if (dragConstraints && layout) {\n          this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n        } else {\n          this.constraints = false;\n        }\n      }\n\n      this.elastic = resolveDragElastic(dragElastic);\n      /**\n       * If we're outputting to external MotionValues, we want to rebase the measured constraints\n       * from viewport-relative to component-relative.\n       */\n\n      if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n        eachAxis(function (axis) {\n          if (_this2.constraints !== false && _this2.getAxisMotionValue(axis)) {\n            _this2.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], _this2.constraints[axis]);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"resolveRefConstraints\",\n    value: function resolveRefConstraints() {\n      var _this$getProps9 = this.getProps(),\n          constraints = _this$getProps9.dragConstraints,\n          onMeasureDragConstraints = _this$getProps9.onMeasureDragConstraints;\n\n      if (!constraints || !isRefObject(constraints)) return false;\n      var constraintsElement = constraints.current;\n      invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n      var projection = this.visualElement.projection; // TODO\n\n      if (!projection || !projection.layout) return false;\n      var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n      var measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n      /**\n       * If there's an onMeasureDragConstraints listener we call it and\n       * if different constraints are returned, set constraints to that\n       */\n\n      if (onMeasureDragConstraints) {\n        var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n        this.hasMutatedConstraints = !!userConstraints;\n\n        if (userConstraints) {\n          measuredConstraints = convertBoundingBoxToBox(userConstraints);\n        }\n      }\n\n      return measuredConstraints;\n    }\n  }, {\n    key: \"startAnimation\",\n    value: function startAnimation(velocity) {\n      var _this3 = this;\n\n      var _this$getProps10 = this.getProps(),\n          drag = _this$getProps10.drag,\n          dragMomentum = _this$getProps10.dragMomentum,\n          dragElastic = _this$getProps10.dragElastic,\n          dragTransition = _this$getProps10.dragTransition,\n          dragSnapToOrigin = _this$getProps10.dragSnapToOrigin,\n          onDragTransitionEnd = _this$getProps10.onDragTransitionEnd;\n\n      var constraints = this.constraints || {};\n      var momentumAnimations = eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, _this3.currentDirection)) {\n          return;\n        }\n\n        var transition = constraints && constraints[axis] || {};\n        if (dragSnapToOrigin) transition = {\n          min: 0,\n          max: 0\n        };\n        /**\n         * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n         * of spring animations so we should look into adding a disable spring option to `inertia`.\n         * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n         * using the value of `dragElastic`.\n         */\n\n        var bounceStiffness = dragElastic ? 200 : 1000000;\n        var bounceDamping = dragElastic ? 40 : 10000000;\n\n        var inertia = _objectSpread(_objectSpread({\n          type: \"inertia\",\n          velocity: dragMomentum ? velocity[axis] : 0,\n          bounceStiffness: bounceStiffness,\n          bounceDamping: bounceDamping,\n          timeConstant: 750,\n          restDelta: 1,\n          restSpeed: 10\n        }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n        // component's animation controls which will handle interactions with whileHover (etc),\n        // otherwise we just have to animate the `MotionValue` itself.\n\n\n        return _this3.startAxisValueAnimation(axis, inertia);\n      }); // Run all animations and then resolve the new drag constraints.\n\n      return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n  }, {\n    key: \"startAxisValueAnimation\",\n    value: function startAxisValueAnimation(axis, transition) {\n      var axisValue = this.getAxisMotionValue(axis);\n      addValueToWillChange(this.visualElement, axis);\n      return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      var _this4 = this;\n\n      eachAxis(function (axis) {\n        return _this4.getAxisMotionValue(axis).stop();\n      });\n    }\n  }, {\n    key: \"pauseAnimation\",\n    value: function pauseAnimation() {\n      var _this5 = this;\n\n      eachAxis(function (axis) {\n        var _a;\n\n        return (_a = _this5.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();\n      });\n    }\n  }, {\n    key: \"getAnimationState\",\n    value: function getAnimationState(axis) {\n      var _a;\n\n      return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n\n  }, {\n    key: \"getAxisMotionValue\",\n    value: function getAxisMotionValue(axis) {\n      var dragKey = \"_drag\".concat(axis.toUpperCase());\n      var props = this.visualElement.getProps();\n      var externalMotionValue = props[dragKey];\n      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n  }, {\n    key: \"snapToCursor\",\n    value: function snapToCursor(point) {\n      var _this6 = this;\n\n      eachAxis(function (axis) {\n        var _this6$getProps = _this6.getProps(),\n            drag = _this6$getProps.drag; // If we're not dragging this axis, do an early return.\n\n\n        if (!shouldDrag(axis, drag, _this6.currentDirection)) return;\n        var projection = _this6.visualElement.projection;\n\n        var axisValue = _this6.getAxisMotionValue(axis);\n\n        if (projection && projection.layout) {\n          var _projection$layout$la = projection.layout.layoutBox[axis],\n              min = _projection$layout$la.min,\n              max = _projection$layout$la.max;\n          axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n        }\n      });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n\n  }, {\n    key: \"scalePositionWithinConstraints\",\n    value: function scalePositionWithinConstraints() {\n      var _this7 = this;\n\n      if (!this.visualElement.current) return;\n\n      var _this$getProps11 = this.getProps(),\n          drag = _this$getProps11.drag,\n          dragConstraints = _this$getProps11.dragConstraints;\n\n      var projection = this.visualElement.projection;\n      if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n      /**\n       * Stop current animations as there can be visual glitching if we try to do\n       * this mid-animation\n       */\n\n      this.stopAnimation();\n      /**\n       * Record the relative position of the dragged element relative to the\n       * constraints box and save as a progress value.\n       */\n\n      var boxProgress = {\n        x: 0,\n        y: 0\n      };\n      eachAxis(function (axis) {\n        var axisValue = _this7.getAxisMotionValue(axis);\n\n        if (axisValue && _this7.constraints !== false) {\n          var latest = axisValue.get();\n          boxProgress[axis] = calcOrigin({\n            min: latest,\n            max: latest\n          }, _this7.constraints[axis]);\n        }\n      });\n      /**\n       * Update the layout of this element and resolve the latest drag constraints\n       */\n\n      var _this$visualElement$g = this.visualElement.getProps(),\n          transformTemplate = _this$visualElement$g.transformTemplate;\n\n      this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n      this.resolveConstraints();\n      /**\n       * For each axis, calculate the current progress of the layout axis\n       * within the new constraints.\n       */\n\n      eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, null)) return;\n        /**\n         * Calculate a new transform based on the previous box progress\n         */\n\n        var axisValue = _this7.getAxisMotionValue(axis);\n\n        var _this7$constraints$ax = _this7.constraints[axis],\n            min = _this7$constraints$ax.min,\n            max = _this7$constraints$ax.max;\n        axisValue.set(mixNumber(min, max, boxProgress[axis]));\n      });\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this8 = this;\n\n      if (!this.visualElement.current) return;\n      elementDragControls.set(this.visualElement, this);\n      var element = this.visualElement.current;\n      /**\n       * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n       */\n\n      var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n        var _this8$getProps = _this8.getProps(),\n            drag = _this8$getProps.drag,\n            _this8$getProps$dragL = _this8$getProps.dragListener,\n            dragListener = _this8$getProps$dragL === void 0 ? true : _this8$getProps$dragL;\n\n        drag && dragListener && _this8.start(event);\n      });\n\n      var measureDragConstraints = function measureDragConstraints() {\n        var _this8$getProps2 = _this8.getProps(),\n            dragConstraints = _this8$getProps2.dragConstraints;\n\n        if (isRefObject(dragConstraints) && dragConstraints.current) {\n          _this8.constraints = _this8.resolveRefConstraints();\n        }\n      };\n\n      var projection = this.visualElement.projection;\n      var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n      if (projection && !projection.layout) {\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n      }\n\n      frame.read(measureDragConstraints);\n      /**\n       * Attach a window resize listener to scale the draggable target within its defined\n       * constraints as the window resizes.\n       */\n\n      var stopResizeListener = addDomEvent(window, \"resize\", function () {\n        return _this8.scalePositionWithinConstraints();\n      });\n      /**\n       * If the element's layout changes, calculate the delta and apply that to\n       * the drag gesture's origin point.\n       */\n\n      var stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", function (_ref2) {\n        var delta = _ref2.delta,\n            hasLayoutChanged = _ref2.hasLayoutChanged;\n\n        if (_this8.isDragging && hasLayoutChanged) {\n          eachAxis(function (axis) {\n            var motionValue = _this8.getAxisMotionValue(axis);\n\n            if (!motionValue) return;\n            _this8.originPoint[axis] += delta[axis].translate;\n            motionValue.set(motionValue.get() + delta[axis].translate);\n          });\n\n          _this8.visualElement.render();\n        }\n      });\n      return function () {\n        stopResizeListener();\n        stopPointerListener();\n        stopMeasureLayoutListener();\n        stopLayoutUpdateListener && stopLayoutUpdateListener();\n      };\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var props = this.visualElement.getProps();\n      var _props$drag = props.drag,\n          drag = _props$drag === void 0 ? false : _props$drag,\n          _props$dragDirectionL = props.dragDirectionLock,\n          dragDirectionLock = _props$dragDirectionL === void 0 ? false : _props$dragDirectionL,\n          _props$dragPropagatio = props.dragPropagation,\n          dragPropagation = _props$dragPropagatio === void 0 ? false : _props$dragPropagatio,\n          _props$dragConstraint = props.dragConstraints,\n          dragConstraints = _props$dragConstraint === void 0 ? false : _props$dragConstraint,\n          _props$dragElastic = props.dragElastic,\n          dragElastic = _props$dragElastic === void 0 ? defaultElastic : _props$dragElastic,\n          _props$dragMomentum = props.dragMomentum,\n          dragMomentum = _props$dragMomentum === void 0 ? true : _props$dragMomentum;\n      return _objectSpread(_objectSpread({}, props), {}, {\n        drag: drag,\n        dragDirectionLock: dragDirectionLock,\n        dragPropagation: dragPropagation,\n        dragConstraints: dragConstraints,\n        dragElastic: dragElastic,\n        dragMomentum: dragMomentum\n      });\n    }\n  }]);\n\n  return VisualElementDragControls;\n}();\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset) {\n  var lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"names":["invariant","setDragLock","PanSession","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mixNumber","percent","animateMotionValue","getContextWindow","addValueToWillChange","frame","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openDragLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","presenceContext","isPresent","onSessionStart","event","getProps","dragSnapToOrigin","pauseAnimation","stopAnimation","point","onStart","info","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","length","parseFloat","postRender","animationState","setActive","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","resumeAnimation","_a","getAnimationState","animation","play","panSession","transformPagePoint","getTransformPagePoint","contextWindow","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","measure","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","start","pause","state","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","read","stopResizeListener","window","scalePositionWithinConstraints","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","direction","lockThreshold","Math","abs"],"mappings":"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","sourcesContent":["import { invariant } from 'motion-utils';\nimport { setDragLock } from 'motion-dom';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"]},"metadata":{},"sourceType":"module"}