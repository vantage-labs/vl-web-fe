{"ast":null,"code":"\"use client\"; // packages/react/radio-group/src/RadioGroup.tsx\n\nimport * as React2 from \"react\";\nimport { composeEventHandlers as composeEventHandlers2 } from \"@radix-ui/primitive\";\nimport { useComposedRefs as useComposedRefs2 } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope as createContextScope2 } from \"@radix-ui/react-context\";\nimport { Primitive as Primitive2 } from \"@radix-ui/react-primitive\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useDirection } from \"@radix-ui/react-direction\"; // packages/react/radio-group/src/Radio.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar RADIO_NAME = \"Radio\";\nvar [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\nvar [RadioProvider, useRadioContext] = createRadioContext(RADIO_NAME);\nvar Radio = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadio,\n    name,\n    checked = false,\n    required,\n    disabled,\n    value = \"on\",\n    onCheck,\n    form,\n    ...radioProps\n  } = props;\n  const [button, setButton] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setButton(node));\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = button ? form || !!button.closest(\"form\") : true;\n  return /* @__PURE__ */jsxs(RadioProvider, {\n    scope: __scopeRadio,\n    checked,\n    disabled,\n    children: [/* @__PURE__ */jsx(Primitive.button, {\n      type: \"button\",\n      role: \"radio\",\n      \"aria-checked\": checked,\n      \"data-state\": getState(checked),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      value,\n      ...radioProps,\n      ref: composedRefs,\n      onClick: composeEventHandlers(props.onClick, event => {\n        if (!checked) onCheck?.();\n\n        if (isFormControl) {\n          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n          if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n        }\n      })\n    }), isFormControl && /* @__PURE__ */jsx(BubbleInput, {\n      control: button,\n      bubbles: !hasConsumerStoppedPropagationRef.current,\n      name,\n      value,\n      checked,\n      required,\n      disabled,\n      form,\n      style: {\n        transform: \"translateX(-100%)\"\n      }\n    })]\n  });\n});\nRadio.displayName = RADIO_NAME;\nvar INDICATOR_NAME = \"RadioIndicator\";\nvar RadioIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadio,\n    forceMount,\n    ...indicatorProps\n  } = props;\n  const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.checked,\n    children: /* @__PURE__ */jsx(Primitive.span, {\n      \"data-state\": getState(context.checked),\n      \"data-disabled\": context.disabled ? \"\" : void 0,\n      ...indicatorProps,\n      ref: forwardedRef\n    })\n  });\n});\nRadioIndicator.displayName = INDICATOR_NAME;\n\nvar BubbleInput = props => {\n  const {\n    control,\n    checked,\n    bubbles = true,\n    ...inputProps\n  } = props;\n  const ref = React.useRef(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", {\n        bubbles\n      });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  return /* @__PURE__ */jsx(\"input\", {\n    type: \"radio\",\n    \"aria-hidden\": true,\n    defaultChecked: checked,\n    ...inputProps,\n    tabIndex: -1,\n    ref,\n    style: { ...props.style,\n      ...controlSize,\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      opacity: 0,\n      margin: 0\n    }\n  });\n};\n\nfunction getState(checked) {\n  return checked ? \"checked\" : \"unchecked\";\n} // packages/react/radio-group/src/RadioGroup.tsx\n\n\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar ARROW_KEYS = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\nvar RADIO_GROUP_NAME = \"RadioGroup\";\nvar [createRadioGroupContext, createRadioGroupScope] = createContextScope2(RADIO_GROUP_NAME, [createRovingFocusGroupScope, createRadioScope]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar useRadioScope = createRadioScope();\nvar [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME);\nvar RadioGroup = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    name,\n    defaultValue,\n    value: valueProp,\n    required = false,\n    disabled = false,\n    orientation,\n    dir,\n    loop = true,\n    onValueChange,\n    ...groupProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n  const direction = useDirection(dir);\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  return /* @__PURE__ */jsx2(RadioGroupProvider, {\n    scope: __scopeRadioGroup,\n    name,\n    required,\n    disabled,\n    value,\n    onValueChange: setValue,\n    children: /* @__PURE__ */jsx2(RovingFocusGroup.Root, {\n      asChild: true,\n      ...rovingFocusGroupScope,\n      orientation,\n      dir: direction,\n      loop,\n      children: /* @__PURE__ */jsx2(Primitive2.div, {\n        role: \"radiogroup\",\n        \"aria-required\": required,\n        \"aria-orientation\": orientation,\n        \"data-disabled\": disabled ? \"\" : void 0,\n        dir: direction,\n        ...groupProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nRadioGroup.displayName = RADIO_GROUP_NAME;\nvar ITEM_NAME = \"RadioGroupItem\";\nvar RadioGroupItem = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    disabled,\n    ...itemProps\n  } = props;\n  const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n  const isDisabled = context.disabled || disabled;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n  const radioScope = useRadioScope(__scopeRadioGroup);\n  const ref = React2.useRef(null);\n  const composedRefs = useComposedRefs2(forwardedRef, ref);\n  const checked = context.value === itemProps.value;\n  const isArrowKeyPressedRef = React2.useRef(false);\n  React2.useEffect(() => {\n    const handleKeyDown = event => {\n      if (ARROW_KEYS.includes(event.key)) {\n        isArrowKeyPressedRef.current = true;\n      }\n    };\n\n    const handleKeyUp = () => isArrowKeyPressedRef.current = false;\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    document.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      document.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n  return /* @__PURE__ */jsx2(RovingFocusGroup.Item, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    focusable: !isDisabled,\n    active: checked,\n    children: /* @__PURE__ */jsx2(Radio, {\n      disabled: isDisabled,\n      required: context.required,\n      checked,\n      ...radioScope,\n      ...itemProps,\n      name: context.name,\n      ref: composedRefs,\n      onCheck: () => context.onValueChange(itemProps.value),\n      onKeyDown: composeEventHandlers2(event => {\n        if (event.key === \"Enter\") event.preventDefault();\n      }),\n      onFocus: composeEventHandlers2(itemProps.onFocus, () => {\n        if (isArrowKeyPressedRef.current) ref.current?.click();\n      })\n    })\n  });\n});\nRadioGroupItem.displayName = ITEM_NAME;\nvar INDICATOR_NAME2 = \"RadioGroupIndicator\";\nvar RadioGroupIndicator = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    ...indicatorProps\n  } = props;\n  const radioScope = useRadioScope(__scopeRadioGroup);\n  return /* @__PURE__ */jsx2(RadioIndicator, { ...radioScope,\n    ...indicatorProps,\n    ref: forwardedRef\n  });\n});\nRadioGroupIndicator.displayName = INDICATOR_NAME2;\nvar Root2 = RadioGroup;\nvar Item2 = RadioGroupItem;\nvar Indicator = RadioGroupIndicator;\nexport { Indicator, Item2 as Item, RadioGroup, RadioGroupIndicator, RadioGroupItem, Root2 as Root, createRadioGroupScope };","map":{"version":3,"mappings":"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","names":["React","composeEventHandlers","useComposedRefs","createContextScope","Primitive","RovingFocusGroup","createRovingFocusGroupScope","useControllableState","useDirection","useSize","usePrevious","Presence","jsx","RADIO_NAME","createRadioContext","createRadioScope","RadioProvider","useRadioContext","Radio","props","forwardedRef","__scopeRadio","name","checked","required","disabled","value","onCheck","form","radioProps","button","setButton","composedRefs","node","hasConsumerStoppedPropagationRef","isFormControl","closest","scope","children","type","role","getState","ref","onClick","event","current","isPropagationStopped","stopPropagation","BubbleInput","control","bubbles","style","transform","displayName","INDICATOR_NAME","RadioIndicator","forceMount","indicatorProps","context","present","span","inputProps","prevChecked","controlSize","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","setChecked","set","Event","call","dispatchEvent","defaultChecked","tabIndex","position","pointerEvents","opacity","margin","ARROW_KEYS","RADIO_GROUP_NAME","createRadioGroupContext","createRadioGroupScope","useRovingFocusGroupScope","useRadioScope","RadioGroupProvider","useRadioGroupContext","RadioGroup","React2","__scopeRadioGroup","defaultValue","valueProp","orientation","dir","loop","onValueChange","groupProps","rovingFocusGroupScope","direction","setValue","prop","defaultProp","onChange","asChild","div","ITEM_NAME","RadioGroupItem","itemProps","isDisabled","radioScope","isArrowKeyPressedRef","handleKeyDown","includes","key","handleKeyUp","document","addEventListener","removeEventListener","focusable","active","onKeyDown","preventDefault","onFocus","click","RadioGroupIndicator","Root","Item","Indicator"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-radio-group/src/RadioGroup.tsx","/home/bahari/vl-web-fe/node_modules/@radix-ui/react-radio-group/src/Radio.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Radio, RadioIndicator, createRadioScope } from './Radio';\n\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\nconst RADIO_GROUP_NAME = 'RadioGroup';\n\ntype ScopedProps<P> = P & { __scopeRadioGroup?: Scope };\nconst [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME, [\n  createRovingFocusGroupScope,\n  createRadioScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useRadioScope = createRadioScope();\n\ntype RadioGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value?: string;\n  onValueChange(value: string): void;\n};\n\nconst [RadioGroupProvider, useRadioGroupContext] =\n  createRadioGroupContext<RadioGroupContextValue>(RADIO_GROUP_NAME);\n\ntype RadioGroupElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RadioGroupProps extends PrimitiveDivProps {\n  name?: RadioGroupContextValue['name'];\n  required?: React.ComponentPropsWithoutRef<typeof Radio>['required'];\n  disabled?: React.ComponentPropsWithoutRef<typeof Radio>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string;\n  value?: RadioGroupContextValue['value'];\n  onValueChange?: RadioGroupContextValue['onValueChange'];\n}\n\nconst RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props: ScopedProps<RadioGroupProps>, forwardedRef) => {\n    const {\n      __scopeRadioGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <RadioGroupProvider\n        scope={__scopeRadioGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onValueChange={setValue}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"radiogroup\"\n            aria-required={required}\n            aria-orientation={orientation}\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </RadioGroupProvider>\n    );\n  }\n);\n\nRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RadioGroupItem';\n\ntype RadioGroupItemElement = React.ElementRef<typeof Radio>;\ntype RadioProps = React.ComponentPropsWithoutRef<typeof Radio>;\ninterface RadioGroupItemProps extends Omit<RadioProps, 'onCheck' | 'name'> {\n  value: string;\n}\n\nconst RadioGroupItem = React.forwardRef<RadioGroupItemElement, RadioGroupItemProps>(\n  (props: ScopedProps<RadioGroupItemProps>, forwardedRef) => {\n    const { __scopeRadioGroup, disabled, ...itemProps } = props;\n    const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    const ref = React.useRef<React.ElementRef<typeof Radio>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value === itemProps.value;\n    const isArrowKeyPressedRef = React.useRef(false);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (ARROW_KEYS.includes(event.key)) {\n          isArrowKeyPressedRef.current = true;\n        }\n      };\n      const handleKeyUp = () => (isArrowKeyPressedRef.current = false);\n      document.addEventListener('keydown', handleKeyDown);\n      document.addEventListener('keyup', handleKeyUp);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n        document.removeEventListener('keyup', handleKeyUp);\n      };\n    }, []);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <Radio\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...radioScope}\n          {...itemProps}\n          name={context.name}\n          ref={composedRefs}\n          onCheck={() => context.onValueChange(itemProps.value)}\n          onKeyDown={composeEventHandlers((event) => {\n            // According to WAI ARIA, radio groups don't activate items on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onFocus={composeEventHandlers(itemProps.onFocus, () => {\n            /**\n             * Our `RovingFocusGroup` will focus the radio when navigating with arrow keys\n             * and we need to \"check\" it in that case. We click it to \"check\" it (instead\n             * of updating `context.value`) so that the radio change event fires.\n             */\n            if (isArrowKeyPressedRef.current) ref.current?.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nRadioGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioGroupIndicator';\n\ntype RadioGroupIndicatorElement = React.ElementRef<typeof RadioIndicator>;\ntype RadioIndicatorProps = React.ComponentPropsWithoutRef<typeof RadioIndicator>;\ninterface RadioGroupIndicatorProps extends RadioIndicatorProps {}\n\nconst RadioGroupIndicator = React.forwardRef<RadioGroupIndicatorElement, RadioGroupIndicatorProps>(\n  (props: ScopedProps<RadioGroupIndicatorProps>, forwardedRef) => {\n    const { __scopeRadioGroup, ...indicatorProps } = props;\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    return <RadioIndicator {...radioScope} {...indicatorProps} ref={forwardedRef} />;\n  }\n);\n\nRadioGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = RadioGroup;\nconst Item = RadioGroupItem;\nconst Indicator = RadioGroupIndicator;\n\nexport {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps };\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Radio\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_NAME = 'Radio';\n\ntype ScopedProps<P> = P & { __scopeRadio?: Scope };\nconst [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\n\ntype RadioContextValue = { checked: boolean; disabled?: boolean };\nconst [RadioProvider, useRadioContext] = createRadioContext<RadioContextValue>(RADIO_NAME);\n\ntype RadioElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface RadioProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  required?: boolean;\n  onCheck?(): void;\n}\n\nconst Radio = React.forwardRef<RadioElement, RadioProps>(\n  (props: ScopedProps<RadioProps>, forwardedRef) => {\n    const {\n      __scopeRadio,\n      name,\n      checked = false,\n      required,\n      disabled,\n      value = 'on',\n      onCheck,\n      form,\n      ...radioProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? form || !!button.closest('form') : true;\n\n    return (\n      <RadioProvider scope={__scopeRadio} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"radio\"\n          aria-checked={checked}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...radioProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            // radios cannot be unchecked so we only communicate a checked state\n            if (!checked) onCheck?.();\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if radio is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect radio updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            form={form}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </RadioProvider>\n    );\n  }\n);\n\nRadio.displayName = RADIO_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioIndicator';\n\ntype RadioIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\nexport interface RadioIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst RadioIndicator = React.forwardRef<RadioIndicatorElement, RadioIndicatorProps>(\n  (props: ScopedProps<RadioIndicatorProps>, forwardedRef) => {\n    const { __scopeRadio, forceMount, ...indicatorProps } = props;\n    const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n    return (\n      <Presence present={forceMount || context.checked}>\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nRadioIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = React.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"radio\"\n      aria-hidden\n      defaultChecked={checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createRadioScope,\n  //\n  Radio,\n  RadioIndicator,\n};\nexport type { RadioProps };\n"]},"metadata":{},"sourceType":"module"}