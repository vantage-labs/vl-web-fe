{"ast":null,"code":"// packages/react/use-size/src/useSize.tsx\nimport * as React from \"react\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\n\nfunction useSize(element) {\n  const [size, setSize] = React.useState(void 0);\n  useLayoutEffect(() => {\n    if (element) {\n      setSize({\n        width: element.offsetWidth,\n        height: element.offsetHeight\n      });\n      const resizeObserver = new ResizeObserver(entries => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width;\n        let height;\n\n        if (\"borderBoxSize\" in entry) {\n          const borderSizeEntry = entry[\"borderBoxSize\"];\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize[\"inlineSize\"];\n          height = borderSize[\"blockSize\"];\n        } else {\n          width = element.offsetWidth;\n          height = element.offsetHeight;\n        }\n\n        setSize({\n          width,\n          height\n        });\n      });\n      resizeObserver.observe(element, {\n        box: \"border-box\"\n      });\n      return () => resizeObserver.unobserve(element);\n    } else {\n      setSize(void 0);\n    }\n  }, [element]);\n  return size;\n}\n\nexport { useSize };","map":{"version":3,"mappings":";AAEA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,mCAAhC;;AAEA,SAASC,OAAT,CAAiBC,OAAjB,EAA8C;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAwBL,eAAwD,MAAxD,CAA9B;AAEAC,kBAAgB,MAAM;AACpB,QAAIE,OAAJ,EAAa;AAEXE,cAAQ;AAAEC,eAAOH,QAAQI,WAAjB;AAA8BC,gBAAQL,QAAQM;AAA9C,OAAR;AAEA,YAAMC,iBAAiB,IAAIC,cAAJ,CAAoBC,OAAD,IAAa;AACrD,YAAI,CAACC,MAAMC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC3B;AACF;;AAIA,YAAI,CAACA,QAAQG,MAAb,EAAqB;AACnB;AACF;;AAEA,cAAMC,QAAQJ,QAAQ,CAAR,CAAd;AACA,YAAIN,KAAJ;AACA,YAAIE,MAAJ;;AAEA,YAAI,mBAAmBQ,KAAvB,EAA8B;AAC5B,gBAAMC,kBAAkBD,MAAM,eAAN,CAAxB;AAEA,gBAAME,aAAaL,MAAMC,OAAN,CAAcG,eAAd,IAAiCA,gBAAgB,CAAhB,CAAjC,GAAsDA,eAAzE;AACAX,kBAAQY,WAAW,YAAX,CAAR;AACAV,mBAASU,WAAW,WAAX,CAAT;AACF,SANA,MAMO;AAGLZ,kBAAQH,QAAQI,WAAhB;AACAC,mBAASL,QAAQM,YAAjB;AACF;;AAEAJ,gBAAQ;AAAEC,eAAF;AAASE;AAAT,SAAR;AACD,OA7BsB,CAAvB;AA+BAE,qBAAeS,OAAf,CAAuBhB,OAAvB,EAAgC;AAAEiB,aAAK;AAAP,OAAhC;AAEA,aAAO,MAAMV,eAAeW,SAAf,CAAyBlB,OAAzB,CAAb;AACF,KAtCA,MAsCO;AAGLE,cAAQ,MAAR;AACF;AACF,GA5CA,EA4CG,CAACF,OAAD,CA5CH;AA8CA,SAAOC,IAAP;AACF","names":["React","useLayoutEffect","useSize","element","size","setSize","width","offsetWidth","height","offsetHeight","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","borderSizeEntry","borderSize","observe","box","unobserve"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nfunction useSize(element: HTMLElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  useLayoutEffect(() => {\n    if (element) {\n      // provide size as early as possible\n      setSize({ width: element.offsetWidth, height: element.offsetHeight });\n\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate it ourselves to get the correct border box.\n          width = element.offsetWidth;\n          height = element.offsetHeight;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => resizeObserver.unobserve(element);\n    } else {\n      // We only want to reset to `undefined` when the element becomes `null`,\n      // not if it changes to another element.\n      setSize(undefined);\n    }\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"]},"metadata":{},"sourceType":"module"}