{"ast":null,"code":"import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n  for (var key in source) {\n    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nfunction useInitialMotionValues(_ref, visualState) {\n  var transformTemplate = _ref.transformTemplate;\n  return useMemo(function () {\n    var state = createHtmlRenderState();\n    buildHTMLStyles(state, visualState, transformTemplate);\n    return Object.assign({}, state.vars, state.style);\n  }, [visualState]);\n}\n\nfunction useStyle(props, visualState) {\n  var styleProp = props.style || {};\n  var style = {};\n  /**\n   * Copy non-Motion Values straight into style\n   */\n\n  copyRawValuesOnly(style, styleProp, props);\n  Object.assign(style, useInitialMotionValues(props, visualState));\n  return style;\n}\n\nfunction useHTMLProps(props, visualState) {\n  // The `any` isn't ideal but it is the type of createElement props argument\n  var htmlProps = {};\n  var style = useStyle(props, visualState);\n\n  if (props.drag && props.dragListener !== false) {\n    // Disable the ghost element when a user drags\n    htmlProps.draggable = false; // Disable text selection\n\n    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\"; // Disable scrolling on the draggable direction\n\n    style.touchAction = props.drag === true ? \"none\" : \"pan-\".concat(props.drag === \"x\" ? \"y\" : \"x\");\n  }\n\n  if (props.tabIndex === undefined && (props.onTap || props.onTapStart || props.whileTap)) {\n    htmlProps.tabIndex = 0;\n  }\n\n  htmlProps.style = style;\n  return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/html/use-props.mjs"],"names":["useMemo","isForcedMotionValue","isMotionValue","buildHTMLStyles","createHtmlRenderState","copyRawValuesOnly","target","source","props","key","useInitialMotionValues","visualState","transformTemplate","state","Object","assign","vars","style","useStyle","styleProp","useHTMLProps","htmlProps","drag","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","undefined","onTap","onTapStart","whileTap"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,QAAoC,+CAApC;AACA,SAASC,aAAT,QAA8B,uCAA9B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,qBAAT,QAAsC,iCAAtC;;AAEA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,KAA3C,EAAkD;AAC9C,OAAK,IAAMC,GAAX,IAAkBF,MAAlB,EAA0B;AACtB,QAAI,CAACL,aAAa,CAACK,MAAM,CAACE,GAAD,CAAP,CAAd,IAA+B,CAACR,mBAAmB,CAACQ,GAAD,EAAMD,KAAN,CAAvD,EAAqE;AACjEF,MAAAA,MAAM,CAACG,GAAD,CAAN,GAAcF,MAAM,CAACE,GAAD,CAApB;AACH;AACJ;AACJ;;AACD,SAASC,sBAAT,OAAuDC,WAAvD,EAAoE;AAAA,MAAlCC,iBAAkC,QAAlCA,iBAAkC;AAChE,SAAOZ,OAAO,CAAC,YAAM;AACjB,QAAMa,KAAK,GAAGT,qBAAqB,EAAnC;AACAD,IAAAA,eAAe,CAACU,KAAD,EAAQF,WAAR,EAAqBC,iBAArB,CAAf;AACA,WAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAK,CAACG,IAAxB,EAA8BH,KAAK,CAACI,KAApC,CAAP;AACH,GAJa,EAIX,CAACN,WAAD,CAJW,CAAd;AAKH;;AACD,SAASO,QAAT,CAAkBV,KAAlB,EAAyBG,WAAzB,EAAsC;AAClC,MAAMQ,SAAS,GAAGX,KAAK,CAACS,KAAN,IAAe,EAAjC;AACA,MAAMA,KAAK,GAAG,EAAd;AACA;AACJ;AACA;;AACIZ,EAAAA,iBAAiB,CAACY,KAAD,EAAQE,SAAR,EAAmBX,KAAnB,CAAjB;AACAM,EAAAA,MAAM,CAACC,MAAP,CAAcE,KAAd,EAAqBP,sBAAsB,CAACF,KAAD,EAAQG,WAAR,CAA3C;AACA,SAAOM,KAAP;AACH;;AACD,SAASG,YAAT,CAAsBZ,KAAtB,EAA6BG,WAA7B,EAA0C;AACtC;AACA,MAAMU,SAAS,GAAG,EAAlB;AACA,MAAMJ,KAAK,GAAGC,QAAQ,CAACV,KAAD,EAAQG,WAAR,CAAtB;;AACA,MAAIH,KAAK,CAACc,IAAN,IAAcd,KAAK,CAACe,YAAN,KAAuB,KAAzC,EAAgD;AAC5C;AACAF,IAAAA,SAAS,CAACG,SAAV,GAAsB,KAAtB,CAF4C,CAG5C;;AACAP,IAAAA,KAAK,CAACQ,UAAN,GACIR,KAAK,CAACS,gBAAN,GACIT,KAAK,CAACU,kBAAN,GACI,MAHZ,CAJ4C,CAQ5C;;AACAV,IAAAA,KAAK,CAACW,WAAN,GACIpB,KAAK,CAACc,IAAN,KAAe,IAAf,GACM,MADN,iBAEad,KAAK,CAACc,IAAN,KAAe,GAAf,GAAqB,GAArB,GAA2B,GAFxC,CADJ;AAIH;;AACD,MAAId,KAAK,CAACqB,QAAN,KAAmBC,SAAnB,KACCtB,KAAK,CAACuB,KAAN,IAAevB,KAAK,CAACwB,UAArB,IAAmCxB,KAAK,CAACyB,QAD1C,CAAJ,EACyD;AACrDZ,IAAAA,SAAS,CAACQ,QAAV,GAAqB,CAArB;AACH;;AACDR,EAAAA,SAAS,CAACJ,KAAV,GAAkBA,KAAlB;AACA,SAAOI,SAAP;AACH;;AAED,SAAShB,iBAAT,EAA4Be,YAA5B","sourcesContent":["import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n"]},"metadata":{},"sourceType":"module"}