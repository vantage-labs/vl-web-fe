{"ast":null,"code":"import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nvar correctBoxShadow = {\n  correct: function correct(latest, _ref) {\n    var treeScale = _ref.treeScale,\n        projectionDelta = _ref.projectionDelta;\n    var original = latest;\n    var shadow = complex.parse(latest); // TODO: Doesn't support multiple shadows\n\n    if (shadow.length > 5) return original;\n    var template = complex.createTransformer(latest);\n    var offset = typeof shadow[0] !== \"number\" ? 1 : 0; // Calculate the overall context scale\n\n    var xScale = projectionDelta.x.scale * treeScale.x;\n    var yScale = projectionDelta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n\n    var averageScale = mixNumber(xScale, yScale, 0.5); // Blur\n\n    if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale; // Spread\n\n    if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n    return template(shadow);\n  }\n};\nexport { correctBoxShadow };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs"],"names":["mixNumber","complex","correctBoxShadow","correct","latest","treeScale","projectionDelta","original","shadow","parse","length","template","createTransformer","offset","xScale","x","scale","yScale","y","averageScale"],"mappings":"AAAA,SAASA,SAAT,QAA0B,4BAA1B;AACA,SAASC,OAAT,QAAwB,qCAAxB;AAEA,IAAMC,gBAAgB,GAAG;AACrBC,EAAAA,OAAO,EAAE,iBAACC,MAAD,QAA4C;AAAA,QAAjCC,SAAiC,QAAjCA,SAAiC;AAAA,QAAtBC,eAAsB,QAAtBA,eAAsB;AACjD,QAAMC,QAAQ,GAAGH,MAAjB;AACA,QAAMI,MAAM,GAAGP,OAAO,CAACQ,KAAR,CAAcL,MAAd,CAAf,CAFiD,CAGjD;;AACA,QAAII,MAAM,CAACE,MAAP,GAAgB,CAApB,EACI,OAAOH,QAAP;AACJ,QAAMI,QAAQ,GAAGV,OAAO,CAACW,iBAAR,CAA0BR,MAA1B,CAAjB;AACA,QAAMS,MAAM,GAAG,OAAOL,MAAM,CAAC,CAAD,CAAb,KAAqB,QAArB,GAAgC,CAAhC,GAAoC,CAAnD,CAPiD,CAQjD;;AACA,QAAMM,MAAM,GAAGR,eAAe,CAACS,CAAhB,CAAkBC,KAAlB,GAA0BX,SAAS,CAACU,CAAnD;AACA,QAAME,MAAM,GAAGX,eAAe,CAACY,CAAhB,CAAkBF,KAAlB,GAA0BX,SAAS,CAACa,CAAnD;AACAV,IAAAA,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBC,MAAtB;AACAN,IAAAA,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBI,MAAtB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,QAAME,YAAY,GAAGnB,SAAS,CAACc,MAAD,EAASG,MAAT,EAAiB,GAAjB,CAA9B,CAnBiD,CAoBjD;;AACA,QAAI,OAAOT,MAAM,CAAC,IAAIK,MAAL,CAAb,KAA8B,QAAlC,EACIL,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBM,YAAtB,CAtB6C,CAuBjD;;AACA,QAAI,OAAOX,MAAM,CAAC,IAAIK,MAAL,CAAb,KAA8B,QAAlC,EACIL,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBM,YAAtB;AACJ,WAAOR,QAAQ,CAACH,MAAD,CAAf;AACH;AA5BoB,CAAzB;AA+BA,SAASN,gBAAT","sourcesContent":["import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n"]},"metadata":{},"sourceType":"module"}