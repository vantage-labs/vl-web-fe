{"ast":null,"code":"import _classCallCheck from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { press } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n  var props = node.props;\n\n  if (node.animationState && props.whileTap) {\n    node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n  }\n\n  var eventName = \"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle);\n  var callback = props[eventName];\n\n  if (callback) {\n    frame.postRender(function () {\n      return callback(event, extractEventInfo(event));\n    });\n  }\n}\n\nvar PressGesture = /*#__PURE__*/function (_Feature) {\n  _inherits(PressGesture, _Feature);\n\n  var _super = _createSuper(PressGesture);\n\n  function PressGesture() {\n    _classCallCheck(this, PressGesture);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PressGesture, [{\n    key: \"mount\",\n    value: function mount() {\n      var _this = this;\n\n      var current = this.node.current;\n      if (!current) return;\n      this.unmount = press(current, function (startEvent) {\n        handlePressEvent(_this.node, startEvent, \"Start\");\n        return function (endEvent, _ref) {\n          var success = _ref.success;\n          return handlePressEvent(_this.node, endEvent, success ? \"End\" : \"Cancel\");\n        };\n      }, {\n        useGlobalTarget: this.node.props.globalTapTarget\n      });\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n\n  return PressGesture;\n}(Feature);\n\nexport { PressGesture };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/gestures/press.mjs"],"names":["Feature","press","extractEventInfo","frame","handlePressEvent","node","event","lifecycle","props","animationState","whileTap","setActive","eventName","callback","postRender","PressGesture","current","unmount","startEvent","endEvent","success","useGlobalTarget","globalTapTarget"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,gCAAxB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,KAAT,QAAsB,wBAAtB;;AAEA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuCC,SAAvC,EAAkD;AAC9C,MAAQC,KAAR,GAAkBH,IAAlB,CAAQG,KAAR;;AACA,MAAIH,IAAI,CAACI,cAAL,IAAuBD,KAAK,CAACE,QAAjC,EAA2C;AACvCL,IAAAA,IAAI,CAACI,cAAL,CAAoBE,SAApB,CAA8B,UAA9B,EAA0CJ,SAAS,KAAK,OAAxD;AACH;;AACD,MAAMK,SAAS,GAAI,WAAWL,SAAS,KAAK,KAAd,GAAsB,EAAtB,GAA2BA,SAAtC,CAAnB;AACA,MAAMM,QAAQ,GAAGL,KAAK,CAACI,SAAD,CAAtB;;AACA,MAAIC,QAAJ,EAAc;AACVV,IAAAA,KAAK,CAACW,UAAN,CAAiB;AAAA,aAAMD,QAAQ,CAACP,KAAD,EAAQJ,gBAAgB,CAACI,KAAD,CAAxB,CAAd;AAAA,KAAjB;AACH;AACJ;;IACKS,Y;;;;;;;;;;;;;WACF,iBAAQ;AAAA;;AACJ,UAAQC,OAAR,GAAoB,KAAKX,IAAzB,CAAQW,OAAR;AACA,UAAI,CAACA,OAAL,EACI;AACJ,WAAKC,OAAL,GAAehB,KAAK,CAACe,OAAD,EAAU,UAACE,UAAD,EAAgB;AAC1Cd,QAAAA,gBAAgB,CAAC,KAAI,CAACC,IAAN,EAAYa,UAAZ,EAAwB,OAAxB,CAAhB;AACA,eAAO,UAACC,QAAD;AAAA,cAAaC,OAAb,QAAaA,OAAb;AAAA,iBAA2BhB,gBAAgB,CAAC,KAAI,CAACC,IAAN,EAAYc,QAAZ,EAAsBC,OAAO,GAAG,KAAH,GAAW,QAAxC,CAA3C;AAAA,SAAP;AACH,OAHmB,EAGjB;AAAEC,QAAAA,eAAe,EAAE,KAAKhB,IAAL,CAAUG,KAAV,CAAgBc;AAAnC,OAHiB,CAApB;AAIH;;;WACD,mBAAU,CAAG;;;;EAVUtB,O;;AAa3B,SAASe,YAAT","sourcesContent":["import { Feature } from '../motion/features/Feature.mjs';\nimport { press } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n"]},"metadata":{},"sourceType":"module"}