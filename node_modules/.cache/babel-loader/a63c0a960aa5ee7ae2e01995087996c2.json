{"ast":null,"code":"import { floatRegex } from '../utils/float-regex.mjs';\nimport { isNullish } from '../utils/is-nullish.mjs';\nimport { singleColorRegex } from '../utils/single-color-regex.mjs';\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\n\nconst isColorString = (type, testProp) => v => {\n  return Boolean(typeof v === \"string\" && singleColorRegex.test(v) && v.startsWith(type) || testProp && !isNullish(v) && Object.prototype.hasOwnProperty.call(v, testProp));\n};\n\nconst splitColor = (aName, bName, cName) => v => {\n  if (typeof v !== \"string\") return v;\n  const [a, b, c, alpha] = v.match(floatRegex);\n  return {\n    [aName]: parseFloat(a),\n    [bName]: parseFloat(b),\n    [cName]: parseFloat(c),\n    alpha: alpha !== undefined ? parseFloat(alpha) : 1\n  };\n};\n\nexport { isColorString, splitColor };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/value/types/color/utils.mjs"],"names":["floatRegex","isNullish","singleColorRegex","isColorString","type","testProp","v","Boolean","test","startsWith","Object","prototype","hasOwnProperty","call","splitColor","aName","bName","cName","a","b","c","alpha","match","parseFloat","undefined"],"mappings":"AAAA,SAASA,UAAT,QAA2B,0BAA3B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAqBC,CAAD,IAAO;AAC7C,SAAOC,OAAO,CAAE,OAAOD,CAAP,KAAa,QAAb,IACZJ,gBAAgB,CAACM,IAAjB,CAAsBF,CAAtB,CADY,IAEZA,CAAC,CAACG,UAAF,CAAaL,IAAb,CAFW,IAGVC,QAAQ,IACL,CAACJ,SAAS,CAACK,CAAD,CADb,IAEGI,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,CAArC,EAAwCD,QAAxC,CALM,CAAd;AAMH,CAPD;;AAQA,MAAMS,UAAU,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,KAA0BX,CAAD,IAAO;AAC/C,MAAI,OAAOA,CAAP,KAAa,QAAjB,EACI,OAAOA,CAAP;AACJ,QAAM,CAACY,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,KAAV,IAAmBf,CAAC,CAACgB,KAAF,CAAQtB,UAAR,CAAzB;AACA,SAAO;AACH,KAACe,KAAD,GAASQ,UAAU,CAACL,CAAD,CADhB;AAEH,KAACF,KAAD,GAASO,UAAU,CAACJ,CAAD,CAFhB;AAGH,KAACF,KAAD,GAASM,UAAU,CAACH,CAAD,CAHhB;AAIHC,IAAAA,KAAK,EAAEA,KAAK,KAAKG,SAAV,GAAsBD,UAAU,CAACF,KAAD,CAAhC,GAA0C;AAJ9C,GAAP;AAMH,CAVD;;AAYA,SAASlB,aAAT,EAAwBW,UAAxB","sourcesContent":["import { floatRegex } from '../utils/float-regex.mjs';\nimport { isNullish } from '../utils/is-nullish.mjs';\nimport { singleColorRegex } from '../utils/single-color-regex.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((typeof v === \"string\" &&\n        singleColorRegex.test(v) &&\n        v.startsWith(type)) ||\n        (testProp &&\n            !isNullish(v) &&\n            Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (typeof v !== \"string\")\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n"]},"metadata":{},"sourceType":"module"}