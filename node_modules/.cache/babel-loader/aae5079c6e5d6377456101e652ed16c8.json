{"ast":null,"code":"import { millisecondsToSeconds } from 'motion-utils';\nimport { calcGeneratorDuration, maxGeneratorDuration } from './calc-duration.mjs';\n/**\n * Create a progress => progress easing function from a generator.\n */\n\nfunction createGeneratorEasing(options) {\n  let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  let createGenerator = arguments.length > 2 ? arguments[2] : undefined;\n  const generator = createGenerator({ ...options,\n    keyframes: [0, scale]\n  });\n  const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n  return {\n    type: \"keyframes\",\n    ease: progress => {\n      return generator.next(duration * progress).value / scale;\n    },\n    duration: millisecondsToSeconds(duration)\n  };\n}\n\nexport { createGeneratorEasing };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/motion-dom/dist/es/animation/generators/utils/create-generator-easing.mjs"],"names":["millisecondsToSeconds","calcGeneratorDuration","maxGeneratorDuration","createGeneratorEasing","options","scale","createGenerator","generator","keyframes","duration","Math","min","type","ease","progress","next","value"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,cAAtC;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,qBAA5D;AAEA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BC,OAA/B,EAAsE;AAAA,MAA9BC,KAA8B,uEAAtB,GAAsB;AAAA,MAAjBC,eAAiB;AAClE,QAAMC,SAAS,GAAGD,eAAe,CAAC,EAAE,GAAGF,OAAL;AAAcI,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAIH,KAAJ;AAAzB,GAAD,CAAjC;AACA,QAAMI,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASV,qBAAqB,CAACM,SAAD,CAA9B,EAA2CL,oBAA3C,CAAjB;AACA,SAAO;AACHU,IAAAA,IAAI,EAAE,WADH;AAEHC,IAAAA,IAAI,EAAGC,QAAD,IAAc;AAChB,aAAOP,SAAS,CAACQ,IAAV,CAAeN,QAAQ,GAAGK,QAA1B,EAAoCE,KAApC,GAA4CX,KAAnD;AACH,KAJE;AAKHI,IAAAA,QAAQ,EAAET,qBAAqB,CAACS,QAAD;AAL5B,GAAP;AAOH;;AAED,SAASN,qBAAT","sourcesContent":["import { millisecondsToSeconds } from 'motion-utils';\nimport { calcGeneratorDuration, maxGeneratorDuration } from './calc-duration.mjs';\n\n/**\n * Create a progress => progress easing function from a generator.\n */\nfunction createGeneratorEasing(options, scale = 100, createGenerator) {\n    const generator = createGenerator({ ...options, keyframes: [0, scale] });\n    const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n    return {\n        type: \"keyframes\",\n        ease: (progress) => {\n            return generator.next(duration * progress).value / scale;\n        },\n        duration: millisecondsToSeconds(duration),\n    };\n}\n\nexport { createGeneratorEasing };\n"]},"metadata":{},"sourceType":"module"}