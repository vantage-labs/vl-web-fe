{"ast":null,"code":"\"use client\"; // packages/react/form/src/Form.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { Label as LabelPrimitive } from \"@radix-ui/react-label\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Fragment, jsx } from \"react/jsx-runtime\";\nvar [createFormContext, createFormScope] = createContextScope(\"Form\");\nvar FORM_NAME = \"Form\";\nvar [ValidationProvider, useValidationContext] = createFormContext(FORM_NAME);\nvar [AriaDescriptionProvider, useAriaDescriptionContext] = createFormContext(FORM_NAME);\nvar Form = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    onClearServerErrors = () => {},\n    ...rootProps\n  } = props;\n  const formRef = React.useRef(null);\n  const composedFormRef = useComposedRefs(forwardedRef, formRef);\n  const [validityMap, setValidityMap] = React.useState({});\n  const getFieldValidity = React.useCallback(fieldName => validityMap[fieldName], [validityMap]);\n  const handleFieldValidityChange = React.useCallback((fieldName, validity) => setValidityMap(prevValidityMap => ({ ...prevValidityMap,\n    [fieldName]: { ...(prevValidityMap[fieldName] ?? {}),\n      ...validity\n    }\n  })), []);\n  const handleFieldValiditionClear = React.useCallback(fieldName => {\n    setValidityMap(prevValidityMap => ({ ...prevValidityMap,\n      [fieldName]: void 0\n    }));\n    setCustomErrorsMap(prevCustomErrorsMap => ({ ...prevCustomErrorsMap,\n      [fieldName]: {}\n    }));\n  }, []);\n  const [customMatcherEntriesMap, setCustomMatcherEntriesMap] = React.useState({});\n  const getFieldCustomMatcherEntries = React.useCallback(fieldName => customMatcherEntriesMap[fieldName] ?? [], [customMatcherEntriesMap]);\n  const handleFieldCustomMatcherAdd = React.useCallback((fieldName, matcherEntry) => {\n    setCustomMatcherEntriesMap(prevCustomMatcherEntriesMap => ({ ...prevCustomMatcherEntriesMap,\n      [fieldName]: [...(prevCustomMatcherEntriesMap[fieldName] ?? []), matcherEntry]\n    }));\n  }, []);\n  const handleFieldCustomMatcherRemove = React.useCallback((fieldName, matcherEntryId) => {\n    setCustomMatcherEntriesMap(prevCustomMatcherEntriesMap => ({ ...prevCustomMatcherEntriesMap,\n      [fieldName]: (prevCustomMatcherEntriesMap[fieldName] ?? []).filter(matcherEntry => matcherEntry.id !== matcherEntryId)\n    }));\n  }, []);\n  const [customErrorsMap, setCustomErrorsMap] = React.useState({});\n  const getFieldCustomErrors = React.useCallback(fieldName => customErrorsMap[fieldName] ?? {}, [customErrorsMap]);\n  const handleFieldCustomErrorsChange = React.useCallback((fieldName, customErrors) => {\n    setCustomErrorsMap(prevCustomErrorsMap => ({ ...prevCustomErrorsMap,\n      [fieldName]: { ...(prevCustomErrorsMap[fieldName] ?? {}),\n        ...customErrors\n      }\n    }));\n  }, []);\n  const [messageIdsMap, setMessageIdsMap] = React.useState({});\n  const handleFieldMessageIdAdd = React.useCallback((fieldName, id) => {\n    setMessageIdsMap(prevMessageIdsMap => {\n      const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]).add(id);\n      return { ...prevMessageIdsMap,\n        [fieldName]: fieldDescriptionIds\n      };\n    });\n  }, []);\n  const handleFieldMessageIdRemove = React.useCallback((fieldName, id) => {\n    setMessageIdsMap(prevMessageIdsMap => {\n      const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]);\n      fieldDescriptionIds.delete(id);\n      return { ...prevMessageIdsMap,\n        [fieldName]: fieldDescriptionIds\n      };\n    });\n  }, []);\n  const getFieldDescription = React.useCallback(fieldName => Array.from(messageIdsMap[fieldName] ?? []).join(\" \") || void 0, [messageIdsMap]);\n  return /* @__PURE__ */jsx(ValidationProvider, {\n    scope: __scopeForm,\n    getFieldValidity,\n    onFieldValidityChange: handleFieldValidityChange,\n    getFieldCustomMatcherEntries,\n    onFieldCustomMatcherEntryAdd: handleFieldCustomMatcherAdd,\n    onFieldCustomMatcherEntryRemove: handleFieldCustomMatcherRemove,\n    getFieldCustomErrors,\n    onFieldCustomErrorsChange: handleFieldCustomErrorsChange,\n    onFieldValiditionClear: handleFieldValiditionClear,\n    children: /* @__PURE__ */jsx(AriaDescriptionProvider, {\n      scope: __scopeForm,\n      onFieldMessageIdAdd: handleFieldMessageIdAdd,\n      onFieldMessageIdRemove: handleFieldMessageIdRemove,\n      getFieldDescription,\n      children: /* @__PURE__ */jsx(Primitive.form, { ...rootProps,\n        ref: composedFormRef,\n        onInvalid: composeEventHandlers(props.onInvalid, event => {\n          const firstInvalidControl = getFirstInvalidControl(event.currentTarget);\n          if (firstInvalidControl === event.target) firstInvalidControl.focus();\n          event.preventDefault();\n        }),\n        onSubmit: composeEventHandlers(props.onSubmit, onClearServerErrors, {\n          checkForDefaultPrevented: false\n        }),\n        onReset: composeEventHandlers(props.onReset, onClearServerErrors)\n      })\n    })\n  });\n});\nForm.displayName = FORM_NAME;\nvar FIELD_NAME = \"FormField\";\nvar [FormFieldProvider, useFormFieldContext] = createFormContext(FIELD_NAME);\nvar FormField = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    name,\n    serverInvalid = false,\n    ...fieldProps\n  } = props;\n  const validationContext = useValidationContext(FIELD_NAME, __scopeForm);\n  const validity = validationContext.getFieldValidity(name);\n  const id = useId();\n  return /* @__PURE__ */jsx(FormFieldProvider, {\n    scope: __scopeForm,\n    id,\n    name,\n    serverInvalid,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      \"data-valid\": getValidAttribute(validity, serverInvalid),\n      \"data-invalid\": getInvalidAttribute(validity, serverInvalid),\n      ...fieldProps,\n      ref: forwardedRef\n    })\n  });\n});\nFormField.displayName = FIELD_NAME;\nvar LABEL_NAME = \"FormLabel\";\nvar FormLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    ...labelProps\n  } = props;\n  const validationContext = useValidationContext(LABEL_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(LABEL_NAME, __scopeForm);\n  const htmlFor = labelProps.htmlFor || fieldContext.id;\n  const validity = validationContext.getFieldValidity(fieldContext.name);\n  return /* @__PURE__ */jsx(LabelPrimitive, {\n    \"data-valid\": getValidAttribute(validity, fieldContext.serverInvalid),\n    \"data-invalid\": getInvalidAttribute(validity, fieldContext.serverInvalid),\n    ...labelProps,\n    ref: forwardedRef,\n    htmlFor\n  });\n});\nFormLabel.displayName = LABEL_NAME;\nvar CONTROL_NAME = \"FormControl\";\nvar FormControl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    ...controlProps\n  } = props;\n  const validationContext = useValidationContext(CONTROL_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(CONTROL_NAME, __scopeForm);\n  const ariaDescriptionContext = useAriaDescriptionContext(CONTROL_NAME, __scopeForm);\n  const ref = React.useRef(null);\n  const composedRef = useComposedRefs(forwardedRef, ref);\n  const name = controlProps.name || fieldContext.name;\n  const id = controlProps.id || fieldContext.id;\n  const customMatcherEntries = validationContext.getFieldCustomMatcherEntries(name);\n  const {\n    onFieldValidityChange,\n    onFieldCustomErrorsChange,\n    onFieldValiditionClear\n  } = validationContext;\n  const updateControlValidity = React.useCallback(async control => {\n    if (hasBuiltInError(control.validity)) {\n      const controlValidity2 = validityStateToObject(control.validity);\n      onFieldValidityChange(name, controlValidity2);\n      return;\n    }\n\n    const formData = control.form ? new FormData(control.form) : new FormData();\n    const matcherArgs = [control.value, formData];\n    const syncCustomMatcherEntries = [];\n    const ayncCustomMatcherEntries = [];\n    customMatcherEntries.forEach(customMatcherEntry => {\n      if (isAsyncCustomMatcherEntry(customMatcherEntry, matcherArgs)) {\n        ayncCustomMatcherEntries.push(customMatcherEntry);\n      } else if (isSyncCustomMatcherEntry(customMatcherEntry)) {\n        syncCustomMatcherEntries.push(customMatcherEntry);\n      }\n    });\n    const syncCustomErrors = syncCustomMatcherEntries.map(_ref => {\n      let {\n        id: id2,\n        match\n      } = _ref;\n      return [id2, match(...matcherArgs)];\n    });\n    const syncCustomErrorsById = Object.fromEntries(syncCustomErrors);\n    const hasSyncCustomErrors = Object.values(syncCustomErrorsById).some(Boolean);\n    const hasCustomError = hasSyncCustomErrors;\n    control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : \"\");\n    const controlValidity = validityStateToObject(control.validity);\n    onFieldValidityChange(name, controlValidity);\n    onFieldCustomErrorsChange(name, syncCustomErrorsById);\n\n    if (!hasSyncCustomErrors && ayncCustomMatcherEntries.length > 0) {\n      const promisedCustomErrors = ayncCustomMatcherEntries.map(_ref2 => {\n        let {\n          id: id2,\n          match\n        } = _ref2;\n        return match(...matcherArgs).then(matches => [id2, matches]);\n      });\n      const asyncCustomErrors = await Promise.all(promisedCustomErrors);\n      const asyncCustomErrorsById = Object.fromEntries(asyncCustomErrors);\n      const hasAsyncCustomErrors = Object.values(asyncCustomErrorsById).some(Boolean);\n      const hasCustomError2 = hasAsyncCustomErrors;\n      control.setCustomValidity(hasCustomError2 ? DEFAULT_INVALID_MESSAGE : \"\");\n      const controlValidity2 = validityStateToObject(control.validity);\n      onFieldValidityChange(name, controlValidity2);\n      onFieldCustomErrorsChange(name, asyncCustomErrorsById);\n    }\n  }, [customMatcherEntries, name, onFieldCustomErrorsChange, onFieldValidityChange]);\n  React.useEffect(() => {\n    const control = ref.current;\n\n    if (control) {\n      const handleChange = () => updateControlValidity(control);\n\n      control.addEventListener(\"change\", handleChange);\n      return () => control.removeEventListener(\"change\", handleChange);\n    }\n  }, [updateControlValidity]);\n  const resetControlValidity = React.useCallback(() => {\n    const control = ref.current;\n\n    if (control) {\n      control.setCustomValidity(\"\");\n      onFieldValiditionClear(name);\n    }\n  }, [name, onFieldValiditionClear]);\n  React.useEffect(() => {\n    const form = ref.current?.form;\n\n    if (form) {\n      form.addEventListener(\"reset\", resetControlValidity);\n      return () => form.removeEventListener(\"reset\", resetControlValidity);\n    }\n  }, [resetControlValidity]);\n  React.useEffect(() => {\n    const control = ref.current;\n    const form = control?.closest(\"form\");\n\n    if (form && fieldContext.serverInvalid) {\n      const firstInvalidControl = getFirstInvalidControl(form);\n      if (firstInvalidControl === control) firstInvalidControl.focus();\n    }\n  }, [fieldContext.serverInvalid]);\n  const validity = validationContext.getFieldValidity(name);\n  return /* @__PURE__ */jsx(Primitive.input, {\n    \"data-valid\": getValidAttribute(validity, fieldContext.serverInvalid),\n    \"data-invalid\": getInvalidAttribute(validity, fieldContext.serverInvalid),\n    \"aria-invalid\": fieldContext.serverInvalid ? true : void 0,\n    \"aria-describedby\": ariaDescriptionContext.getFieldDescription(name),\n    title: \"\",\n    ...controlProps,\n    ref: composedRef,\n    id,\n    name,\n    onInvalid: composeEventHandlers(props.onInvalid, event => {\n      const control = event.currentTarget;\n      updateControlValidity(control);\n    }),\n    onChange: composeEventHandlers(props.onChange, event => {\n      resetControlValidity();\n    })\n  });\n});\nFormControl.displayName = CONTROL_NAME;\nvar DEFAULT_INVALID_MESSAGE = \"This value is not valid\";\nvar DEFAULT_BUILT_IN_MESSAGES = {\n  badInput: DEFAULT_INVALID_MESSAGE,\n  patternMismatch: \"This value does not match the required pattern\",\n  rangeOverflow: \"This value is too large\",\n  rangeUnderflow: \"This value is too small\",\n  stepMismatch: \"This value does not match the required step\",\n  tooLong: \"This value is too long\",\n  tooShort: \"This value is too short\",\n  typeMismatch: \"This value does not match the required type\",\n  valid: void 0,\n  valueMissing: \"This value is missing\"\n};\nvar MESSAGE_NAME = \"FormMessage\";\nvar FormMessage = React.forwardRef((props, forwardedRef) => {\n  const {\n    match,\n    name: nameProp,\n    ...messageProps\n  } = props;\n  const fieldContext = useFormFieldContext(MESSAGE_NAME, props.__scopeForm);\n  const name = nameProp ?? fieldContext.name;\n\n  if (match === void 0) {\n    return /* @__PURE__ */jsx(FormMessageImpl, { ...messageProps,\n      ref: forwardedRef,\n      name,\n      children: props.children || DEFAULT_INVALID_MESSAGE\n    });\n  } else if (typeof match === \"function\") {\n    return /* @__PURE__ */jsx(FormCustomMessage, {\n      match,\n      ...messageProps,\n      ref: forwardedRef,\n      name\n    });\n  } else {\n    return /* @__PURE__ */jsx(FormBuiltInMessage, {\n      match,\n      ...messageProps,\n      ref: forwardedRef,\n      name\n    });\n  }\n});\nFormMessage.displayName = MESSAGE_NAME;\nvar FormBuiltInMessage = React.forwardRef((props, forwardedRef) => {\n  const {\n    match,\n    forceMatch = false,\n    name,\n    children,\n    ...messageProps\n  } = props;\n  const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n  const validity = validationContext.getFieldValidity(name);\n  const matches = forceMatch || validity?.[match];\n\n  if (matches) {\n    return /* @__PURE__ */jsx(FormMessageImpl, {\n      ref: forwardedRef,\n      ...messageProps,\n      name,\n      children: children ?? DEFAULT_BUILT_IN_MESSAGES[match]\n    });\n  }\n\n  return null;\n});\nvar FormCustomMessage = React.forwardRef((props, forwardedRef) => {\n  const {\n    match,\n    forceMatch = false,\n    name,\n    id: idProp,\n    children,\n    ...messageProps\n  } = props;\n  const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n  const ref = React.useRef(null);\n  const composedRef = useComposedRefs(forwardedRef, ref);\n\n  const _id = useId();\n\n  const id = idProp ?? _id;\n  const customMatcherEntry = React.useMemo(() => ({\n    id,\n    match\n  }), [id, match]);\n  const {\n    onFieldCustomMatcherEntryAdd,\n    onFieldCustomMatcherEntryRemove\n  } = validationContext;\n  React.useEffect(() => {\n    onFieldCustomMatcherEntryAdd(name, customMatcherEntry);\n    return () => onFieldCustomMatcherEntryRemove(name, customMatcherEntry.id);\n  }, [customMatcherEntry, name, onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove]);\n  const validity = validationContext.getFieldValidity(name);\n  const customErrors = validationContext.getFieldCustomErrors(name);\n  const hasMatchingCustomError = customErrors[id];\n  const matches = forceMatch || validity && !hasBuiltInError(validity) && hasMatchingCustomError;\n\n  if (matches) {\n    return /* @__PURE__ */jsx(FormMessageImpl, {\n      id,\n      ref: composedRef,\n      ...messageProps,\n      name,\n      children: children ?? DEFAULT_INVALID_MESSAGE\n    });\n  }\n\n  return null;\n});\nvar FormMessageImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    id: idProp,\n    name,\n    ...messageProps\n  } = props;\n  const ariaDescriptionContext = useAriaDescriptionContext(MESSAGE_NAME, __scopeForm);\n\n  const _id = useId();\n\n  const id = idProp ?? _id;\n  const {\n    onFieldMessageIdAdd,\n    onFieldMessageIdRemove\n  } = ariaDescriptionContext;\n  React.useEffect(() => {\n    onFieldMessageIdAdd(name, id);\n    return () => onFieldMessageIdRemove(name, id);\n  }, [name, id, onFieldMessageIdAdd, onFieldMessageIdRemove]);\n  return /* @__PURE__ */jsx(Primitive.span, {\n    id,\n    ...messageProps,\n    ref: forwardedRef\n  });\n});\nvar VALIDITY_STATE_NAME = \"FormValidityState\";\n\nvar FormValidityState = props => {\n  const {\n    __scopeForm,\n    name: nameProp,\n    children\n  } = props;\n  const validationContext = useValidationContext(VALIDITY_STATE_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(VALIDITY_STATE_NAME, __scopeForm);\n  const name = nameProp ?? fieldContext.name;\n  const validity = validationContext.getFieldValidity(name);\n  return /* @__PURE__ */jsx(Fragment, {\n    children: children(validity)\n  });\n};\n\nFormValidityState.displayName = VALIDITY_STATE_NAME;\nvar SUBMIT_NAME = \"FormSubmit\";\nvar FormSubmit = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    ...submitProps\n  } = props;\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"submit\",\n    ...submitProps,\n    ref: forwardedRef\n  });\n});\nFormSubmit.displayName = SUBMIT_NAME;\n\nfunction validityStateToObject(validity) {\n  const object = {};\n\n  for (const key in validity) {\n    object[key] = validity[key];\n  }\n\n  return object;\n}\n\nfunction isHTMLElement(element) {\n  return element instanceof HTMLElement;\n}\n\nfunction isFormControl(element) {\n  return \"validity\" in element;\n}\n\nfunction isInvalid(control) {\n  return isFormControl(control) && (control.validity.valid === false || control.getAttribute(\"aria-invalid\") === \"true\");\n}\n\nfunction getFirstInvalidControl(form) {\n  const elements = form.elements;\n  const [firstInvalidControl] = Array.from(elements).filter(isHTMLElement).filter(isInvalid);\n  return firstInvalidControl;\n}\n\nfunction isAsyncCustomMatcherEntry(entry, args) {\n  return entry.match.constructor.name === \"AsyncFunction\" || returnsPromise(entry.match, args);\n}\n\nfunction isSyncCustomMatcherEntry(entry) {\n  return entry.match.constructor.name === \"Function\";\n}\n\nfunction returnsPromise(func, args) {\n  return func(...args) instanceof Promise;\n}\n\nfunction hasBuiltInError(validity) {\n  let error = false;\n\n  for (const validityKey in validity) {\n    const key = validityKey;\n\n    if (key !== \"valid\" && key !== \"customError\" && validity[key]) {\n      error = true;\n      break;\n    }\n  }\n\n  return error;\n}\n\nfunction getValidAttribute(validity, serverInvalid) {\n  if (validity?.valid === true && !serverInvalid) return true;\n  return void 0;\n}\n\nfunction getInvalidAttribute(validity, serverInvalid) {\n  if (validity?.valid === false || serverInvalid) return true;\n  return void 0;\n}\n\nvar Root = Form;\nvar Field = FormField;\nvar Label = FormLabel;\nvar Control = FormControl;\nvar Message = FormMessage;\nvar ValidityState = FormValidityState;\nvar Submit = FormSubmit;\nexport { Control, Field, Form, FormControl, FormField, FormLabel, FormMessage, FormSubmit, FormValidityState, Label, Message, Root, Submit, ValidityState, createFormScope };","map":{"version":3,"mappings":"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","names":["React","composeEventHandlers","useComposedRefs","createContextScope","useId","Label","LabelPrimitive","Primitive","Fragment","createFormContext","createFormScope","FORM_NAME","ValidationProvider","useValidationContext","AriaDescriptionProvider","useAriaDescriptionContext","Form","props","forwardedRef","__scopeForm","onClearServerErrors","rootProps","formRef","composedFormRef","validityMap","setValidityMap","getFieldValidity","fieldName","handleFieldValidityChange","validity","prevValidityMap","handleFieldValiditionClear","setCustomErrorsMap","prevCustomErrorsMap","customMatcherEntriesMap","setCustomMatcherEntriesMap","getFieldCustomMatcherEntries","handleFieldCustomMatcherAdd","matcherEntry","prevCustomMatcherEntriesMap","handleFieldCustomMatcherRemove","matcherEntryId","filter","id","customErrorsMap","getFieldCustomErrors","handleFieldCustomErrorsChange","customErrors","messageIdsMap","setMessageIdsMap","handleFieldMessageIdAdd","prevMessageIdsMap","fieldDescriptionIds","Set","add","handleFieldMessageIdRemove","delete","getFieldDescription","Array","from","join","scope","onFieldValidityChange","onFieldCustomMatcherEntryAdd","onFieldCustomMatcherEntryRemove","onFieldCustomErrorsChange","onFieldValiditionClear","children","onFieldMessageIdAdd","onFieldMessageIdRemove","form","ref","onInvalid","event","firstInvalidControl","getFirstInvalidControl","currentTarget","target","focus","preventDefault","onSubmit","checkForDefaultPrevented","onReset","displayName","FIELD_NAME","FormFieldProvider","useFormFieldContext","FormField","name","serverInvalid","fieldProps","validationContext","div","getValidAttribute","getInvalidAttribute","LABEL_NAME","FormLabel","labelProps","fieldContext","htmlFor","CONTROL_NAME","FormControl","controlProps","ariaDescriptionContext","composedRef","customMatcherEntries","updateControlValidity","control","hasBuiltInError","controlValidity","validityStateToObject","formData","FormData","matcherArgs","value","syncCustomMatcherEntries","ayncCustomMatcherEntries","forEach","customMatcherEntry","isAsyncCustomMatcherEntry","push","isSyncCustomMatcherEntry","syncCustomErrors","map","match","syncCustomErrorsById","Object","fromEntries","hasSyncCustomErrors","values","some","Boolean","hasCustomError","setCustomValidity","DEFAULT_INVALID_MESSAGE","length","promisedCustomErrors","then","matches","asyncCustomErrors","Promise","all","asyncCustomErrorsById","hasAsyncCustomErrors","current","handleChange","addEventListener","removeEventListener","resetControlValidity","closest","input","title","onChange","DEFAULT_BUILT_IN_MESSAGES","badInput","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valid","valueMissing","MESSAGE_NAME","FormMessage","nameProp","messageProps","FormMessageImpl","FormCustomMessage","FormBuiltInMessage","forceMatch","idProp","_id","hasMatchingCustomError","span","VALIDITY_STATE_NAME","FormValidityState","SUBMIT_NAME","FormSubmit","submitProps","button","type","object","key","isHTMLElement","element","HTMLElement","isFormControl","isInvalid","getAttribute","elements","entry","args","constructor","returnsPromise","func","error","validityKey","Root","Field","Control","Message","ValidityState","Submit"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-form/src/Form.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { Label as LabelPrimitive } from '@radix-ui/react-label';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P> = P & { __scopeForm?: Scope };\nconst [createFormContext, createFormScope] = createContextScope('Form');\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\nconst FORM_NAME = 'Form';\n\ntype ValidityMap = { [fieldName: string]: ValidityState | undefined };\ntype CustomMatcherEntriesMap = { [fieldName: string]: CustomMatcherEntry[] };\ntype CustomErrorsMap = { [fieldName: string]: Record<string, boolean> };\n\ntype ValidationContextValue = {\n  getFieldValidity(fieldName: string): ValidityState | undefined;\n  onFieldValidityChange(fieldName: string, validity: ValidityState): void;\n\n  getFieldCustomMatcherEntries(fieldName: string): CustomMatcherEntry[];\n  onFieldCustomMatcherEntryAdd(fieldName: string, matcherEntry: CustomMatcherEntry): void;\n  onFieldCustomMatcherEntryRemove(fieldName: string, matcherEntryId: string): void;\n\n  getFieldCustomErrors(fieldName: string): Record<string, boolean>;\n  onFieldCustomErrorsChange(fieldName: string, errors: Record<string, boolean>): void;\n\n  onFieldValiditionClear(fieldName: string): void;\n};\nconst [ValidationProvider, useValidationContext] =\n  createFormContext<ValidationContextValue>(FORM_NAME);\n\ntype MessageIdsMap = { [fieldName: string]: Set<string> };\n\ntype AriaDescriptionContextValue = {\n  onFieldMessageIdAdd(fieldName: string, id: string): void;\n  onFieldMessageIdRemove(fieldName: string, id: string): void;\n  getFieldDescription(fieldName: string): string | undefined;\n};\nconst [AriaDescriptionProvider, useAriaDescriptionContext] =\n  createFormContext<AriaDescriptionContextValue>(FORM_NAME);\n\ntype FormElement = React.ElementRef<typeof Primitive.form>;\ntype PrimitiveFormProps = React.ComponentPropsWithoutRef<typeof Primitive.form>;\ninterface FormProps extends PrimitiveFormProps {\n  onClearServerErrors?(): void;\n}\n\nconst Form = React.forwardRef<FormElement, FormProps>(\n  (props: ScopedProps<FormProps>, forwardedRef) => {\n    const { __scopeForm, onClearServerErrors = () => {}, ...rootProps } = props;\n    const formRef = React.useRef<HTMLFormElement>(null);\n    const composedFormRef = useComposedRefs(forwardedRef, formRef);\n\n    // native validity per field\n    const [validityMap, setValidityMap] = React.useState<ValidityMap>({});\n    const getFieldValidity: ValidationContextValue['getFieldValidity'] = React.useCallback(\n      (fieldName) => validityMap[fieldName],\n      [validityMap]\n    );\n    const handleFieldValidityChange: ValidationContextValue['onFieldValidityChange'] =\n      React.useCallback(\n        (fieldName, validity) =>\n          setValidityMap((prevValidityMap) => ({\n            ...prevValidityMap,\n            [fieldName]: { ...(prevValidityMap[fieldName] ?? {}), ...validity },\n          })),\n        []\n      );\n    const handleFieldValiditionClear: ValidationContextValue['onFieldValiditionClear'] =\n      React.useCallback((fieldName) => {\n        setValidityMap((prevValidityMap) => ({ ...prevValidityMap, [fieldName]: undefined }));\n        setCustomErrorsMap((prevCustomErrorsMap) => ({ ...prevCustomErrorsMap, [fieldName]: {} }));\n      }, []);\n\n    // custom matcher entries per field\n    const [customMatcherEntriesMap, setCustomMatcherEntriesMap] =\n      React.useState<CustomMatcherEntriesMap>({});\n    const getFieldCustomMatcherEntries: ValidationContextValue['getFieldCustomMatcherEntries'] =\n      React.useCallback(\n        (fieldName) => customMatcherEntriesMap[fieldName] ?? [],\n        [customMatcherEntriesMap]\n      );\n    const handleFieldCustomMatcherAdd: ValidationContextValue['onFieldCustomMatcherEntryAdd'] =\n      React.useCallback((fieldName, matcherEntry) => {\n        setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({\n          ...prevCustomMatcherEntriesMap,\n          [fieldName]: [...(prevCustomMatcherEntriesMap[fieldName] ?? []), matcherEntry],\n        }));\n      }, []);\n    const handleFieldCustomMatcherRemove: ValidationContextValue['onFieldCustomMatcherEntryRemove'] =\n      React.useCallback((fieldName, matcherEntryId) => {\n        setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({\n          ...prevCustomMatcherEntriesMap,\n          [fieldName]: (prevCustomMatcherEntriesMap[fieldName] ?? []).filter(\n            (matcherEntry) => matcherEntry.id !== matcherEntryId\n          ),\n        }));\n      }, []);\n\n    // custom errors per field\n    const [customErrorsMap, setCustomErrorsMap] = React.useState<CustomErrorsMap>({});\n    const getFieldCustomErrors: ValidationContextValue['getFieldCustomErrors'] = React.useCallback(\n      (fieldName) => customErrorsMap[fieldName] ?? {},\n      [customErrorsMap]\n    );\n    const handleFieldCustomErrorsChange: ValidationContextValue['onFieldCustomErrorsChange'] =\n      React.useCallback((fieldName, customErrors) => {\n        setCustomErrorsMap((prevCustomErrorsMap) => ({\n          ...prevCustomErrorsMap,\n          [fieldName]: { ...(prevCustomErrorsMap[fieldName] ?? {}), ...customErrors },\n        }));\n      }, []);\n\n    // messageIds per field\n    const [messageIdsMap, setMessageIdsMap] = React.useState<MessageIdsMap>({});\n    const handleFieldMessageIdAdd: AriaDescriptionContextValue['onFieldMessageIdAdd'] =\n      React.useCallback((fieldName, id) => {\n        setMessageIdsMap((prevMessageIdsMap) => {\n          const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]).add(id);\n          return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };\n        });\n      }, []);\n    const handleFieldMessageIdRemove: AriaDescriptionContextValue['onFieldMessageIdRemove'] =\n      React.useCallback((fieldName, id) => {\n        setMessageIdsMap((prevMessageIdsMap) => {\n          const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]);\n          fieldDescriptionIds.delete(id);\n          return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };\n        });\n      }, []);\n    const getFieldDescription: AriaDescriptionContextValue['getFieldDescription'] =\n      React.useCallback(\n        (fieldName) => Array.from(messageIdsMap[fieldName] ?? []).join(' ') || undefined,\n        [messageIdsMap]\n      );\n\n    return (\n      <ValidationProvider\n        scope={__scopeForm}\n        getFieldValidity={getFieldValidity}\n        onFieldValidityChange={handleFieldValidityChange}\n        getFieldCustomMatcherEntries={getFieldCustomMatcherEntries}\n        onFieldCustomMatcherEntryAdd={handleFieldCustomMatcherAdd}\n        onFieldCustomMatcherEntryRemove={handleFieldCustomMatcherRemove}\n        getFieldCustomErrors={getFieldCustomErrors}\n        onFieldCustomErrorsChange={handleFieldCustomErrorsChange}\n        onFieldValiditionClear={handleFieldValiditionClear}\n      >\n        <AriaDescriptionProvider\n          scope={__scopeForm}\n          onFieldMessageIdAdd={handleFieldMessageIdAdd}\n          onFieldMessageIdRemove={handleFieldMessageIdRemove}\n          getFieldDescription={getFieldDescription}\n        >\n          <Primitive.form\n            {...rootProps}\n            ref={composedFormRef}\n            // focus first invalid control when the form is submitted\n            onInvalid={composeEventHandlers(props.onInvalid, (event) => {\n              const firstInvalidControl = getFirstInvalidControl(event.currentTarget);\n              if (firstInvalidControl === event.target) firstInvalidControl.focus();\n\n              // prevent default browser UI for form validation\n              event.preventDefault();\n            })}\n            // clear server errors when the form is re-submitted\n            onSubmit={composeEventHandlers(props.onSubmit, onClearServerErrors, {\n              checkForDefaultPrevented: false,\n            })}\n            // clear server errors when the form is reset\n            onReset={composeEventHandlers(props.onReset, onClearServerErrors)}\n          />\n        </AriaDescriptionProvider>\n      </ValidationProvider>\n    );\n  }\n);\n\nForm.displayName = FORM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormField\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_NAME = 'FormField';\n\ntype FormFieldContextValue = {\n  id: string;\n  name: string;\n  serverInvalid: boolean;\n};\nconst [FormFieldProvider, useFormFieldContext] =\n  createFormContext<FormFieldContextValue>(FIELD_NAME);\n\ntype FormFieldElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface FormFieldProps extends PrimitiveDivProps {\n  name: string;\n  serverInvalid?: boolean;\n}\n\nconst FormField = React.forwardRef<FormFieldElement, FormFieldProps>(\n  (props: ScopedProps<FormFieldProps>, forwardedRef) => {\n    const { __scopeForm, name, serverInvalid = false, ...fieldProps } = props;\n    const validationContext = useValidationContext(FIELD_NAME, __scopeForm);\n    const validity = validationContext.getFieldValidity(name);\n    const id = useId();\n\n    return (\n      <FormFieldProvider scope={__scopeForm} id={id} name={name} serverInvalid={serverInvalid}>\n        <Primitive.div\n          data-valid={getValidAttribute(validity, serverInvalid)}\n          data-invalid={getInvalidAttribute(validity, serverInvalid)}\n          {...fieldProps}\n          ref={forwardedRef}\n        />\n      </FormFieldProvider>\n    );\n  }\n);\n\nFormField.displayName = FIELD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'FormLabel';\n\ntype FormLabelElement = React.ElementRef<typeof LabelPrimitive>;\ntype LabelProps = React.ComponentPropsWithoutRef<typeof LabelPrimitive>;\ninterface FormLabelProps extends LabelProps {}\n\nconst FormLabel = React.forwardRef<FormLabelElement, FormLabelProps>(\n  (props: ScopedProps<FormLabelProps>, forwardedRef) => {\n    const { __scopeForm, ...labelProps } = props;\n    const validationContext = useValidationContext(LABEL_NAME, __scopeForm);\n    const fieldContext = useFormFieldContext(LABEL_NAME, __scopeForm);\n    const htmlFor = labelProps.htmlFor || fieldContext.id;\n    const validity = validationContext.getFieldValidity(fieldContext.name);\n\n    return (\n      <LabelPrimitive\n        data-valid={getValidAttribute(validity, fieldContext.serverInvalid)}\n        data-invalid={getInvalidAttribute(validity, fieldContext.serverInvalid)}\n        {...labelProps}\n        ref={forwardedRef}\n        htmlFor={htmlFor}\n      />\n    );\n  }\n);\n\nFormLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormControl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTROL_NAME = 'FormControl';\n\ntype FormControlElement = React.ElementRef<typeof Primitive.input>;\ntype PrimitiveInputProps = React.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface FormControlProps extends PrimitiveInputProps {}\n\nconst FormControl = React.forwardRef<FormControlElement, FormControlProps>(\n  (props: ScopedProps<FormControlProps>, forwardedRef) => {\n    const { __scopeForm, ...controlProps } = props;\n\n    const validationContext = useValidationContext(CONTROL_NAME, __scopeForm);\n    const fieldContext = useFormFieldContext(CONTROL_NAME, __scopeForm);\n    const ariaDescriptionContext = useAriaDescriptionContext(CONTROL_NAME, __scopeForm);\n\n    const ref = React.useRef<FormControlElement>(null);\n    const composedRef = useComposedRefs(forwardedRef, ref);\n    const name = controlProps.name || fieldContext.name;\n    const id = controlProps.id || fieldContext.id;\n    const customMatcherEntries = validationContext.getFieldCustomMatcherEntries(name);\n\n    const { onFieldValidityChange, onFieldCustomErrorsChange, onFieldValiditionClear } =\n      validationContext;\n    const updateControlValidity = React.useCallback(\n      async (control: FormControlElement) => {\n        //------------------------------------------------------------------------------------------\n        // 1. first, if we have built-in errors we stop here\n\n        if (hasBuiltInError(control.validity)) {\n          const controlValidity = validityStateToObject(control.validity);\n          onFieldValidityChange(name, controlValidity);\n          return;\n        }\n\n        //------------------------------------------------------------------------------------------\n        // 2. then gather the form data to give to custom matchers for cross-comparisons\n\n        const formData = control.form ? new FormData(control.form) : new FormData();\n        const matcherArgs: CustomMatcherArgs = [control.value, formData];\n\n        //------------------------------------------------------------------------------------------\n        // 3. split sync and async custom matcher entries\n\n        const syncCustomMatcherEntries: Array<SyncCustomMatcherEntry> = [];\n        const ayncCustomMatcherEntries: Array<AsyncCustomMatcherEntry> = [];\n        customMatcherEntries.forEach((customMatcherEntry) => {\n          if (isAsyncCustomMatcherEntry(customMatcherEntry, matcherArgs)) {\n            ayncCustomMatcherEntries.push(customMatcherEntry);\n          } else if (isSyncCustomMatcherEntry(customMatcherEntry)) {\n            syncCustomMatcherEntries.push(customMatcherEntry);\n          }\n        });\n\n        //------------------------------------------------------------------------------------------\n        // 4. run sync custom matchers and update control validity / internal validity + errors\n\n        const syncCustomErrors = syncCustomMatcherEntries.map(({ id, match }) => {\n          return [id, match(...matcherArgs)] as const;\n        });\n        const syncCustomErrorsById = Object.fromEntries(syncCustomErrors);\n        const hasSyncCustomErrors = Object.values(syncCustomErrorsById).some(Boolean);\n        const hasCustomError = hasSyncCustomErrors;\n        control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : '');\n        const controlValidity = validityStateToObject(control.validity);\n        onFieldValidityChange(name, controlValidity);\n        onFieldCustomErrorsChange(name, syncCustomErrorsById);\n\n        //------------------------------------------------------------------------------------------\n        // 5. run async custom matchers and update control validity / internal validity + errors\n\n        if (!hasSyncCustomErrors && ayncCustomMatcherEntries.length > 0) {\n          const promisedCustomErrors = ayncCustomMatcherEntries.map(({ id, match }) =>\n            match(...matcherArgs).then((matches) => [id, matches] as const)\n          );\n          const asyncCustomErrors = await Promise.all(promisedCustomErrors);\n          const asyncCustomErrorsById = Object.fromEntries(asyncCustomErrors);\n          const hasAsyncCustomErrors = Object.values(asyncCustomErrorsById).some(Boolean);\n          const hasCustomError = hasAsyncCustomErrors;\n          control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : '');\n          const controlValidity = validityStateToObject(control.validity);\n          onFieldValidityChange(name, controlValidity);\n          onFieldCustomErrorsChange(name, asyncCustomErrorsById);\n        }\n      },\n      [customMatcherEntries, name, onFieldCustomErrorsChange, onFieldValidityChange]\n    );\n\n    React.useEffect(() => {\n      const control = ref.current;\n      if (control) {\n        // We only want validate on change (native `change` event, not React's `onChange`). This is primarily\n        // a UX decision, we don't want to validate on every keystroke and React's `onChange` is the `input` event.\n        const handleChange = () => updateControlValidity(control);\n        control.addEventListener('change', handleChange);\n        return () => control.removeEventListener('change', handleChange);\n      }\n    }, [updateControlValidity]);\n\n    const resetControlValidity = React.useCallback(() => {\n      const control = ref.current;\n      if (control) {\n        control.setCustomValidity('');\n        onFieldValiditionClear(name);\n      }\n    }, [name, onFieldValiditionClear]);\n\n    // reset validity and errors when the form is reset\n    React.useEffect(() => {\n      const form = ref.current?.form;\n      if (form) {\n        form.addEventListener('reset', resetControlValidity);\n        return () => form.removeEventListener('reset', resetControlValidity);\n      }\n    }, [resetControlValidity]);\n\n    // focus first invalid control when fields are set as invalid by server\n    React.useEffect(() => {\n      const control = ref.current;\n      const form = control?.closest('form');\n      if (form && fieldContext.serverInvalid) {\n        const firstInvalidControl = getFirstInvalidControl(form);\n        if (firstInvalidControl === control) firstInvalidControl.focus();\n      }\n    }, [fieldContext.serverInvalid]);\n\n    const validity = validationContext.getFieldValidity(name);\n\n    return (\n      <Primitive.input\n        data-valid={getValidAttribute(validity, fieldContext.serverInvalid)}\n        data-invalid={getInvalidAttribute(validity, fieldContext.serverInvalid)}\n        aria-invalid={fieldContext.serverInvalid ? true : undefined}\n        aria-describedby={ariaDescriptionContext.getFieldDescription(name)}\n        // disable default browser behaviour of showing built-in error message on hover\n        title=\"\"\n        {...controlProps}\n        ref={composedRef}\n        id={id}\n        name={name}\n        onInvalid={composeEventHandlers(props.onInvalid, (event) => {\n          const control = event.currentTarget;\n          updateControlValidity(control);\n        })}\n        onChange={composeEventHandlers(props.onChange, (event) => {\n          // reset validity when user changes value\n          resetControlValidity();\n        })}\n      />\n    );\n  }\n);\n\nFormControl.displayName = CONTROL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormMessage\n * -----------------------------------------------------------------------------------------------*/\n\nconst validityMatchers = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'stepMismatch',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valid',\n  'valueMissing',\n] as const;\ntype ValidityMatcher = (typeof validityMatchers)[number];\n\nconst DEFAULT_INVALID_MESSAGE = 'This value is not valid';\nconst DEFAULT_BUILT_IN_MESSAGES: Record<ValidityMatcher, string | undefined> = {\n  badInput: DEFAULT_INVALID_MESSAGE,\n  patternMismatch: 'This value does not match the required pattern',\n  rangeOverflow: 'This value is too large',\n  rangeUnderflow: 'This value is too small',\n  stepMismatch: 'This value does not match the required step',\n  tooLong: 'This value is too long',\n  tooShort: 'This value is too short',\n  typeMismatch: 'This value does not match the required type',\n  valid: undefined,\n  valueMissing: 'This value is missing',\n};\n\nconst MESSAGE_NAME = 'FormMessage';\n\ntype FormMessageElement = FormMessageImplElement;\ninterface FormMessageProps extends Omit<FormMessageImplProps, 'name'> {\n  match?: ValidityMatcher | CustomMatcher;\n  forceMatch?: boolean;\n  name?: string;\n}\n\nconst FormMessage = React.forwardRef<FormMessageElement, FormMessageProps>(\n  (props: ScopedProps<FormMessageProps>, forwardedRef) => {\n    const { match, name: nameProp, ...messageProps } = props;\n    const fieldContext = useFormFieldContext(MESSAGE_NAME, props.__scopeForm);\n    const name = nameProp ?? fieldContext.name;\n\n    if (match === undefined) {\n      return (\n        <FormMessageImpl {...messageProps} ref={forwardedRef} name={name}>\n          {props.children || DEFAULT_INVALID_MESSAGE}\n        </FormMessageImpl>\n      );\n    } else if (typeof match === 'function') {\n      return <FormCustomMessage match={match} {...messageProps} ref={forwardedRef} name={name} />;\n    } else {\n      return <FormBuiltInMessage match={match} {...messageProps} ref={forwardedRef} name={name} />;\n    }\n  }\n);\n\nFormMessage.displayName = MESSAGE_NAME;\n\ntype FormBuiltInMessageElement = FormMessageImplElement;\ninterface FormBuiltInMessageProps extends FormMessageImplProps {\n  match: ValidityMatcher;\n  forceMatch?: boolean;\n  name: string;\n}\n\nconst FormBuiltInMessage = React.forwardRef<FormBuiltInMessageElement, FormBuiltInMessageProps>(\n  (props: ScopedProps<FormBuiltInMessageProps>, forwardedRef) => {\n    const { match, forceMatch = false, name, children, ...messageProps } = props;\n    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n    const validity = validationContext.getFieldValidity(name);\n    const matches = forceMatch || validity?.[match];\n\n    if (matches) {\n      return (\n        <FormMessageImpl ref={forwardedRef} {...messageProps} name={name}>\n          {children ?? DEFAULT_BUILT_IN_MESSAGES[match]}\n        </FormMessageImpl>\n      );\n    }\n\n    return null;\n  }\n);\n\ntype FormCustomMessageElement = React.ElementRef<typeof FormMessageImpl>;\ninterface FormCustomMessageProps extends React.ComponentPropsWithoutRef<typeof FormMessageImpl> {\n  match: CustomMatcher;\n  forceMatch?: boolean;\n  name: string;\n}\n\nconst FormCustomMessage = React.forwardRef<FormCustomMessageElement, FormCustomMessageProps>(\n  (props: ScopedProps<FormCustomMessageProps>, forwardedRef) => {\n    const { match, forceMatch = false, name, id: idProp, children, ...messageProps } = props;\n    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n    const ref = React.useRef<FormCustomMessageElement>(null);\n    const composedRef = useComposedRefs(forwardedRef, ref);\n    const _id = useId();\n    const id = idProp ?? _id;\n\n    const customMatcherEntry = React.useMemo(() => ({ id, match }), [id, match]);\n    const { onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove } = validationContext;\n    React.useEffect(() => {\n      onFieldCustomMatcherEntryAdd(name, customMatcherEntry);\n      return () => onFieldCustomMatcherEntryRemove(name, customMatcherEntry.id);\n    }, [customMatcherEntry, name, onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove]);\n\n    const validity = validationContext.getFieldValidity(name);\n    const customErrors = validationContext.getFieldCustomErrors(name);\n    const hasMatchingCustomError = customErrors[id];\n    const matches =\n      forceMatch || (validity && !hasBuiltInError(validity) && hasMatchingCustomError);\n\n    if (matches) {\n      return (\n        <FormMessageImpl id={id} ref={composedRef} {...messageProps} name={name}>\n          {children ?? DEFAULT_INVALID_MESSAGE}\n        </FormMessageImpl>\n      );\n    }\n\n    return null;\n  }\n);\n\ntype FormMessageImplElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface FormMessageImplProps extends PrimitiveSpanProps {\n  name: string;\n}\n\nconst FormMessageImpl = React.forwardRef<FormMessageImplElement, FormMessageImplProps>(\n  (props: ScopedProps<FormMessageImplProps>, forwardedRef) => {\n    const { __scopeForm, id: idProp, name, ...messageProps } = props;\n    const ariaDescriptionContext = useAriaDescriptionContext(MESSAGE_NAME, __scopeForm);\n    const _id = useId();\n    const id = idProp ?? _id;\n\n    const { onFieldMessageIdAdd, onFieldMessageIdRemove } = ariaDescriptionContext;\n    React.useEffect(() => {\n      onFieldMessageIdAdd(name, id);\n      return () => onFieldMessageIdRemove(name, id);\n    }, [name, id, onFieldMessageIdAdd, onFieldMessageIdRemove]);\n\n    return <Primitive.span id={id} {...messageProps} ref={forwardedRef} />;\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * FormValidityState\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALIDITY_STATE_NAME = 'FormValidityState';\n\ninterface FormValidityStateProps {\n  children(validity: ValidityState | undefined): React.ReactNode;\n  name?: string;\n}\n\nconst FormValidityState = (props: ScopedProps<FormValidityStateProps>) => {\n  const { __scopeForm, name: nameProp, children } = props;\n  const validationContext = useValidationContext(VALIDITY_STATE_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(VALIDITY_STATE_NAME, __scopeForm);\n  const name = nameProp ?? fieldContext.name;\n  const validity = validationContext.getFieldValidity(name);\n  return <>{children(validity)}</>;\n};\n\nFormValidityState.displayName = VALIDITY_STATE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormSubmit\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUBMIT_NAME = 'FormSubmit';\n\ntype FormSubmitElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface FormSubmitProps extends PrimitiveButtonProps {}\n\nconst FormSubmit = React.forwardRef<FormSubmitElement, FormSubmitProps>(\n  (props: ScopedProps<FormSubmitProps>, forwardedRef) => {\n    const { __scopeForm, ...submitProps } = props;\n    return <Primitive.button type=\"submit\" {...submitProps} ref={forwardedRef} />;\n  }\n);\n\nFormSubmit.displayName = SUBMIT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ValidityStateKey = keyof ValidityState;\ntype SyncCustomMatcher = (value: string, formData: FormData) => boolean;\ntype AsyncCustomMatcher = (value: string, formData: FormData) => Promise<boolean>;\ntype CustomMatcher = SyncCustomMatcher | AsyncCustomMatcher;\ntype CustomMatcherEntry = { id: string; match: CustomMatcher };\ntype SyncCustomMatcherEntry = { id: string; match: SyncCustomMatcher };\ntype AsyncCustomMatcherEntry = { id: string; match: AsyncCustomMatcher };\ntype CustomMatcherArgs = [string, FormData];\n\nfunction validityStateToObject(validity: ValidityState) {\n  const object: any = {};\n  for (const key in validity) {\n    object[key] = validity[key as ValidityStateKey];\n  }\n  return object as Record<ValidityStateKey, boolean>;\n}\n\nfunction isHTMLElement(element: any): element is HTMLElement {\n  return element instanceof HTMLElement;\n}\n\nfunction isFormControl(element: any): element is { validity: ValidityState } {\n  return 'validity' in element;\n}\n\nfunction isInvalid(control: HTMLElement) {\n  return (\n    isFormControl(control) &&\n    (control.validity.valid === false || control.getAttribute('aria-invalid') === 'true')\n  );\n}\n\nfunction getFirstInvalidControl(form: HTMLFormElement): HTMLElement | undefined {\n  const elements = form.elements;\n  const [firstInvalidControl] = Array.from(elements).filter(isHTMLElement).filter(isInvalid);\n  return firstInvalidControl;\n}\n\nfunction isAsyncCustomMatcherEntry(\n  entry: CustomMatcherEntry,\n  args: CustomMatcherArgs\n): entry is AsyncCustomMatcherEntry {\n  return entry.match.constructor.name === 'AsyncFunction' || returnsPromise(entry.match, args);\n}\n\nfunction isSyncCustomMatcherEntry(entry: CustomMatcherEntry): entry is SyncCustomMatcherEntry {\n  return entry.match.constructor.name === 'Function';\n}\n\nfunction returnsPromise(func: Function, args: Array<unknown>) {\n  return func(...args) instanceof Promise;\n}\n\nfunction hasBuiltInError(validity: ValidityState) {\n  let error = false;\n  for (const validityKey in validity) {\n    const key = validityKey as ValidityStateKey;\n    if (key !== 'valid' && key !== 'customError' && validity[key]) {\n      error = true;\n      break;\n    }\n  }\n  return error;\n}\n\nfunction getValidAttribute(validity: ValidityState | undefined, serverInvalid: boolean) {\n  if (validity?.valid === true && !serverInvalid) return true;\n  return undefined;\n}\nfunction getInvalidAttribute(validity: ValidityState | undefined, serverInvalid: boolean) {\n  if (validity?.valid === false || serverInvalid) return true;\n  return undefined;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Form;\nconst Field = FormField;\nconst Label = FormLabel;\nconst Control = FormControl;\nconst Message = FormMessage;\nconst ValidityState = FormValidityState;\nconst Submit = FormSubmit;\n\nexport {\n  createFormScope,\n  //\n  Form,\n  FormField,\n  FormLabel,\n  FormControl,\n  FormMessage,\n  FormValidityState,\n  FormSubmit,\n  //\n  Root,\n  Field,\n  Label,\n  Control,\n  Message,\n  ValidityState,\n  Submit,\n};\n\nexport type {\n  FormProps,\n  FormFieldProps,\n  FormLabelProps,\n  FormControlProps,\n  FormMessageProps,\n  FormValidityStateProps,\n  FormSubmitProps,\n};\n"]},"metadata":{},"sourceType":"module"}