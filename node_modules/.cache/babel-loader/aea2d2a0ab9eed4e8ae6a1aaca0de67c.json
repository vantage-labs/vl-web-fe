{"ast":null,"code":"import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n  const {\n    style,\n    vars,\n    transformOrigin\n  } = state; // Track whether we encounter any transform or transformOrigin values.\n\n  let hasTransform = false;\n  let hasTransformOrigin = false;\n  /**\n   * Loop over all our latest animated values and decide whether to handle them\n   * as a style or CSS variable.\n   *\n   * Transforms and transform origins are kept separately for further processing.\n   */\n\n  for (const key in latestValues) {\n    const value = latestValues[key];\n\n    if (transformProps.has(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      continue;\n    } else if (isCSSVariableName(key)) {\n      vars[key] = value;\n      continue;\n    } else {\n      // Convert the value to its default value type, ie 0 -> \"0px\"\n      const valueAsType = getValueAsType(value, numberValueTypes[key]);\n\n      if (key.startsWith(\"origin\")) {\n        // If this is a transform origin, flag and enable further transform-origin processing\n        hasTransformOrigin = true;\n        transformOrigin[key] = valueAsType;\n      } else {\n        style[key] = valueAsType;\n      }\n    }\n  }\n\n  if (!latestValues.transform) {\n    if (hasTransform || transformTemplate) {\n      style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n    } else if (style.transform) {\n      /**\n       * If we have previously created a transform but currently don't have any,\n       * reset transform style to none.\n       */\n      style.transform = \"none\";\n    }\n  }\n  /**\n   * Build a transformOrigin style. Uses the same defaults as the browser for\n   * undefined origins.\n   */\n\n\n  if (hasTransformOrigin) {\n    const {\n      originX = \"50%\",\n      originY = \"50%\",\n      originZ = 0\n    } = transformOrigin;\n    style.transformOrigin = `${originX} ${originY} ${originZ}`;\n  }\n}\n\nexport { buildHTMLStyles };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs"],"names":["buildTransform","isCSSVariableName","transformProps","getValueAsType","numberValueTypes","buildHTMLStyles","state","latestValues","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","key","value","has","valueAsType","startsWith","transform","originX","originY","originZ"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uBAA/B;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,YAAhC,EAA8CC,iBAA9C,EAAiE;AAC7D,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAAmCL,KAAzC,CAD6D,CAE7D;;AACA,MAAIM,YAAY,GAAG,KAAnB;AACA,MAAIC,kBAAkB,GAAG,KAAzB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,OAAK,MAAMC,GAAX,IAAkBP,YAAlB,EAAgC;AAC5B,UAAMQ,KAAK,GAAGR,YAAY,CAACO,GAAD,CAA1B;;AACA,QAAIZ,cAAc,CAACc,GAAf,CAAmBF,GAAnB,CAAJ,EAA6B;AACzB;AACAF,MAAAA,YAAY,GAAG,IAAf;AACA;AACH,KAJD,MAKK,IAAIX,iBAAiB,CAACa,GAAD,CAArB,EAA4B;AAC7BJ,MAAAA,IAAI,CAACI,GAAD,CAAJ,GAAYC,KAAZ;AACA;AACH,KAHI,MAIA;AACD;AACA,YAAME,WAAW,GAAGd,cAAc,CAACY,KAAD,EAAQX,gBAAgB,CAACU,GAAD,CAAxB,CAAlC;;AACA,UAAIA,GAAG,CAACI,UAAJ,CAAe,QAAf,CAAJ,EAA8B;AAC1B;AACAL,QAAAA,kBAAkB,GAAG,IAArB;AACAF,QAAAA,eAAe,CAACG,GAAD,CAAf,GACIG,WADJ;AAEH,OALD,MAMK;AACDR,QAAAA,KAAK,CAACK,GAAD,CAAL,GAAaG,WAAb;AACH;AACJ;AACJ;;AACD,MAAI,CAACV,YAAY,CAACY,SAAlB,EAA6B;AACzB,QAAIP,YAAY,IAAIJ,iBAApB,EAAuC;AACnCC,MAAAA,KAAK,CAACU,SAAN,GAAkBnB,cAAc,CAACO,YAAD,EAAeD,KAAK,CAACa,SAArB,EAAgCX,iBAAhC,CAAhC;AACH,KAFD,MAGK,IAAIC,KAAK,CAACU,SAAV,EAAqB;AACtB;AACZ;AACA;AACA;AACYV,MAAAA,KAAK,CAACU,SAAN,GAAkB,MAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACI,MAAIN,kBAAJ,EAAwB;AACpB,UAAM;AAAEO,MAAAA,OAAO,GAAG,KAAZ;AAAmBC,MAAAA,OAAO,GAAG,KAA7B;AAAoCC,MAAAA,OAAO,GAAG;AAA9C,QAAqDX,eAA3D;AACAF,IAAAA,KAAK,CAACE,eAAN,GAAyB,GAAES,OAAQ,IAAGC,OAAQ,IAAGC,OAAQ,EAAzD;AACH;AACJ;;AAED,SAASjB,eAAT","sourcesContent":["import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n"]},"metadata":{},"sourceType":"module"}