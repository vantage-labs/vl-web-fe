{"ast":null,"code":"import _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction getValueState(visualElement) {\n  var state = [{}, {}];\n  visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach(function (value, key) {\n    state[0][key] = value.get();\n    state[1][key] = value.getVelocity();\n  });\n  return state;\n}\n\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n  /**\n   * If the variant definition is a function, resolve.\n   */\n  if (typeof definition === \"function\") {\n    var _getValueState = getValueState(visualElement),\n        _getValueState2 = _slicedToArray(_getValueState, 2),\n        current = _getValueState2[0],\n        velocity = _getValueState2[1];\n\n    definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n  }\n  /**\n   * If the variant definition is a variant label, or\n   * the function returned a variant label, resolve.\n   */\n\n\n  if (typeof definition === \"string\") {\n    definition = props.variants && props.variants[definition];\n  }\n  /**\n   * At this point we've resolved both functions and variant labels,\n   * but the resolved variant label might itself have been a function.\n   * If so, resolve. This can only have returned a valid target object.\n   */\n\n\n  if (typeof definition === \"function\") {\n    var _getValueState3 = getValueState(visualElement),\n        _getValueState4 = _slicedToArray(_getValueState3, 2),\n        _current = _getValueState4[0],\n        _velocity = _getValueState4[1];\n\n    definition = definition(custom !== undefined ? custom : props.custom, _current, _velocity);\n  }\n\n  return definition;\n}\n\nexport { resolveVariantFromProps };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs"],"names":["getValueState","visualElement","state","values","forEach","value","key","get","getVelocity","resolveVariantFromProps","props","definition","custom","current","velocity","undefined","variants"],"mappings":";;AAAA,SAASA,aAAT,CAAuBC,aAAvB,EAAsC;AAClC,MAAMC,KAAK,GAAG,CAAC,EAAD,EAAK,EAAL,CAAd;AACAD,EAAAA,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACE,MAAd,CAAqBC,OAArB,CAA6B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACvGJ,IAAAA,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,IAAgBD,KAAK,CAACE,GAAN,EAAhB;AACAL,IAAAA,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,IAAgBD,KAAK,CAACG,WAAN,EAAhB;AACH,GAH6D,CAA9D;AAIA,SAAON,KAAP;AACH;;AACD,SAASO,uBAAT,CAAiCC,KAAjC,EAAwCC,UAAxC,EAAoDC,MAApD,EAA4DX,aAA5D,EAA2E;AACvE;AACJ;AACA;AACI,MAAI,OAAOU,UAAP,KAAsB,UAA1B,EAAsC;AAClC,yBAA4BX,aAAa,CAACC,aAAD,CAAzC;AAAA;AAAA,QAAOY,OAAP;AAAA,QAAgBC,QAAhB;;AACAH,IAAAA,UAAU,GAAGA,UAAU,CAACC,MAAM,KAAKG,SAAX,GAAuBH,MAAvB,GAAgCF,KAAK,CAACE,MAAvC,EAA+CC,OAA/C,EAAwDC,QAAxD,CAAvB;AACH;AACD;AACJ;AACA;AACA;;;AACI,MAAI,OAAOH,UAAP,KAAsB,QAA1B,EAAoC;AAChCA,IAAAA,UAAU,GAAGD,KAAK,CAACM,QAAN,IAAkBN,KAAK,CAACM,QAAN,CAAeL,UAAf,CAA/B;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI,MAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AAClC,0BAA4BX,aAAa,CAACC,aAAD,CAAzC;AAAA;AAAA,QAAOY,QAAP;AAAA,QAAgBC,SAAhB;;AACAH,IAAAA,UAAU,GAAGA,UAAU,CAACC,MAAM,KAAKG,SAAX,GAAuBH,MAAvB,GAAgCF,KAAK,CAACE,MAAvC,EAA+CC,QAA/C,EAAwDC,SAAxD,CAAvB;AACH;;AACD,SAAOH,UAAP;AACH;;AAED,SAASF,uBAAT","sourcesContent":["function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n"]},"metadata":{},"sourceType":"module"}