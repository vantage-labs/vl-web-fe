{"ast":null,"code":"\"use client\"; // packages/react/accordion/src/Accordion.tsx\n\nimport React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\nimport { createCollapsibleScope } from \"@radix-ui/react-collapsible\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { jsx } from \"react/jsx-runtime\";\nvar ACCORDION_NAME = \"Accordion\";\nvar ACCORDION_KEYS = [\"Home\", \"End\", \"ArrowDown\", \"ArrowUp\", \"ArrowLeft\", \"ArrowRight\"];\nvar [Collection, useCollection, createCollectionScope] = createCollection(ACCORDION_NAME);\nvar [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [createCollectionScope, createCollapsibleScope]);\nvar useCollapsibleScope = createCollapsibleScope();\nvar Accordion = React.forwardRef((props, forwardedRef) => {\n  const {\n    type,\n    ...accordionProps\n  } = props;\n  const singleProps = accordionProps;\n  const multipleProps = accordionProps;\n  return /* @__PURE__ */jsx(Collection.Provider, {\n    scope: props.__scopeAccordion,\n    children: type === \"multiple\" ? /* @__PURE__ */jsx(AccordionImplMultiple, { ...multipleProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */jsx(AccordionImplSingle, { ...singleProps,\n      ref: forwardedRef\n    })\n  });\n});\nAccordion.displayName = ACCORDION_NAME;\nvar [AccordionValueProvider, useAccordionValueContext] = createAccordionContext(ACCORDION_NAME);\nvar [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(ACCORDION_NAME, {\n  collapsible: false\n});\nvar AccordionImplSingle = React.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    collapsible = false,\n    ...accordionSingleProps\n  } = props;\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  return /* @__PURE__ */jsx(AccordionValueProvider, {\n    scope: props.__scopeAccordion,\n    value: value ? [value] : [],\n    onItemOpen: setValue,\n    onItemClose: React.useCallback(() => collapsible && setValue(\"\"), [collapsible, setValue]),\n    children: /* @__PURE__ */jsx(AccordionCollapsibleProvider, {\n      scope: props.__scopeAccordion,\n      collapsible,\n      children: /* @__PURE__ */jsx(AccordionImpl, { ...accordionSingleProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nvar AccordionImplMultiple = React.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  const handleItemOpen = React.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [...prevValue, itemValue];\n  }), [setValue]);\n  const handleItemClose = React.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return prevValue.filter(value2 => value2 !== itemValue);\n  }), [setValue]);\n  return /* @__PURE__ */jsx(AccordionValueProvider, {\n    scope: props.__scopeAccordion,\n    value,\n    onItemOpen: handleItemOpen,\n    onItemClose: handleItemClose,\n    children: /* @__PURE__ */jsx(AccordionCollapsibleProvider, {\n      scope: props.__scopeAccordion,\n      collapsible: true,\n      children: /* @__PURE__ */jsx(AccordionImpl, { ...accordionMultipleProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nvar [AccordionImplProvider, useAccordionContext] = createAccordionContext(ACCORDION_NAME);\nvar AccordionImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    disabled,\n    dir,\n    orientation = \"vertical\",\n    ...accordionProps\n  } = props;\n  const accordionRef = React.useRef(null);\n  const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n  const getItems = useCollection(__scopeAccordion);\n  const direction = useDirection(dir);\n  const isDirectionLTR = direction === \"ltr\";\n  const handleKeyDown = composeEventHandlers(props.onKeyDown, event => {\n    if (!ACCORDION_KEYS.includes(event.key)) return;\n    const target = event.target;\n    const triggerCollection = getItems().filter(item => !item.ref.current?.disabled);\n    const triggerIndex = triggerCollection.findIndex(item => item.ref.current === target);\n    const triggerCount = triggerCollection.length;\n    if (triggerIndex === -1) return;\n    event.preventDefault();\n    let nextIndex = triggerIndex;\n    const homeIndex = 0;\n    const endIndex = triggerCount - 1;\n\n    const moveNext = () => {\n      nextIndex = triggerIndex + 1;\n\n      if (nextIndex > endIndex) {\n        nextIndex = homeIndex;\n      }\n    };\n\n    const movePrev = () => {\n      nextIndex = triggerIndex - 1;\n\n      if (nextIndex < homeIndex) {\n        nextIndex = endIndex;\n      }\n    };\n\n    switch (event.key) {\n      case \"Home\":\n        nextIndex = homeIndex;\n        break;\n\n      case \"End\":\n        nextIndex = endIndex;\n        break;\n\n      case \"ArrowRight\":\n        if (orientation === \"horizontal\") {\n          if (isDirectionLTR) {\n            moveNext();\n          } else {\n            movePrev();\n          }\n        }\n\n        break;\n\n      case \"ArrowDown\":\n        if (orientation === \"vertical\") {\n          moveNext();\n        }\n\n        break;\n\n      case \"ArrowLeft\":\n        if (orientation === \"horizontal\") {\n          if (isDirectionLTR) {\n            movePrev();\n          } else {\n            moveNext();\n          }\n        }\n\n        break;\n\n      case \"ArrowUp\":\n        if (orientation === \"vertical\") {\n          movePrev();\n        }\n\n        break;\n    }\n\n    const clampedIndex = nextIndex % triggerCount;\n    triggerCollection[clampedIndex].ref.current?.focus();\n  });\n  return /* @__PURE__ */jsx(AccordionImplProvider, {\n    scope: __scopeAccordion,\n    disabled,\n    direction: dir,\n    orientation,\n    children: /* @__PURE__ */jsx(Collection.Slot, {\n      scope: __scopeAccordion,\n      children: /* @__PURE__ */jsx(Primitive.div, { ...accordionProps,\n        \"data-orientation\": orientation,\n        ref: composedRefs,\n        onKeyDown: disabled ? void 0 : handleKeyDown\n      })\n    })\n  });\n});\nvar ITEM_NAME = \"AccordionItem\";\nvar [AccordionItemProvider, useAccordionItemContext] = createAccordionContext(ITEM_NAME);\nvar AccordionItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    value,\n    ...accordionItemProps\n  } = props;\n  const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n  const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  const triggerId = useId();\n  const open = value && valueContext.value.includes(value) || false;\n  const disabled = accordionContext.disabled || props.disabled;\n  return /* @__PURE__ */jsx(AccordionItemProvider, {\n    scope: __scopeAccordion,\n    open,\n    disabled,\n    triggerId,\n    children: /* @__PURE__ */jsx(CollapsiblePrimitive.Root, {\n      \"data-orientation\": accordionContext.orientation,\n      \"data-state\": getState(open),\n      ...collapsibleScope,\n      ...accordionItemProps,\n      ref: forwardedRef,\n      disabled,\n      open,\n      onOpenChange: open2 => {\n        if (open2) {\n          valueContext.onItemOpen(value);\n        } else {\n          valueContext.onItemClose(value);\n        }\n      }\n    })\n  });\n});\nAccordionItem.displayName = ITEM_NAME;\nvar HEADER_NAME = \"AccordionHeader\";\nvar AccordionHeader = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    ...headerProps\n  } = props;\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n  return /* @__PURE__ */jsx(Primitive.h3, {\n    \"data-orientation\": accordionContext.orientation,\n    \"data-state\": getState(itemContext.open),\n    \"data-disabled\": itemContext.disabled ? \"\" : void 0,\n    ...headerProps,\n    ref: forwardedRef\n  });\n});\nAccordionHeader.displayName = HEADER_NAME;\nvar TRIGGER_NAME = \"AccordionTrigger\";\nvar AccordionTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    ...triggerProps\n  } = props;\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n  const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  return /* @__PURE__ */jsx(Collection.ItemSlot, {\n    scope: __scopeAccordion,\n    children: /* @__PURE__ */jsx(CollapsiblePrimitive.Trigger, {\n      \"aria-disabled\": itemContext.open && !collapsibleContext.collapsible || void 0,\n      \"data-orientation\": accordionContext.orientation,\n      id: itemContext.triggerId,\n      ...collapsibleScope,\n      ...triggerProps,\n      ref: forwardedRef\n    })\n  });\n});\nAccordionTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"AccordionContent\";\nvar AccordionContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    ...contentProps\n  } = props;\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  return /* @__PURE__ */jsx(CollapsiblePrimitive.Content, {\n    role: \"region\",\n    \"aria-labelledby\": itemContext.triggerId,\n    \"data-orientation\": accordionContext.orientation,\n    ...collapsibleScope,\n    ...contentProps,\n    ref: forwardedRef,\n    style: {\n      [\"--radix-accordion-content-height\"]: \"var(--radix-collapsible-content-height)\",\n      [\"--radix-accordion-content-width\"]: \"var(--radix-collapsible-content-width)\",\n      ...props.style\n    }\n  });\n});\nAccordionContent.displayName = CONTENT_NAME;\n\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\n\nvar Root2 = Accordion;\nvar Item = AccordionItem;\nvar Header = AccordionHeader;\nvar Trigger2 = AccordionTrigger;\nvar Content2 = AccordionContent;\nexport { Accordion, AccordionContent, AccordionHeader, AccordionItem, AccordionTrigger, Content2 as Content, Header, Item, Root2 as Root, Trigger2 as Trigger, createAccordionScope };","map":{"version":3,"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,oBAAT,QAAqC,wCAArC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,YAAYC,oBAAZ,MAAsC,6BAAtC;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAGA,SAASC,YAAT,QAA6B,2BAA7B;AAqCU;AA7BV,IAAMC,iBAAiB,WAAvB;AACA,IAAMC,iBAAiB,CAAC,MAAD,EAAS,KAAT,EAAgB,WAAhB,EAA6B,SAA7B,EAAwC,WAAxC,EAAqD,YAArD,CAAvB;AAEA,IAAM,CAACC,UAAD,EAAaC,aAAb,EAA4BC,qBAA5B,IACJb,iBAA0CS,cAA1C,CADF;AAIA,IAAM,CAACK,sBAAD,EAAyBC,oBAAzB,IAAiDhB,mBAAmBU,cAAnB,EAAmC,CACxFI,qBADwF,EAExFP,sBAFwF,CAAnC,CAAvD;AAIA,IAAMU,sBAAsBV,wBAA5B;AAUA,IAAMW,YAAYnB,MAAMoB,UAAN,CAChB,CAACC,KAAD,EAAoEC,YAApE,KAAqF;AACnF,QAAM;AAAEC,QAAF;AAAQ,OAAGC;AAAX,MAA8BH,KAApC;AACA,QAAMI,cAAcD,cAApB;AACA,QAAME,gBAAgBF,cAAtB;AACA,SACE,mBAACX,WAAWc,QAAZ,EAAC;AAAoBC,WAAOP,MAAMQ,gBAAjC;AACEC,uBAAS,UAAT,GACC,mBAACC,qBAAD,EAAC,EAAuB,GAAGL,aAA1B;AAAyCM,WAAKV;AAA9C,KAAD,CADD,GAGC,mBAACW,mBAAD,EAAC,EAAqB,GAAGR,WAAxB;AAAqCO,WAAKV;AAA1C,KAAD;AAJH,GAAD,CADF;AASF,CAdgB,CAAlB;AAiBAH,UAAUe,WAAV,GAAwBvB,cAAxB;AAUA,IAAM,CAACwB,sBAAD,EAAyBC,wBAAzB,IACJpB,uBAAmDL,cAAnD,CADF;AAGA,IAAM,CAAC0B,4BAAD,EAA+BC,8BAA/B,IAAiEtB,uBACrEL,cADqE,EAErE;AAAE4B,eAAa;AAAf,CAFqE,CAAvE;AA2BA,IAAMN,sBAAsBjC,MAAMoB,UAAN,CAC1B,CAACC,KAAD,EAA+CC,YAA/C,KAAgE;AAC9D,QAAM;AACJkB,WAAOC,SADH;AAEJC,gBAFI;AAGJC,oBAAgB,MAAM,CAAC,CAHnB;AAIJJ,kBAAc,KAJV;AAKJ,OAAGK;AALC,MAMFvB,KANJ;AAQA,QAAM,CAACmB,KAAD,EAAQK,QAAR,IAAoBxC,qBAAqB;AAC7CyC,UAAML,SADuC;AAE7CM,iBAAaL,YAFgC;AAG7CM,cAAUL;AAHmC,GAArB,CAA1B;AAMA,SACE,mBAACR,sBAAD,EAAC;AACCP,WAAOP,MAAMQ,gBADd;AAECW,WAAOA,QAAQ,CAACA,KAAD,CAAR,GAAkB,EAF1B;AAGCS,gBAAYJ,QAHb;AAICK,iBAAalD,MAAMmD,WAAN,CAAkB,MAAMZ,eAAeM,SAAS,EAAT,CAAvC,EAAqD,CAACN,WAAD,EAAcM,QAAd,CAArD,CAJd;AAMCf,iCAACO,4BAAD,EAAC;AAA6BT,aAAOP,MAAMQ,gBAA1C;AAA4DU,iBAA5D;AACCT,mCAACsB,aAAD,EAAC,EAAe,GAAGR,oBAAlB;AAAwCZ,aAAKV;AAA7C,OAAD;AADD,KAAD;AAND,GAAD,CADF;AAYF,CA5B0B,CAA5B;AAkDA,IAAMS,wBAAwB/B,MAAMoB,UAAN,CAG5B,CAACC,KAAD,EAAiDC,YAAjD,KAAkE;AAClE,QAAM;AACJkB,WAAOC,SADH;AAEJC,gBAFI;AAGJC,oBAAgB,MAAM,CAAC,CAHnB;AAIJ,OAAGU;AAJC,MAKFhC,KALJ;AAOA,QAAM,CAACmB,QAAQ,EAAT,EAAaK,QAAb,IAAyBxC,qBAAqB;AAClDyC,UAAML,SAD4C;AAElDM,iBAAaL,YAFqC;AAGlDM,cAAUL;AAHwC,GAArB,CAA/B;AAMA,QAAMW,iBAAiBtD,MAAMmD,WAAN,CACpBI,SAAD,IAAuBV,SAAS;AAAA,QAACW,SAAD,uEAAa,EAAb;AAAA,WAAoB,CAAC,GAAGA,SAAJ,EAAeD,SAAf,CAApB;AAAA,GAAT,CADF,EAErB,CAACV,QAAD,CAFqB,CAAvB;AAKA,QAAMY,kBAAkBzD,MAAMmD,WAAN,CACrBI,SAAD,IACEV,SAAS;AAAA,QAACW,SAAD,uEAAa,EAAb;AAAA,WAAoBA,UAAUE,MAAV,CAAkBlB,MAAD,IAAWA,WAAUe,SAAtC,CAApB;AAAA,GAAT,CAFoB,EAGtB,CAACV,QAAD,CAHsB,CAAxB;AAMA,SACE,mBAACV,sBAAD,EAAC;AACCP,WAAOP,MAAMQ,gBADd;AAECW,SAFD;AAGCS,gBAAYK,cAHb;AAICJ,iBAAaO,eAJd;AAMC3B,iCAACO,4BAAD,EAAC;AAA6BT,aAAOP,MAAMQ,gBAA1C;AAA4DU,mBAAa,IAAzE;AACCT,mCAACsB,aAAD,EAAC,EAAe,GAAGC,sBAAlB;AAA0CrB,aAAKV;AAA/C,OAAD;AADD,KAAD;AAND,GAAD,CADF;AAYD,CAxC6B,CAA9B;AAkDA,IAAM,CAACqC,qBAAD,EAAwBC,mBAAxB,IACJ5C,uBAAkDL,cAAlD,CADF;AAuBA,IAAMyC,gBAAgBpD,MAAMoB,UAAN,CACpB,CAACC,KAAD,EAAyCC,YAAzC,KAA0D;AACxD,QAAM;AAAEO,oBAAF;AAAoBgC,YAApB;AAA8BC,OAA9B;AAAmCC,kBAAc,UAAjD;AAA6D,OAAGvC;AAAhE,MAAmFH,KAAzF;AACA,QAAM2C,eAAehE,MAAMiE,MAAN,CAAmC,IAAnC,CAArB;AACA,QAAMC,eAAe/D,gBAAgB6D,YAAhB,EAA8B1C,YAA9B,CAArB;AACA,QAAM6C,WAAWrD,cAAce,gBAAd,CAAjB;AACA,QAAMuC,YAAY1D,aAAaoD,GAAb,CAAlB;AACA,QAAMO,iBAAiBD,cAAc,KAArC;AAEA,QAAME,gBAAgBlE,qBAAqBiB,MAAMkD,SAA3B,EAAuCC,KAAD,IAAW;AACrE,QAAI,CAAC5D,eAAe6D,QAAf,CAAwBD,MAAME,GAA9B,CAAL,EAAyC;AACzC,UAAMC,SAASH,MAAMG,MAArB;AACA,UAAMC,oBAAoBT,WAAWT,MAAX,CAAmBmB,IAAD,IAAU,CAACA,KAAK7C,GAAL,CAAS8C,OAAT,EAAkBjB,QAA/C,CAA1B;AACA,UAAMkB,eAAeH,kBAAkBI,SAAlB,CAA6BH,IAAD,IAAUA,KAAK7C,GAAL,CAAS8C,OAAT,KAAqBH,MAA3D,CAArB;AACA,UAAMM,eAAeL,kBAAkBM,MAAvC;AAEA,QAAIH,iBAAiB,EAArB,EAAyB;AAGzBP,UAAMW,cAAN;AAEA,QAAIC,YAAYL,YAAhB;AACA,UAAMM,YAAY,CAAlB;AACA,UAAMC,WAAWL,eAAe,CAAhC;;AAEA,UAAMM,WAAW,MAAM;AACrBH,kBAAYL,eAAe,CAA3B;;AACA,UAAIK,YAAYE,QAAhB,EAA0B;AACxBF,oBAAYC,SAAZ;AACF;AACF,KALA;;AAOA,UAAMG,WAAW,MAAM;AACrBJ,kBAAYL,eAAe,CAA3B;;AACA,UAAIK,YAAYC,SAAhB,EAA2B;AACzBD,oBAAYE,QAAZ;AACF;AACF,KALA;;AAOA,YAAQd,MAAME,GAAd;AACE,WAAK,MAAL;AACEU,oBAAYC,SAAZ;AACA;;AACF,WAAK,KAAL;AACED,oBAAYE,QAAZ;AACA;;AACF,WAAK,YAAL;AACE,YAAIvB,gBAAgB,YAApB,EAAkC;AAChC,cAAIM,cAAJ,EAAoB;AAClBkB;AACF,WAFA,MAEO;AACLC;AACF;AACF;;AACA;;AACF,WAAK,WAAL;AACE,YAAIzB,gBAAgB,UAApB,EAAgC;AAC9BwB;AACF;;AACA;;AACF,WAAK,WAAL;AACE,YAAIxB,gBAAgB,YAApB,EAAkC;AAChC,cAAIM,cAAJ,EAAoB;AAClBmB;AACF,WAFA,MAEO;AACLD;AACF;AACF;;AACA;;AACF,WAAK,SAAL;AACE,YAAIxB,gBAAgB,UAApB,EAAgC;AAC9ByB;AACF;;AACA;AAlCJ;;AAqCA,UAAMC,eAAeL,YAAYH,YAAjC;AACAL,sBAAkBa,YAAlB,EAAgCzD,GAAhC,CAAoC8C,OAApC,EAA6CY,KAA7C;AACD,GArEqB,CAAtB;AAuEA,SACE,mBAAC/B,qBAAD,EAAC;AACC/B,WAAOC,gBADR;AAECgC,YAFD;AAGCO,eAAWN,GAHZ;AAICC,eAJD;AAMCjC,iCAACjB,WAAW8E,IAAZ,EAAC;AAAgB/D,aAAOC,gBAAvB;AACCC,mCAACxB,UAAUsF,GAAX,EAAC,EACE,GAAGpE,cADL;AAEC,4BAAkBuC,WAFnB;AAGC/B,aAAKkC,YAHN;AAICK,mBAAWV,WAAW,MAAX,GAAuBS;AAJnC,OAAD;AADD,KAAD;AAND,GAAD,CADF;AAiBF,CAjGoB,CAAtB;AAwGA,IAAMuB,YAAY,eAAlB;AAGA,IAAM,CAACC,qBAAD,EAAwBC,uBAAxB,IACJ/E,uBAAkD6E,SAAlD,CADF;AAsBA,IAAMG,gBAAgBhG,MAAMoB,UAAN,CACpB,CAACC,KAAD,EAAyCC,YAAzC,KAA0D;AACxD,QAAM;AAAEO,oBAAF;AAAoBW,SAApB;AAA2B,OAAGyD;AAA9B,MAAqD5E,KAA3D;AACA,QAAM6E,mBAAmBtC,oBAAoBiC,SAApB,EAA+BhE,gBAA/B,CAAzB;AACA,QAAMsE,eAAe/D,yBAAyByD,SAAzB,EAAoChE,gBAApC,CAArB;AACA,QAAMuE,mBAAmBlF,oBAAoBW,gBAApB,CAAzB;AACA,QAAMwE,YAAY5F,OAAlB;AACA,QAAM6F,OAAQ9D,SAAS2D,aAAa3D,KAAb,CAAmBiC,QAAnB,CAA4BjC,KAA5B,CAAT,IAAgD,KAA9D;AACA,QAAMqB,WAAWqC,iBAAiBrC,QAAjB,IAA6BxC,MAAMwC,QAApD;AAEA,SACE,mBAACiC,qBAAD,EAAC;AACClE,WAAOC,gBADR;AAECyE,QAFD;AAGCzC,YAHD;AAICwC,aAJD;AAMCvE,iCAAsBvB,yBAAtB,EAAC;AACC,0BAAkB2F,iBAAiBnC,WADpC;AAEC,oBAAYwC,SAASD,IAAT,CAFb;AAGE,SAAGF,gBAHL;AAIE,SAAGH,kBAJL;AAKCjE,WAAKV,YALN;AAMCuC,cAND;AAOCyC,UAPD;AAQCE,oBAAeF,KAAD,IAAU;AACtB,YAAIA,KAAJ,EAAU;AACRH,uBAAalD,UAAb,CAAwBT,KAAxB;AACF,SAFA,MAEO;AACL2D,uBAAajD,WAAb,CAAyBV,KAAzB;AACF;AACF;AAdD,KAAD;AAND,GAAD,CADF;AAyBF,CAnCoB,CAAtB;AAsCAwD,cAAc9D,WAAd,GAA4B2D,SAA5B;AAMA,IAAMY,cAAc,iBAApB;AAUA,IAAMC,kBAAkB1G,MAAMoB,UAAN,CACtB,CAACC,KAAD,EAA2CC,YAA3C,KAA4D;AAC1D,QAAM;AAAEO,oBAAF;AAAoB,OAAG8E;AAAvB,MAAuCtF,KAA7C;AACA,QAAM6E,mBAAmBtC,oBAAoBjD,cAApB,EAAoCkB,gBAApC,CAAzB;AACA,QAAM+E,cAAcb,wBAAwBU,WAAxB,EAAqC5E,gBAArC,CAApB;AACA,SACE,mBAACvB,UAAUuG,EAAX,EAAC;AACC,wBAAkBX,iBAAiBnC,WADpC;AAEC,kBAAYwC,SAASK,YAAYN,IAArB,CAFb;AAGC,qBAAeM,YAAY/C,QAAZ,GAAuB,EAAvB,GAA4B,MAH5C;AAIE,OAAG8C,WAJL;AAKC3E,SAAKV;AALN,GAAD,CADF;AASF,CAdsB,CAAxB;AAiBAoF,gBAAgBxE,WAAhB,GAA8BuE,WAA9B;AAMA,IAAMK,eAAe,kBAArB;AAUA,IAAMC,mBAAmB/G,MAAMoB,UAAN,CACvB,CAACC,KAAD,EAA4CC,YAA5C,KAA6D;AAC3D,QAAM;AAAEO,oBAAF;AAAoB,OAAGmF;AAAvB,MAAwC3F,KAA9C;AACA,QAAM6E,mBAAmBtC,oBAAoBjD,cAApB,EAAoCkB,gBAApC,CAAzB;AACA,QAAM+E,cAAcb,wBAAwBe,YAAxB,EAAsCjF,gBAAtC,CAApB;AACA,QAAMoF,qBAAqB3E,+BAA+BwE,YAA/B,EAA6CjF,gBAA7C,CAA3B;AACA,QAAMuE,mBAAmBlF,oBAAoBW,gBAApB,CAAzB;AACA,SACE,mBAAChB,WAAWqG,QAAZ,EAAC;AAAoBtF,WAAOC,gBAA3B;AACCC,iCAAsBvB,4BAAtB,EAAC;AACC,uBAAgBqG,YAAYN,IAAZ,IAAoB,CAACW,mBAAmB1E,WAAxC,IAAwD,MADzE;AAEC,0BAAkB2D,iBAAiBnC,WAFpC;AAGCoD,UAAIP,YAAYP,SAHjB;AAIE,SAAGD,gBAJL;AAKE,SAAGY,YALL;AAMChF,WAAKV;AANN,KAAD;AADD,GAAD,CADF;AAYF,CAnBuB,CAAzB;AAsBAyF,iBAAiB7E,WAAjB,GAA+B4E,YAA/B;AAMA,IAAMM,eAAe,kBAArB;AASA,IAAMC,mBAAmBrH,MAAMoB,UAAN,CACvB,CAACC,KAAD,EAA4CC,YAA5C,KAA6D;AAC3D,QAAM;AAAEO,oBAAF;AAAoB,OAAGyF;AAAvB,MAAwCjG,KAA9C;AACA,QAAM6E,mBAAmBtC,oBAAoBjD,cAApB,EAAoCkB,gBAApC,CAAzB;AACA,QAAM+E,cAAcb,wBAAwBqB,YAAxB,EAAsCvF,gBAAtC,CAApB;AACA,QAAMuE,mBAAmBlF,oBAAoBW,gBAApB,CAAzB;AACA,SACE,mBAAsBtB,4BAAtB,EAAC;AACCgH,UAAK,QADN;AAEC,uBAAiBX,YAAYP,SAF9B;AAGC,wBAAkBH,iBAAiBnC,WAHpC;AAIE,OAAGqC,gBAJL;AAKE,OAAGkB,YALL;AAMCtF,SAAKV,YANN;AAOCkG,WAAO;AACL,OAAC,kCAAD,GAA6C,yCADxC;AAEL,OAAC,iCAAD,GAA4C,wCAFvC;AAGL,SAAGnG,MAAMmG;AAHJ;AAPR,GAAD,CADF;AAeF,CArBuB,CAAzB;AAwBAH,iBAAiBnF,WAAjB,GAA+BkF,YAA/B;;AAIA,SAASb,QAAT,CAAkBD,IAAlB,EAAkC;AAChC,SAAOA,OAAO,MAAP,GAAgB,QAAvB;AACF;;AAEA,IAAMmB,QAAOtG,SAAb;AACA,IAAMuG,OAAO1B,aAAb;AACA,IAAM2B,SAASjB,eAAf;AACA,IAAMkB,WAAUb,gBAAhB;AACA,IAAMc,WAAUR,gBAAhB","names":["React","createContextScope","createCollection","useComposedRefs","composeEventHandlers","useControllableState","Primitive","CollapsiblePrimitive","createCollapsibleScope","useId","useDirection","ACCORDION_NAME","ACCORDION_KEYS","Collection","useCollection","createCollectionScope","createAccordionContext","createAccordionScope","useCollapsibleScope","Accordion","forwardRef","props","forwardedRef","type","accordionProps","singleProps","multipleProps","Provider","scope","__scopeAccordion","children","AccordionImplMultiple","ref","AccordionImplSingle","displayName","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","value","valueProp","defaultValue","onValueChange","accordionSingleProps","setValue","prop","defaultProp","onChange","onItemOpen","onItemClose","useCallback","AccordionImpl","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","AccordionImplProvider","useAccordionContext","disabled","dir","orientation","accordionRef","useRef","composedRefs","getItems","direction","isDirectionLTR","handleKeyDown","onKeyDown","event","includes","key","target","triggerCollection","item","current","triggerIndex","findIndex","triggerCount","length","preventDefault","nextIndex","homeIndex","endIndex","moveNext","movePrev","clampedIndex","focus","Slot","div","ITEM_NAME","AccordionItemProvider","useAccordionItemContext","AccordionItem","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","open","getState","onOpenChange","HEADER_NAME","AccordionHeader","headerProps","itemContext","h3","TRIGGER_NAME","AccordionTrigger","triggerProps","collapsibleContext","ItemSlot","id","CONTENT_NAME","AccordionContent","contentProps","role","style","Root","Item","Header","Trigger","Content"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-accordion/src/Accordion.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n  direction: AccordionImplProps['dir'];\n  orientation: AccordionImplProps['orientation'];\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * The layout in which the Accordion operates.\n   * @default vertical\n   */\n  orientation?: React.AriaAttributes['aria-orientation'];\n  /**\n   * The language read direction.\n   */\n  dir?: Direction;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, dir, orientation = 'vertical', ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n    const direction = useDirection(dir);\n    const isDirectionLTR = direction === 'ltr';\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      const homeIndex = 0;\n      const endIndex = triggerCount - 1;\n\n      const moveNext = () => {\n        nextIndex = triggerIndex + 1;\n        if (nextIndex > endIndex) {\n          nextIndex = homeIndex;\n        }\n      };\n\n      const movePrev = () => {\n        nextIndex = triggerIndex - 1;\n        if (nextIndex < homeIndex) {\n          nextIndex = endIndex;\n        }\n      };\n\n      switch (event.key) {\n        case 'Home':\n          nextIndex = homeIndex;\n          break;\n        case 'End':\n          nextIndex = endIndex;\n          break;\n        case 'ArrowRight':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              moveNext();\n            } else {\n              movePrev();\n            }\n          }\n          break;\n        case 'ArrowDown':\n          if (orientation === 'vertical') {\n            moveNext();\n          }\n          break;\n        case 'ArrowLeft':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              movePrev();\n            } else {\n              moveNext();\n            }\n          }\n          break;\n        case 'ArrowUp':\n          if (orientation === 'vertical') {\n            movePrev();\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex].ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider\n        scope={__scopeAccordion}\n        disabled={disabled}\n        direction={dir}\n        orientation={orientation}\n      >\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            data-orientation={orientation}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-orientation={accordionContext.orientation}\n          data-state={getState(open)}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = React.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-orientation={accordionContext.orientation}\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          data-orientation={accordionContext.orientation}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        data-orientation={accordionContext.orientation}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"]},"metadata":{},"sourceType":"module"}