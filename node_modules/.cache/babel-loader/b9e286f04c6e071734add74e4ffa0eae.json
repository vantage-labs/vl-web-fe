{"ast":null,"code":"import _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { isDragActive } from '../drag/state/is-active.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPressing } from './utils/state.mjs';\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\n\nfunction isValidPressEvent(event) {\n  return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\n\n\nfunction press(elementOrSelector, onPressStart) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _setupGesture = setupGesture(elementOrSelector, options),\n      _setupGesture2 = _slicedToArray(_setupGesture, 3),\n      elements = _setupGesture2[0],\n      eventOptions = _setupGesture2[1],\n      cancelEvents = _setupGesture2[2];\n\n  var startPress = function startPress(startEvent) {\n    var element = startEvent.currentTarget;\n    if (!isValidPressEvent(startEvent) || isPressing.has(element)) return;\n    isPressing.add(element);\n    var onPressEnd = onPressStart(startEvent);\n\n    var onPointerEnd = function onPointerEnd(endEvent, success) {\n      window.removeEventListener(\"pointerup\", onPointerUp);\n      window.removeEventListener(\"pointercancel\", onPointerCancel);\n\n      if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {\n        return;\n      }\n\n      isPressing.delete(element);\n\n      if (onPressEnd) {\n        onPressEnd(endEvent, {\n          success: success\n        });\n      }\n    };\n\n    var onPointerUp = function onPointerUp(upEvent) {\n      onPointerEnd(upEvent, options.useGlobalTarget || isNodeOrChild(element, upEvent.target));\n    };\n\n    var onPointerCancel = function onPointerCancel(cancelEvent) {\n      onPointerEnd(cancelEvent, false);\n    };\n\n    window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n    window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n  };\n\n  elements.forEach(function (element) {\n    if (!isElementKeyboardAccessible(element)) {\n      element.tabIndex = 0;\n    }\n\n    var target = options.useGlobalTarget ? window : element;\n    target.addEventListener(\"pointerdown\", startPress, eventOptions);\n    element.addEventListener(\"focus\", function (event) {\n      return enableKeyboardPress(event, eventOptions);\n    }, eventOptions);\n  });\n  return cancelEvents;\n}\n\nexport { press };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/motion-dom/dist/es/gestures/press/index.mjs"],"names":["isDragActive","isPrimaryPointer","setupGesture","enableKeyboardPress","isElementKeyboardAccessible","isNodeOrChild","isPressing","isValidPressEvent","event","press","elementOrSelector","onPressStart","options","elements","eventOptions","cancelEvents","startPress","startEvent","element","currentTarget","has","add","onPressEnd","onPointerEnd","endEvent","success","window","removeEventListener","onPointerUp","onPointerCancel","delete","upEvent","useGlobalTarget","target","cancelEvent","addEventListener","forEach","tabIndex"],"mappings":"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","sourcesContent":["import { isDragActive } from '../drag/state/is-active.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n    return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(elementOrSelector, onPressStart, options = {}) {\n    const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);\n    const startPress = (startEvent) => {\n        const element = startEvent.currentTarget;\n        if (!isValidPressEvent(startEvent) || isPressing.has(element))\n            return;\n        isPressing.add(element);\n        const onPressEnd = onPressStart(startEvent);\n        const onPointerEnd = (endEvent, success) => {\n            window.removeEventListener(\"pointerup\", onPointerUp);\n            window.removeEventListener(\"pointercancel\", onPointerCancel);\n            if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {\n                return;\n            }\n            isPressing.delete(element);\n            if (onPressEnd) {\n                onPressEnd(endEvent, { success });\n            }\n        };\n        const onPointerUp = (upEvent) => {\n            onPointerEnd(upEvent, options.useGlobalTarget ||\n                isNodeOrChild(element, upEvent.target));\n        };\n        const onPointerCancel = (cancelEvent) => {\n            onPointerEnd(cancelEvent, false);\n        };\n        window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n        window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    };\n    elements.forEach((element) => {\n        if (!isElementKeyboardAccessible(element)) {\n            element.tabIndex = 0;\n        }\n        const target = options.useGlobalTarget ? window : element;\n        target.addEventListener(\"pointerdown\", startPress, eventOptions);\n        element.addEventListener(\"focus\", (event) => enableKeyboardPress(event, eventOptions), eventOptions);\n    });\n    return cancelEvents;\n}\n\nexport { press };\n"]},"metadata":{},"sourceType":"module"}