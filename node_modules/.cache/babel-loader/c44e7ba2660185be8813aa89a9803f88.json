{"ast":null,"code":"import _objectSpread from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isPrimaryPointer } from 'motion-dom';\nimport { secondsToMilliseconds, millisecondsToSeconds } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n/**\n * @internal\n */\n\nvar PanSession = /*#__PURE__*/function () {\n  function PanSession(event, handlers) {\n    var _this = this;\n\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        transformPagePoint = _ref.transformPagePoint,\n        contextWindow = _ref.contextWindow,\n        _ref$dragSnapToOrigin = _ref.dragSnapToOrigin,\n        dragSnapToOrigin = _ref$dragSnapToOrigin === void 0 ? false : _ref$dragSnapToOrigin;\n\n    _classCallCheck(this, PanSession);\n\n    /**\n     * @internal\n     */\n    this.startEvent = null;\n    /**\n     * @internal\n     */\n\n    this.lastMoveEvent = null;\n    /**\n     * @internal\n     */\n\n    this.lastMoveEventInfo = null;\n    /**\n     * @internal\n     */\n\n    this.handlers = {};\n    /**\n     * @internal\n     */\n\n    this.contextWindow = window;\n\n    this.updatePoint = function () {\n      if (!(_this.lastMoveEvent && _this.lastMoveEventInfo)) return;\n      var info = getPanInfo(_this.lastMoveEventInfo, _this.history);\n      var isPanStarted = _this.startEvent !== null; // Only start panning if the offset is larger than 3 pixels. If we make it\n      // any larger than this we'll want to reset the pointer history\n      // on the first update to avoid visual snapping to the cursoe.\n\n      var isDistancePastThreshold = distance2D(info.offset, {\n        x: 0,\n        y: 0\n      }) >= 3;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      var point = info.point;\n      var timestamp = frameData.timestamp;\n\n      _this.history.push(_objectSpread(_objectSpread({}, point), {}, {\n        timestamp: timestamp\n      }));\n\n      var _this$handlers = _this.handlers,\n          onStart = _this$handlers.onStart,\n          onMove = _this$handlers.onMove;\n\n      if (!isPanStarted) {\n        onStart && onStart(_this.lastMoveEvent, info);\n        _this.startEvent = _this.lastMoveEvent;\n      }\n\n      onMove && onMove(_this.lastMoveEvent, info);\n    };\n\n    this.handlePointerMove = function (event, info) {\n      _this.lastMoveEvent = event;\n      _this.lastMoveEventInfo = transformPoint(info, _this.transformPagePoint); // Throttle mouse move event to once per frame\n\n      frame.update(_this.updatePoint, true);\n    };\n\n    this.handlePointerUp = function (event, info) {\n      _this.end();\n\n      var _this$handlers2 = _this.handlers,\n          onEnd = _this$handlers2.onEnd,\n          onSessionEnd = _this$handlers2.onSessionEnd,\n          resumeAnimation = _this$handlers2.resumeAnimation;\n      if (_this.dragSnapToOrigin) resumeAnimation && resumeAnimation();\n      if (!(_this.lastMoveEvent && _this.lastMoveEventInfo)) return;\n      var panInfo = getPanInfo(event.type === \"pointercancel\" ? _this.lastMoveEventInfo : transformPoint(info, _this.transformPagePoint), _this.history);\n\n      if (_this.startEvent && onEnd) {\n        onEnd(event, panInfo);\n      }\n\n      onSessionEnd && onSessionEnd(event, panInfo);\n    }; // If we have more than one touch, don't start detecting this gesture\n\n\n    if (!isPrimaryPointer(event)) return;\n    this.dragSnapToOrigin = dragSnapToOrigin;\n    this.handlers = handlers;\n    this.transformPagePoint = transformPagePoint;\n    this.contextWindow = contextWindow || window;\n    var info = extractEventInfo(event);\n    var initialInfo = transformPoint(info, this.transformPagePoint);\n    var point = initialInfo.point;\n    var timestamp = frameData.timestamp;\n    this.history = [_objectSpread(_objectSpread({}, point), {}, {\n      timestamp: timestamp\n    })];\n    var onSessionStart = handlers.onSessionStart;\n    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n    this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n  }\n\n  _createClass(PanSession, [{\n    key: \"updateHandlers\",\n    value: function updateHandlers(handlers) {\n      this.handlers = handlers;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.removeListeners && this.removeListeners();\n      cancelFrame(this.updatePoint);\n    }\n  }]);\n\n  return PanSession;\n}();\n\nfunction transformPoint(info, transformPagePoint) {\n  return transformPagePoint ? {\n    point: transformPagePoint(info.point)\n  } : info;\n}\n\nfunction subtractPoint(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n\nfunction getPanInfo(_ref2, history) {\n  var point = _ref2.point;\n  return {\n    point: point,\n    delta: subtractPoint(point, lastDevicePoint(history)),\n    offset: subtractPoint(point, startDevicePoint(history)),\n    velocity: getVelocity(history, 0.1)\n  };\n}\n\nfunction startDevicePoint(history) {\n  return history[0];\n}\n\nfunction lastDevicePoint(history) {\n  return history[history.length - 1];\n}\n\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  var i = history.length - 1;\n  var timestampedPoint = null;\n  var lastPoint = lastDevicePoint(history);\n\n  while (i >= 0) {\n    timestampedPoint = history[i];\n\n    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {\n      break;\n    }\n\n    i--;\n  }\n\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  var time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  var currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n\n  return currentVelocity;\n}\n\nexport { PanSession };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs"],"names":["isPrimaryPointer","secondsToMilliseconds","millisecondsToSeconds","addPointerEvent","extractEventInfo","distance2D","pipe","frame","cancelFrame","frameData","PanSession","event","handlers","transformPagePoint","contextWindow","dragSnapToOrigin","startEvent","lastMoveEvent","lastMoveEventInfo","window","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","offset","x","y","point","timestamp","push","onStart","onMove","handlePointerMove","transformPoint","update","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","type","initialInfo","onSessionStart","removeListeners","subtractPoint","a","b","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","length","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity"],"mappings":"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","sourcesContent":["import { isPrimaryPointer } from 'motion-dom';\nimport { secondsToMilliseconds, millisecondsToSeconds } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false, } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n"]},"metadata":{},"sourceType":"module"}