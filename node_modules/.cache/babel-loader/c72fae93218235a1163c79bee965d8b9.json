{"ast":null,"code":"import _objectSpread from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"transition\", \"transitionEnd\"];\nimport { getValueTransition } from 'motion-dom';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\n\nfunction shouldBlockAnimation(_ref, key) {\n  var protectedKeys = _ref.protectedKeys,\n      needsAnimating = _ref.needsAnimating;\n  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\n\nfunction animateTarget(visualElement, targetAndTransition) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$delay = _ref2.delay,\n      delay = _ref2$delay === void 0 ? 0 : _ref2$delay,\n      transitionOverride = _ref2.transitionOverride,\n      type = _ref2.type;\n\n  var _a;\n\n  var _targetAndTransition$ = targetAndTransition.transition,\n      transition = _targetAndTransition$ === void 0 ? visualElement.getDefaultTransition() : _targetAndTransition$,\n      transitionEnd = targetAndTransition.transitionEnd,\n      target = _objectWithoutProperties(targetAndTransition, _excluded);\n\n  if (transitionOverride) transition = transitionOverride;\n  var animations = [];\n  var animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n\n  for (var key in target) {\n    var value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n    var valueTarget = target[key];\n\n    if (valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n\n    var valueTransition = _objectSpread({\n      delay: delay\n    }, getValueTransition(transition || {}, key));\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n\n\n    var isHandoff = false;\n\n    if (window.MotionHandoffAnimation) {\n      var appearId = getOptimisedAppearId(visualElement);\n\n      if (appearId) {\n        var startTime = window.MotionHandoffAnimation(appearId, key, frame);\n\n        if (startTime !== null) {\n          valueTransition.startTime = startTime;\n          isHandoff = true;\n        }\n      }\n    }\n\n    addValueToWillChange(visualElement, key);\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition, visualElement, isHandoff));\n    var animation = value.animation;\n\n    if (animation) {\n      animations.push(animation);\n    }\n  }\n\n  if (transitionEnd) {\n    Promise.all(animations).then(function () {\n      frame.update(function () {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n      });\n    });\n  }\n\n  return animations;\n}\n\nexport { animateTarget };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"names":["getValueTransition","transformProps","setTarget","addValueToWillChange","getOptimisedAppearId","animateMotionValue","frame","shouldBlockAnimation","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","targetAndTransition","delay","transitionOverride","type","_a","transition","getDefaultTransition","transitionEnd","target","animations","animationTypeState","animationState","getState","value","getValue","latestValues","valueTarget","undefined","valueTransition","isHandoff","window","MotionHandoffAnimation","appearId","startTime","start","shouldReduceMotion","has","animation","push","Promise","all","then","update"],"mappings":";;;AAAA,SAASA,kBAAT,QAAmC,YAAnC;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,oBAAT,QAAqC,iDAArC;AACA,SAASC,oBAAT,QAAqC,uCAArC;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,KAAT,QAAsB,2BAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,OAAiEC,GAAjE,EAAsE;AAAA,MAAtCC,aAAsC,QAAtCA,aAAsC;AAAA,MAAvBC,cAAuB,QAAvBA,cAAuB;AAClE,MAAMC,WAAW,GAAGF,aAAa,CAACG,cAAd,CAA6BJ,GAA7B,KAAqCE,cAAc,CAACF,GAAD,CAAd,KAAwB,IAAjF;AACAE,EAAAA,cAAc,CAACF,GAAD,CAAd,GAAsB,KAAtB;AACA,SAAOG,WAAP;AACH;;AACD,SAASE,aAAT,CAAuBC,aAAvB,EAAsCC,mBAAtC,EAAyG;AAAA,kFAAJ,EAAI;AAAA,0BAA5CC,KAA4C;AAAA,MAA5CA,KAA4C,4BAApC,CAAoC;AAAA,MAAjCC,kBAAiC,SAAjCA,kBAAiC;AAAA,MAAbC,IAAa,SAAbA,IAAa;;AACrG,MAAIC,EAAJ;;AACA,8BAAsFJ,mBAAtF,CAAMK,UAAN;AAAA,MAAMA,UAAN,sCAAmBN,aAAa,CAACO,oBAAd,EAAnB;AAAA,MAAyDC,aAAzD,GAAsFP,mBAAtF,CAAyDO,aAAzD;AAAA,MAA2EC,MAA3E,4BAAsFR,mBAAtF;;AACA,MAAIE,kBAAJ,EACIG,UAAU,GAAGH,kBAAb;AACJ,MAAMO,UAAU,GAAG,EAAnB;AACA,MAAMC,kBAAkB,GAAGP,IAAI,IAC3BJ,aAAa,CAACY,cADS,IAEvBZ,aAAa,CAACY,cAAd,CAA6BC,QAA7B,GAAwCT,IAAxC,CAFJ;;AAGA,OAAK,IAAMV,GAAX,IAAkBe,MAAlB,EAA0B;AACtB,QAAMK,KAAK,GAAGd,aAAa,CAACe,QAAd,CAAuBrB,GAAvB,EAA4B,CAACW,EAAE,GAAGL,aAAa,CAACgB,YAAd,CAA2BtB,GAA3B,CAAN,MAA2C,IAA3C,IAAmDW,EAAE,KAAK,KAAK,CAA/D,GAAmEA,EAAnE,GAAwE,IAApG,CAAd;AACA,QAAMY,WAAW,GAAGR,MAAM,CAACf,GAAD,CAA1B;;AACA,QAAIuB,WAAW,KAAKC,SAAhB,IACCP,kBAAkB,IACflB,oBAAoB,CAACkB,kBAAD,EAAqBjB,GAArB,CAF5B,EAEwD;AACpD;AACH;;AACD,QAAMyB,eAAe;AACjBjB,MAAAA,KAAK,EAALA;AADiB,OAEdhB,kBAAkB,CAACoB,UAAU,IAAI,EAAf,EAAmBZ,GAAnB,CAFJ,CAArB;AAIA;AACR;AACA;AACA;;;AACQ,QAAI0B,SAAS,GAAG,KAAhB;;AACA,QAAIC,MAAM,CAACC,sBAAX,EAAmC;AAC/B,UAAMC,QAAQ,GAAGjC,oBAAoB,CAACU,aAAD,CAArC;;AACA,UAAIuB,QAAJ,EAAc;AACV,YAAMC,SAAS,GAAGH,MAAM,CAACC,sBAAP,CAA8BC,QAA9B,EAAwC7B,GAAxC,EAA6CF,KAA7C,CAAlB;;AACA,YAAIgC,SAAS,KAAK,IAAlB,EAAwB;AACpBL,UAAAA,eAAe,CAACK,SAAhB,GAA4BA,SAA5B;AACAJ,UAAAA,SAAS,GAAG,IAAZ;AACH;AACJ;AACJ;;AACD/B,IAAAA,oBAAoB,CAACW,aAAD,EAAgBN,GAAhB,CAApB;AACAoB,IAAAA,KAAK,CAACW,KAAN,CAAYlC,kBAAkB,CAACG,GAAD,EAAMoB,KAAN,EAAaG,WAAb,EAA0BjB,aAAa,CAAC0B,kBAAd,IAAoCvC,cAAc,CAACwC,GAAf,CAAmBjC,GAAnB,CAApC,GAClD;AAAEU,MAAAA,IAAI,EAAE;AAAR,KADkD,GAElDe,eAFwB,EAEPnB,aAFO,EAEQoB,SAFR,CAA9B;AAGA,QAAMQ,SAAS,GAAGd,KAAK,CAACc,SAAxB;;AACA,QAAIA,SAAJ,EAAe;AACXlB,MAAAA,UAAU,CAACmB,IAAX,CAAgBD,SAAhB;AACH;AACJ;;AACD,MAAIpB,aAAJ,EAAmB;AACfsB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,UAAZ,EAAwBsB,IAAxB,CAA6B,YAAM;AAC/BxC,MAAAA,KAAK,CAACyC,MAAN,CAAa,YAAM;AACfzB,QAAAA,aAAa,IAAIpB,SAAS,CAACY,aAAD,EAAgBQ,aAAhB,CAA1B;AACH,OAFD;AAGH,KAJD;AAKH;;AACD,SAAOE,UAAP;AACH;;AAED,SAASX,aAAT","sourcesContent":["import { getValueTransition } from 'motion-dom';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"]},"metadata":{},"sourceType":"module"}