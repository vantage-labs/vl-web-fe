{"ast":null,"code":"\"use client\"; // packages/react/toolbar/src/Toolbar.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\";\nimport { createToggleGroupScope } from \"@radix-ui/react-toggle-group\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { jsx } from \"react/jsx-runtime\";\nvar TOOLBAR_NAME = \"Toolbar\";\nvar [createToolbarContext, createToolbarScope] = createContextScope(TOOLBAR_NAME, [createRovingFocusGroupScope, createToggleGroupScope]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar useToggleGroupScope = createToggleGroupScope();\nvar [ToolbarProvider, useToolbarContext] = createToolbarContext(TOOLBAR_NAME);\nvar Toolbar = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToolbar,\n    orientation = \"horizontal\",\n    dir,\n    loop = true,\n    ...toolbarProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n  const direction = useDirection(dir);\n  return /* @__PURE__ */jsx(ToolbarProvider, {\n    scope: __scopeToolbar,\n    orientation,\n    dir: direction,\n    children: /* @__PURE__ */jsx(RovingFocusGroup.Root, {\n      asChild: true,\n      ...rovingFocusGroupScope,\n      orientation,\n      dir: direction,\n      loop,\n      children: /* @__PURE__ */jsx(Primitive.div, {\n        role: \"toolbar\",\n        \"aria-orientation\": orientation,\n        dir: direction,\n        ...toolbarProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nToolbar.displayName = TOOLBAR_NAME;\nvar SEPARATOR_NAME = \"ToolbarSeparator\";\nvar ToolbarSeparator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToolbar,\n    ...separatorProps\n  } = props;\n  const context = useToolbarContext(SEPARATOR_NAME, __scopeToolbar);\n  return /* @__PURE__ */jsx(SeparatorPrimitive.Root, {\n    orientation: context.orientation === \"horizontal\" ? \"vertical\" : \"horizontal\",\n    ...separatorProps,\n    ref: forwardedRef\n  });\n});\nToolbarSeparator.displayName = SEPARATOR_NAME;\nvar BUTTON_NAME = \"ToolbarButton\";\nvar ToolbarButton = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToolbar,\n    ...buttonProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n  return /* @__PURE__ */jsx(RovingFocusGroup.Item, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    focusable: !props.disabled,\n    children: /* @__PURE__ */jsx(Primitive.button, {\n      type: \"button\",\n      ...buttonProps,\n      ref: forwardedRef\n    })\n  });\n});\nToolbarButton.displayName = BUTTON_NAME;\nvar LINK_NAME = \"ToolbarLink\";\nvar ToolbarLink = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToolbar,\n    ...linkProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n  return /* @__PURE__ */jsx(RovingFocusGroup.Item, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    focusable: true,\n    children: /* @__PURE__ */jsx(Primitive.a, { ...linkProps,\n      ref: forwardedRef,\n      onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n        if (event.key === \" \") event.currentTarget.click();\n      })\n    })\n  });\n});\nToolbarLink.displayName = LINK_NAME;\nvar TOGGLE_GROUP_NAME = \"ToolbarToggleGroup\";\nvar ToolbarToggleGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToolbar,\n    ...toggleGroupProps\n  } = props;\n  const context = useToolbarContext(TOGGLE_GROUP_NAME, __scopeToolbar);\n  const toggleGroupScope = useToggleGroupScope(__scopeToolbar);\n  return /* @__PURE__ */jsx(ToggleGroupPrimitive.Root, {\n    \"data-orientation\": context.orientation,\n    dir: context.dir,\n    ...toggleGroupScope,\n    ...toggleGroupProps,\n    ref: forwardedRef,\n    rovingFocus: false\n  });\n});\nToolbarToggleGroup.displayName = TOGGLE_GROUP_NAME;\nvar TOGGLE_ITEM_NAME = \"ToolbarToggleItem\";\nvar ToolbarToggleItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToolbar,\n    ...toggleItemProps\n  } = props;\n  const toggleGroupScope = useToggleGroupScope(__scopeToolbar);\n  const scope = {\n    __scopeToolbar: props.__scopeToolbar\n  };\n  return /* @__PURE__ */jsx(ToolbarButton, {\n    asChild: true,\n    ...scope,\n    children: /* @__PURE__ */jsx(ToggleGroupPrimitive.Item, { ...toggleGroupScope,\n      ...toggleItemProps,\n      ref: forwardedRef\n    })\n  });\n});\nToolbarToggleItem.displayName = TOGGLE_ITEM_NAME;\nvar Root4 = Toolbar;\nvar Separator = ToolbarSeparator;\nvar Button = ToolbarButton;\nvar Link = ToolbarLink;\nvar ToggleGroup = ToolbarToggleGroup;\nvar ToggleItem = ToolbarToggleItem;\nexport { Button, Link, Root4 as Root, Separator, ToggleGroup, ToggleItem, Toolbar, ToolbarButton, ToolbarLink, ToolbarSeparator, ToolbarToggleGroup, ToolbarToggleItem, createToolbarScope };","map":{"version":3,"mappings":"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","names":["React","composeEventHandlers","createContextScope","RovingFocusGroup","createRovingFocusGroupScope","Primitive","SeparatorPrimitive","ToggleGroupPrimitive","createToggleGroupScope","useDirection","TOOLBAR_NAME","createToolbarContext","createToolbarScope","useRovingFocusGroupScope","useToggleGroupScope","ToolbarProvider","useToolbarContext","Toolbar","props","forwardedRef","__scopeToolbar","orientation","dir","loop","toolbarProps","rovingFocusGroupScope","direction","scope","children","asChild","div","role","ref","displayName","SEPARATOR_NAME","ToolbarSeparator","separatorProps","context","BUTTON_NAME","ToolbarButton","buttonProps","focusable","disabled","button","type","LINK_NAME","ToolbarLink","linkProps","a","onKeyDown","event","key","currentTarget","click","TOGGLE_GROUP_NAME","ToolbarToggleGroup","toggleGroupProps","toggleGroupScope","rovingFocus","TOGGLE_ITEM_NAME","ToolbarToggleItem","toggleItemProps","Root","Separator","Button","Link","ToggleGroup","ToggleItem"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-toolbar/src/Toolbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as SeparatorPrimitive from '@radix-ui/react-separator';\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';\nimport { createToggleGroupScope } from '@radix-ui/react-toggle-group';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Toolbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOOLBAR_NAME = 'Toolbar';\n\ntype ScopedProps<P> = P & { __scopeToolbar?: Scope };\nconst [createToolbarContext, createToolbarScope] = createContextScope(TOOLBAR_NAME, [\n  createRovingFocusGroupScope,\n  createToggleGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useToggleGroupScope = createToggleGroupScope();\n\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype ToolbarContextValue = {\n  orientation: RovingFocusGroupProps['orientation'];\n  dir: RovingFocusGroupProps['dir'];\n};\nconst [ToolbarProvider, useToolbarContext] =\n  createToolbarContext<ToolbarContextValue>(TOOLBAR_NAME);\n\ntype ToolbarElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToolbarProps extends PrimitiveDivProps {\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst Toolbar = React.forwardRef<ToolbarElement, ToolbarProps>(\n  (props: ScopedProps<ToolbarProps>, forwardedRef) => {\n    const { __scopeToolbar, orientation = 'horizontal', dir, loop = true, ...toolbarProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    const direction = useDirection(dir);\n    return (\n      <ToolbarProvider scope={__scopeToolbar} orientation={orientation} dir={direction}>\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"toolbar\"\n            aria-orientation={orientation}\n            dir={direction}\n            {...toolbarProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </ToolbarProvider>\n    );\n  }\n);\n\nToolbar.displayName = TOOLBAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'ToolbarSeparator';\n\ntype ToolbarSeparatorElement = React.ElementRef<typeof SeparatorPrimitive.Root>;\ntype SeparatorProps = React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>;\ninterface ToolbarSeparatorProps extends SeparatorProps {}\n\nconst ToolbarSeparator = React.forwardRef<ToolbarSeparatorElement, ToolbarSeparatorProps>(\n  (props: ScopedProps<ToolbarSeparatorProps>, forwardedRef) => {\n    const { __scopeToolbar, ...separatorProps } = props;\n    const context = useToolbarContext(SEPARATOR_NAME, __scopeToolbar);\n    return (\n      <SeparatorPrimitive.Root\n        orientation={context.orientation === 'horizontal' ? 'vertical' : 'horizontal'}\n        {...separatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nToolbarSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUTTON_NAME = 'ToolbarButton';\n\ntype ToolbarButtonElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToolbarButtonProps extends PrimitiveButtonProps {}\n\nconst ToolbarButton = React.forwardRef<ToolbarButtonElement, ToolbarButtonProps>(\n  (props: ScopedProps<ToolbarButtonProps>, forwardedRef) => {\n    const { __scopeToolbar, ...buttonProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    return (\n      <RovingFocusGroup.Item asChild {...rovingFocusGroupScope} focusable={!props.disabled}>\n        <Primitive.button type=\"button\" {...buttonProps} ref={forwardedRef} />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nToolbarButton.displayName = BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarLink\n * -----------------------------------------------------------------------------------------------*/\n\nconst LINK_NAME = 'ToolbarLink';\n\ntype ToolbarLinkElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = React.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface ToolbarLinkProps extends PrimitiveLinkProps {}\n\nconst ToolbarLink = React.forwardRef<ToolbarLinkElement, ToolbarLinkProps>(\n  (props: ScopedProps<ToolbarLinkProps>, forwardedRef) => {\n    const { __scopeToolbar, ...linkProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    return (\n      <RovingFocusGroup.Item asChild {...rovingFocusGroupScope} focusable>\n        <Primitive.a\n          {...linkProps}\n          ref={forwardedRef}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (event.key === ' ') event.currentTarget.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nToolbarLink.displayName = LINK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_GROUP_NAME = 'ToolbarToggleGroup';\n\ntype ToolbarToggleGroupElement = React.ElementRef<typeof ToggleGroupPrimitive.Root>;\ntype ToggleGroupProps = React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root>;\ninterface ToolbarToggleGroupSingleProps extends Extract<ToggleGroupProps, { type: 'single' }> {}\ninterface ToolbarToggleGroupMultipleProps extends Extract<ToggleGroupProps, { type: 'multiple' }> {}\n\nconst ToolbarToggleGroup = React.forwardRef<\n  ToolbarToggleGroupElement,\n  ToolbarToggleGroupSingleProps | ToolbarToggleGroupMultipleProps\n>(\n  (\n    props: ScopedProps<ToolbarToggleGroupSingleProps | ToolbarToggleGroupMultipleProps>,\n    forwardedRef\n  ) => {\n    const { __scopeToolbar, ...toggleGroupProps } = props;\n    const context = useToolbarContext(TOGGLE_GROUP_NAME, __scopeToolbar);\n    const toggleGroupScope = useToggleGroupScope(__scopeToolbar);\n    return (\n      <ToggleGroupPrimitive.Root\n        data-orientation={context.orientation}\n        dir={context.dir}\n        {...toggleGroupScope}\n        {...toggleGroupProps}\n        ref={forwardedRef}\n        rovingFocus={false}\n      />\n    );\n  }\n);\n\nToolbarToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarToggleItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_ITEM_NAME = 'ToolbarToggleItem';\n\ntype ToolbarToggleItemElement = React.ElementRef<typeof ToggleGroupPrimitive.Item>;\ntype ToggleGroupItemProps = React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item>;\ninterface ToolbarToggleItemProps extends ToggleGroupItemProps {}\n\nconst ToolbarToggleItem = React.forwardRef<ToolbarToggleItemElement, ToolbarToggleItemProps>(\n  (props: ScopedProps<ToolbarToggleItemProps>, forwardedRef) => {\n    const { __scopeToolbar, ...toggleItemProps } = props;\n    const toggleGroupScope = useToggleGroupScope(__scopeToolbar);\n    const scope = { __scopeToolbar: props.__scopeToolbar };\n\n    return (\n      <ToolbarButton asChild {...scope}>\n        <ToggleGroupPrimitive.Item {...toggleGroupScope} {...toggleItemProps} ref={forwardedRef} />\n      </ToolbarButton>\n    );\n  }\n);\n\nToolbarToggleItem.displayName = TOGGLE_ITEM_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toolbar;\nconst Separator = ToolbarSeparator;\nconst Button = ToolbarButton;\nconst Link = ToolbarLink;\nconst ToggleGroup = ToolbarToggleGroup;\nconst ToggleItem = ToolbarToggleItem;\n\nexport {\n  createToolbarScope,\n  //\n  Toolbar,\n  ToolbarSeparator,\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n  //\n  Root,\n  Separator,\n  Button,\n  Link,\n  ToggleGroup,\n  ToggleItem,\n};\nexport type {\n  ToolbarProps,\n  ToolbarSeparatorProps,\n  ToolbarButtonProps,\n  ToolbarLinkProps,\n  ToolbarToggleGroupSingleProps,\n  ToolbarToggleGroupMultipleProps,\n  ToolbarToggleItemProps,\n};\n"]},"metadata":{},"sourceType":"module"}