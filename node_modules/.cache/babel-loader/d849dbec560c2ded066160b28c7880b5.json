{"ast":null,"code":"import { color } from '../color/index.mjs';\nimport { colorRegex } from '../utils/color-regex.mjs';\nimport { floatRegex } from '../utils/float-regex.mjs';\nimport { sanitize } from '../utils/sanitize.mjs';\n\nfunction test(v) {\n  var _a, _b;\n\n  return isNaN(v) && typeof v === \"string\" && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\n\nvar NUMBER_TOKEN = \"number\";\nvar COLOR_TOKEN = \"color\";\nvar VAR_TOKEN = \"var\";\nvar VAR_FUNCTION_TOKEN = \"var(\";\nvar SPLIT_TOKEN = \"${}\"; // this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\n\nvar complexRegex = /var[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*\\([\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*\\x2D\\x2D(?:[\\x2D0-9A-Z_a-z\\u017F\\u212A]+[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*|[\\x2D0-9A-Z_a-z\\u017F\\u212A]+[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*,(?:[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*(?:(?![\\t-\\r \\(\\)\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF])[\\s\\S])|[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*\\((?:(?:(?![\\(\\)])[\\s\\S])|\\((?:(?![\\(\\)])[\\s\\S])*\\))*\\))+[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*)\\)|#[0-9a-f]{3,8}|(?:rgb|h[s\\u017F]l)a?\\((?:\\x2D?[\\.0-9]+%?[\\t-\\r ,\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+){2}\\x2D?[\\.0-9]+%?[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*(?:[,\\/][\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*)?(?:\\b[0-9]+(?:\\.[0-9]+)?|\\.[0-9]+)?%?\\)|\\x2D?(?:[0-9]+(?:\\.[0-9]+)?|\\.[0-9]+)/gi;\n\nfunction analyseComplexValue(value) {\n  var originalValue = value.toString();\n  var values = [];\n  var indexes = {\n    color: [],\n    number: [],\n    var: []\n  };\n  var types = [];\n  var i = 0;\n  var tokenised = originalValue.replace(complexRegex, function (parsedValue) {\n    if (color.test(parsedValue)) {\n      indexes.color.push(i);\n      types.push(COLOR_TOKEN);\n      values.push(color.parse(parsedValue));\n    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n      indexes.var.push(i);\n      types.push(VAR_TOKEN);\n      values.push(parsedValue);\n    } else {\n      indexes.number.push(i);\n      types.push(NUMBER_TOKEN);\n      values.push(parseFloat(parsedValue));\n    }\n\n    ++i;\n    return SPLIT_TOKEN;\n  });\n  var split = tokenised.split(SPLIT_TOKEN);\n  return {\n    values: values,\n    split: split,\n    indexes: indexes,\n    types: types\n  };\n}\n\nfunction parseComplexValue(v) {\n  return analyseComplexValue(v).values;\n}\n\nfunction createTransformer(source) {\n  var _analyseComplexValue = analyseComplexValue(source),\n      split = _analyseComplexValue.split,\n      types = _analyseComplexValue.types;\n\n  var numSections = split.length;\n  return function (v) {\n    var output = \"\";\n\n    for (var i = 0; i < numSections; i++) {\n      output += split[i];\n\n      if (v[i] !== undefined) {\n        var type = types[i];\n\n        if (type === NUMBER_TOKEN) {\n          output += sanitize(v[i]);\n        } else if (type === COLOR_TOKEN) {\n          output += color.transform(v[i]);\n        } else {\n          output += v[i];\n        }\n      }\n    }\n\n    return output;\n  };\n}\n\nvar convertNumbersToZero = function convertNumbersToZero(v) {\n  return typeof v === \"number\" ? 0 : v;\n};\n\nfunction getAnimatableNone(v) {\n  var parsed = parseComplexValue(v);\n  var transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\n\nvar complex = {\n  test: test,\n  parse: parseComplexValue,\n  createTransformer: createTransformer,\n  getAnimatableNone: getAnimatableNone\n};\nexport { analyseComplexValue, complex };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/value/types/complex/index.mjs"],"names":["color","colorRegex","floatRegex","sanitize","test","v","_a","_b","isNaN","match","length","NUMBER_TOKEN","COLOR_TOKEN","VAR_TOKEN","VAR_FUNCTION_TOKEN","SPLIT_TOKEN","complexRegex","analyseComplexValue","value","originalValue","toString","values","indexes","number","var","types","i","tokenised","replace","parsedValue","push","parse","startsWith","parseFloat","split","parseComplexValue","createTransformer","source","numSections","output","undefined","type","transform","convertNumbersToZero","getAnimatableNone","parsed","transformer","map","complex"],"mappings":"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","sourcesContent":["import { color } from '../color/index.mjs';\nimport { colorRegex } from '../utils/color-regex.mjs';\nimport { floatRegex } from '../utils/float-regex.mjs';\nimport { sanitize } from '../utils/sanitize.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        typeof v === \"string\" &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    let i = 0;\n    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n        ++i;\n        return SPLIT_TOKEN;\n    });\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n"]},"metadata":{},"sourceType":"module"}