{"ast":null,"code":"\"use client\"; // packages/react/collection/src/Collection.tsx\n\nimport React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction createCollection(name) {\n  const PROVIDER_NAME = name + \"CollectionProvider\";\n  const [createCollectionContext, createCollectionScope] = createContextScope(PROVIDER_NAME);\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {\n    collectionRef: {\n      current: null\n    },\n    itemMap: /* @__PURE__ */new Map()\n  });\n\n  const CollectionProvider = props => {\n    const {\n      scope,\n      children\n    } = props;\n    const ref = React.useRef(null);\n    const itemMap = React.useRef( /* @__PURE__ */new Map()).current;\n    return /* @__PURE__ */jsx(CollectionProviderImpl, {\n      scope,\n      itemMap,\n      collectionRef: ref,\n      children\n    });\n  };\n\n  CollectionProvider.displayName = PROVIDER_NAME;\n  const COLLECTION_SLOT_NAME = name + \"CollectionSlot\";\n  const CollectionSlot = React.forwardRef((props, forwardedRef) => {\n    const {\n      scope,\n      children\n    } = props;\n    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n    const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n    return /* @__PURE__ */jsx(Slot, {\n      ref: composedRefs,\n      children\n    });\n  });\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n  const ITEM_SLOT_NAME = name + \"CollectionItemSlot\";\n  const ITEM_DATA_ATTR = \"data-radix-collection-item\";\n  const CollectionItemSlot = React.forwardRef((props, forwardedRef) => {\n    const {\n      scope,\n      children,\n      ...itemData\n    } = props;\n    const ref = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n    React.useEffect(() => {\n      context.itemMap.set(ref, {\n        ref,\n        ...itemData\n      });\n      return () => void context.itemMap.delete(ref);\n    });\n    return /* @__PURE__ */jsx(Slot, { ...{\n        [ITEM_DATA_ATTR]: \"\"\n      },\n      ref: composedRefs,\n      children\n    });\n  });\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n\n  function useCollection(scope) {\n    const context = useCollectionContext(name + \"CollectionConsumer\", scope);\n    const getItems = React.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort((a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current));\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n    return getItems;\n  }\n\n  return [{\n    Provider: CollectionProvider,\n    Slot: CollectionSlot,\n    ItemSlot: CollectionItemSlot\n  }, useCollection, createCollectionScope];\n}\n\nexport { createCollection };","map":{"version":3,"mappings":"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","names":["React","createContextScope","useComposedRefs","Slot","createCollection","name","PROVIDER_NAME","createCollectionContext","createCollectionScope","CollectionProviderImpl","useCollectionContext","collectionRef","current","itemMap","Map","CollectionProvider","props","scope","children","ref","useRef","displayName","COLLECTION_SLOT_NAME","CollectionSlot","forwardRef","forwardedRef","context","composedRefs","ITEM_SLOT_NAME","ITEM_DATA_ATTR","CollectionItemSlot","itemData","useEffect","set","delete","useCollection","getItems","useCallback","collectionNode","orderedNodes","Array","from","querySelectorAll","items","values","orderedItems","sort","a","b","indexOf","Provider","ItemSlot"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-collection/src/Collection.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Slot } from '@radix-ui/react-slot';\n\ntype SlotProps = React.ComponentPropsWithoutRef<typeof Slot>;\ntype CollectionElement = HTMLElement;\ninterface CollectionProps extends SlotProps {\n  scope: any;\n}\n\n// We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>â€¦</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\n\nfunction createCollection<ItemElement extends HTMLElement, ItemData = {}>(name: string) {\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionProvider\n   * ---------------------------------------------------------------------------------------------*/\n\n  const PROVIDER_NAME = name + 'CollectionProvider';\n  const [createCollectionContext, createCollectionScope] = createContextScope(PROVIDER_NAME);\n\n  type ContextValue = {\n    collectionRef: React.RefObject<CollectionElement | null>;\n    itemMap: Map<\n      React.RefObject<ItemElement | null>,\n      { ref: React.RefObject<ItemElement | null> } & ItemData\n    >;\n  };\n\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext<ContextValue>(\n    PROVIDER_NAME,\n    { collectionRef: { current: null }, itemMap: new Map() }\n  );\n\n  const CollectionProvider: React.FC<{ children?: React.ReactNode; scope: any }> = (props) => {\n    const { scope, children } = props;\n    const ref = React.useRef<CollectionElement>(null);\n    const itemMap = React.useRef<ContextValue['itemMap']>(new Map()).current;\n    return (\n      <CollectionProviderImpl scope={scope} itemMap={itemMap} collectionRef={ref}>\n        {children}\n      </CollectionProviderImpl>\n    );\n  };\n\n  CollectionProvider.displayName = PROVIDER_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionSlot\n   * ---------------------------------------------------------------------------------------------*/\n\n  const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n\n  const CollectionSlot = React.forwardRef<CollectionElement, CollectionProps>(\n    (props, forwardedRef) => {\n      const { scope, children } = props;\n      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n      const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n      return <Slot ref={composedRefs}>{children}</Slot>;\n    }\n  );\n\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionItem\n   * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n\n  type CollectionItemSlotProps = ItemData & {\n    children: React.ReactNode;\n    scope: any;\n  };\n\n  const CollectionItemSlot = React.forwardRef<ItemElement, CollectionItemSlotProps>(\n    (props, forwardedRef) => {\n      const { scope, children, ...itemData } = props;\n      const ref = React.useRef<ItemElement>(null);\n      const composedRefs = useComposedRefs(forwardedRef, ref);\n      const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n\n      React.useEffect(() => {\n        context.itemMap.set(ref, { ref, ...(itemData as unknown as ItemData) });\n        return () => void context.itemMap.delete(ref);\n      });\n\n      return (\n        <Slot {...{ [ITEM_DATA_ATTR]: '' }} ref={composedRefs}>\n          {children}\n        </Slot>\n      );\n    }\n  );\n\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * useCollection\n   * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection(scope: any) {\n    const context = useCollectionContext(name + 'CollectionConsumer', scope);\n\n    const getItems = React.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort(\n        (a, b) => orderedNodes.indexOf(a.ref.current!) - orderedNodes.indexOf(b.ref.current!)\n      );\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n\n    return getItems;\n  }\n\n  return [\n    { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },\n    useCollection,\n    createCollectionScope,\n  ] as const;\n}\n\nexport { createCollection };\nexport type { CollectionProps };\n"]},"metadata":{},"sourceType":"module"}