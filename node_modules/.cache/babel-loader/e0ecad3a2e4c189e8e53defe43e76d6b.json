{"ast":null,"code":"import _objectWithoutProperties from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"willChange\"];\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nvar propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nvar VisualElement = /*#__PURE__*/function () {\n  function VisualElement(_ref) {\n    var _this = this;\n\n    var parent = _ref.parent,\n        props = _ref.props,\n        presenceContext = _ref.presenceContext,\n        reducedMotionConfig = _ref.reducedMotionConfig,\n        blockInitialAnimation = _ref.blockInitialAnimation,\n        visualState = _ref.visualState;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VisualElement);\n\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = function () {\n      return _this.notify(\"Update\", _this.latestValues);\n    };\n\n    this.render = function () {\n      if (!_this.current) return;\n\n      _this.triggerBuild();\n\n      _this.renderInstance(_this.current, _this.renderState, _this.props.style, _this.projection);\n    };\n\n    this.renderScheduledAt = 0.0;\n\n    this.scheduleRender = function () {\n      var now = time.now();\n\n      if (_this.renderScheduledAt < now) {\n        _this.renderScheduledAt = now;\n        frame.render(_this.render, false, true);\n      }\n    };\n\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n    this.latestValues = latestValues;\n    this.baseTarget = _objectSpread({}, latestValues);\n    this.initialValues = props.initial ? _objectSpread({}, latestValues) : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't necessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    var _this$scrapeMotionVal = this.scrapeMotionValuesFromProps(props, {}, this),\n        willChange = _this$scrapeMotionVal.willChange,\n        initialMotionValues = _objectWithoutProperties(_this$scrapeMotionVal, _excluded);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n  }\n\n  _createClass(VisualElement, [{\n    key: \"scrapeMotionValuesFromProps\",\n    value:\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    function scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n      return {};\n    }\n  }, {\n    key: \"mount\",\n    value: function mount(instance) {\n      var _this2 = this;\n\n      this.current = instance;\n      visualElementStore.set(instance, this);\n\n      if (this.projection && !this.projection.instance) {\n        this.projection.mount(instance);\n      }\n\n      if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n        this.removeFromVariantTree = this.parent.addVariantChild(this);\n      }\n\n      this.values.forEach(function (value, key) {\n        return _this2.bindToMotionValue(key, value);\n      });\n\n      if (!hasReducedMotionListener.current) {\n        initPrefersReducedMotion();\n      }\n\n      this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n      }\n\n      if (this.parent) this.parent.children.add(this);\n      this.update(this.props, this.presenceContext);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      visualElementStore.delete(this.current);\n      this.projection && this.projection.unmount();\n      cancelFrame(this.notifyUpdate);\n      cancelFrame(this.render);\n      this.valueSubscriptions.forEach(function (remove) {\n        return remove();\n      });\n      this.valueSubscriptions.clear();\n      this.removeFromVariantTree && this.removeFromVariantTree();\n      this.parent && this.parent.children.delete(this);\n\n      for (var key in this.events) {\n        this.events[key].clear();\n      }\n\n      for (var _key in this.features) {\n        var feature = this.features[_key];\n\n        if (feature) {\n          feature.unmount();\n          feature.isMounted = false;\n        }\n      }\n\n      this.current = null;\n    }\n  }, {\n    key: \"bindToMotionValue\",\n    value: function bindToMotionValue(key, value) {\n      var _this3 = this;\n\n      if (this.valueSubscriptions.has(key)) {\n        this.valueSubscriptions.get(key)();\n      }\n\n      var valueIsTransform = transformProps.has(key);\n      var removeOnChange = value.on(\"change\", function (latestValue) {\n        _this3.latestValues[key] = latestValue;\n        _this3.props.onUpdate && frame.preRender(_this3.notifyUpdate);\n\n        if (valueIsTransform && _this3.projection) {\n          _this3.projection.isTransformDirty = true;\n        }\n      });\n      var removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n      var removeSyncCheck;\n\n      if (window.MotionCheckAppearSync) {\n        removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n      }\n\n      this.valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n        if (removeSyncCheck) removeSyncCheck();\n        if (value.owner) value.stop();\n      });\n    }\n  }, {\n    key: \"sortNodePosition\",\n    value: function sortNodePosition(other) {\n      /**\n       * If these nodes aren't even of the same type we can't compare their depth.\n       */\n      if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n        return 0;\n      }\n\n      return this.sortInstanceNodePosition(this.current, other.current);\n    }\n  }, {\n    key: \"updateFeatures\",\n    value: function updateFeatures() {\n      var key = \"animation\";\n\n      for (key in featureDefinitions) {\n        var featureDefinition = featureDefinitions[key];\n        if (!featureDefinition) continue;\n        var isEnabled = featureDefinition.isEnabled,\n            FeatureConstructor = featureDefinition.Feature;\n        /**\n         * If this feature is enabled but not active, make a new instance.\n         */\n\n        if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {\n          this.features[key] = new FeatureConstructor(this);\n        }\n        /**\n         * If we have a feature, mount or update it.\n         */\n\n\n        if (this.features[key]) {\n          var feature = this.features[key];\n\n          if (feature.isMounted) {\n            feature.update();\n          } else {\n            feature.mount();\n            feature.isMounted = true;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"triggerBuild\",\n    value: function triggerBuild() {\n      this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n\n  }, {\n    key: \"measureViewportBox\",\n    value: function measureViewportBox() {\n      return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n    }\n  }, {\n    key: \"getStaticValue\",\n    value: function getStaticValue(key) {\n      return this.latestValues[key];\n    }\n  }, {\n    key: \"setStaticValue\",\n    value: function setStaticValue(key, value) {\n      this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(props, presenceContext) {\n      if (props.transformTemplate || this.props.transformTemplate) {\n        this.scheduleRender();\n      }\n\n      this.prevProps = this.props;\n      this.props = props;\n      this.prevPresenceContext = this.presenceContext;\n      this.presenceContext = presenceContext;\n      /**\n       * Update prop event handlers ie onAnimationStart, onAnimationComplete\n       */\n\n      for (var i = 0; i < propEventHandlers.length; i++) {\n        var key = propEventHandlers[i];\n\n        if (this.propEventSubscriptions[key]) {\n          this.propEventSubscriptions[key]();\n          delete this.propEventSubscriptions[key];\n        }\n\n        var listenerName = \"on\" + key;\n        var listener = props[listenerName];\n\n        if (listener) {\n          this.propEventSubscriptions[key] = this.on(key, listener);\n        }\n      }\n\n      this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n\n      if (this.handleChildMotionValue) {\n        this.handleChildMotionValue();\n      }\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(name) {\n      return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n\n  }, {\n    key: \"getDefaultTransition\",\n    value: function getDefaultTransition() {\n      return this.props.transition;\n    }\n  }, {\n    key: \"getTransformPagePoint\",\n    value: function getTransformPagePoint() {\n      return this.props.transformPagePoint;\n    }\n  }, {\n    key: \"getClosestVariantNode\",\n    value: function getClosestVariantNode() {\n      return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n\n  }, {\n    key: \"addVariantChild\",\n    value: function addVariantChild(child) {\n      var closestVariantNode = this.getClosestVariantNode();\n\n      if (closestVariantNode) {\n        closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n        return function () {\n          return closestVariantNode.variantChildren.delete(child);\n        };\n      }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n\n  }, {\n    key: \"addValue\",\n    value: function addValue(key, value) {\n      // Remove existing value if it exists\n      var existingValue = this.values.get(key);\n\n      if (value !== existingValue) {\n        if (existingValue) this.removeValue(key);\n        this.bindToMotionValue(key, value);\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n      }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      this.values.delete(key);\n      var unsubscribe = this.valueSubscriptions.get(key);\n\n      if (unsubscribe) {\n        unsubscribe();\n        this.valueSubscriptions.delete(key);\n      }\n\n      delete this.latestValues[key];\n      this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue(key) {\n      return this.values.has(key);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key, defaultValue) {\n      if (this.props.values && this.props.values[key]) {\n        return this.props.values[key];\n      }\n\n      var value = this.values.get(key);\n\n      if (value === undefined && defaultValue !== undefined) {\n        value = motionValue(defaultValue === null ? undefined : defaultValue, {\n          owner: this\n        });\n        this.addValue(key, value);\n      }\n\n      return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n\n  }, {\n    key: \"readValue\",\n    value: function readValue(key, target) {\n      var _a;\n\n      var value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n\n      if (value !== undefined && value !== null) {\n        if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n          // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n          value = parseFloat(value);\n        } else if (!findValueType(value) && complex.test(target)) {\n          value = getAnimatableNone(key, target);\n        }\n\n        this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n      }\n\n      return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n\n  }, {\n    key: \"setBaseTarget\",\n    value: function setBaseTarget(key, value) {\n      this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n\n  }, {\n    key: \"getBaseTarget\",\n    value: function getBaseTarget(key) {\n      var _a;\n\n      var initial = this.props.initial;\n      var valueFromInitial;\n\n      if (typeof initial === \"string\" || typeof initial === \"object\") {\n        var variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n\n        if (variant) {\n          valueFromInitial = variant[key];\n        }\n      }\n      /**\n       * If this value still exists in the current initial variant, read that.\n       */\n\n\n      if (initial && valueFromInitial !== undefined) {\n        return valueFromInitial;\n      }\n      /**\n       * Alternatively, if this VisualElement config has defined a getBaseTarget\n       * so we can read the value from an alternative source, try that.\n       */\n\n\n      var target = this.getBaseTargetFromProps(this.props, key);\n      if (target !== undefined && !isMotionValue(target)) return target;\n      /**\n       * If the value was initially defined on initial, but it doesn't any more,\n       * return undefined. Otherwise return the value as initially read from the DOM.\n       */\n\n      return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n\n      return this.events[eventName].add(callback);\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(eventName) {\n      if (this.events[eventName]) {\n        var _this$events$eventNam;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        (_this$events$eventNam = this.events[eventName]).notify.apply(_this$events$eventNam, args);\n      }\n    }\n  }]);\n\n  return VisualElement;\n}();\n\nexport { VisualElement };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"names":["initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isMotionValue","transformProps","isControllingVariants","isVariantNode","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","visualElementStore","KeyframeResolver","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","createBox","time","frame","cancelFrame","propEventHandlers","VisualElement","parent","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","options","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","renderScheduledAt","scheduleRender","now","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","scrapeMotionValuesFromProps","willChange","initialMotionValues","key","value","undefined","set","_props","_prevProps","_visualElement","instance","mount","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","add","update","delete","unmount","remove","clear","feature","isMounted","has","get","valueIsTransform","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeOnRenderRequest","removeSyncCheck","window","MotionCheckAppearSync","owner","stop","other","sortInstanceNodePosition","type","featureDefinition","isEnabled","FeatureConstructor","Feature","build","measureInstanceViewportBox","transformTemplate","prevProps","prevPresenceContext","i","length","listenerName","listener","handleChildMotionValue","name","variants","transition","transformPagePoint","getClosestVariantNode","child","closestVariantNode","existingValue","removeValue","unsubscribe","removeValueFromRenderState","defaultValue","addValue","target","_a","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"mappings":"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","sourcesContent":["import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"]},"metadata":{},"sourceType":"module"}