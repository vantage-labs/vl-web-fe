{"ast":null,"code":"// packages/react/use-controllable-state/src/useControllableState.tsx\nimport * as React from \"react\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\n\nfunction useControllableState(_ref) {\n  let {\n    prop,\n    defaultProp,\n    onChange = () => {}\n  } = _ref;\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n    defaultProp,\n    onChange\n  });\n  const isControlled = prop !== void 0;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n  const setValue = React.useCallback(nextValue => {\n    if (isControlled) {\n      const setter = nextValue;\n      const value2 = typeof nextValue === \"function\" ? setter(prop) : nextValue;\n      if (value2 !== prop) handleChange(value2);\n    } else {\n      setUncontrolledProp(nextValue);\n    }\n  }, [isControlled, prop, setUncontrolledProp, handleChange]);\n  return [value, setValue];\n}\n\nfunction useUncontrolledState(_ref2) {\n  let {\n    defaultProp,\n    onChange\n  } = _ref2;\n  const uncontrolledState = React.useState(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n  return uncontrolledState;\n}\n\nexport { useControllableState };","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,kCAA/B;;AAUA,SAASC,oBAAT,OAIkC;AAAA,MAJD;AAC/BC,QAD+B;AAE/BC,eAF+B;AAG/BC,eAAW,MAAM,CAAC;AAHa,GAIC;AAChC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CC,qBAAqB;AAAEJ,eAAF;AAAeC;AAAf,GAArB,CAAhD;AACA,QAAMI,eAAeN,SAAS,MAA9B;AACA,QAAMO,QAAQD,eAAeN,IAAf,GAAsBG,gBAApC;AACA,QAAMK,eAAeV,eAAeI,QAAf,CAArB;AAEA,QAAMO,WAAsEZ,kBACzEa,SAAD,IAAe;AACb,QAAIJ,YAAJ,EAAkB;AAChB,YAAMK,SAASD,SAAf;AACA,YAAMH,SAAQ,OAAOG,SAAP,KAAqB,UAArB,GAAkCC,OAAOX,IAAP,CAAlC,GAAiDU,SAA/D;AACA,UAAIH,WAAUP,IAAd,EAAoBQ,aAAaD,MAAb;AACtB,KAJA,MAIO;AACLH,0BAAoBM,SAApB;AACF;AACF,GAT0E,EAU1E,CAACJ,YAAD,EAAeN,IAAf,EAAqBI,mBAArB,EAA0CI,YAA1C,CAV0E,CAA5E;AAaA,SAAO,CAACD,KAAD,EAAQE,QAAR,CAAP;AACF;;AAEA,SAASJ,oBAAT,QAGgD;AAAA,MAHf;AAC/BJ,eAD+B;AAE/BC;AAF+B,GAGe;AAC9C,QAAMU,oBAA0Bf,eAAwBI,WAAxB,CAAhC;AACA,QAAM,CAACM,KAAD,IAAUK,iBAAhB;AACA,QAAMC,eAAqBhB,aAAOU,KAAP,CAA3B;AACA,QAAMC,eAAeV,eAAeI,QAAf,CAArB;AAEML,kBAAU,MAAM;AACpB,QAAIgB,aAAaC,OAAb,KAAyBP,KAA7B,EAAoC;AAClCC,mBAAaD,KAAb;AACAM,mBAAaC,OAAb,GAAuBP,KAAvB;AACF;AACF,GALM,EAKH,CAACA,KAAD,EAAQM,YAAR,EAAsBL,YAAtB,CALG;AAON,SAAOI,iBAAP;AACF","names":["React","useCallbackRef","useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","useUncontrolledState","isControlled","value","handleChange","setValue","nextValue","setter","uncontrolledState","prevValueRef","current"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-use-controllable-state/src/useControllableState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module"}