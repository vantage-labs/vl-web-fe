{"ast":null,"code":"\"use client\"; // packages/react/collapsible/src/Collapsible.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { jsx } from \"react/jsx-runtime\";\nvar COLLAPSIBLE_NAME = \"Collapsible\";\nvar [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\nvar [CollapsibleProvider, useCollapsibleContext] = createCollapsibleContext(COLLAPSIBLE_NAME);\nvar Collapsible = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    open: openProp,\n    defaultOpen,\n    disabled,\n    onOpenChange,\n    ...collapsibleProps\n  } = props;\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */jsx(CollapsibleProvider, {\n    scope: __scopeCollapsible,\n    disabled,\n    contentId: useId(),\n    open,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      \"data-state\": getState(open),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      ...collapsibleProps,\n      ref: forwardedRef\n    })\n  });\n});\nCollapsible.displayName = COLLAPSIBLE_NAME;\nvar TRIGGER_NAME = \"CollapsibleTrigger\";\nvar CollapsibleTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    ...triggerProps\n  } = props;\n  const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-controls\": context.contentId,\n    \"aria-expanded\": context.open || false,\n    \"data-state\": getState(context.open),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    disabled: context.disabled,\n    ...triggerProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  });\n});\nCollapsibleTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"CollapsibleContent\";\nvar CollapsibleContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...contentProps\n  } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: _ref => {\n      let {\n        present\n      } = _ref;\n      return /* @__PURE__ */jsx(CollapsibleContentImpl, { ...contentProps,\n        ref: forwardedRef,\n        present\n      });\n    }\n  });\n});\nCollapsibleContent.displayName = CONTENT_NAME;\nvar CollapsibleContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    present,\n    children,\n    ...contentProps\n  } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef(0);\n  const width = widthRef.current;\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef(void 0);\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n  useLayoutEffect(() => {\n    const node = ref.current;\n\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName\n      };\n      node.style.transitionDuration = \"0s\";\n      node.style.animationName = \"none\";\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationName = originalStylesRef.current.animationName;\n      }\n\n      setIsPresent(present);\n    }\n  }, [context.open, present]);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    \"data-state\": getState(context.open),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    id: context.contentId,\n    hidden: !isOpen,\n    ...contentProps,\n    ref: composedRefs,\n    style: {\n      [`--radix-collapsible-content-height`]: height ? `${height}px` : void 0,\n      [`--radix-collapsible-content-width`]: width ? `${width}px` : void 0,\n      ...props.style\n    },\n    children: isOpen && children\n  });\n});\n\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\n\nvar Root = Collapsible;\nvar Trigger = CollapsibleTrigger;\nvar Content = CollapsibleContent;\nexport { Collapsible, CollapsibleContent, CollapsibleTrigger, Content, Root, Trigger, createCollapsibleScope };","map":{"version":3,"mappings":"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","names":["React","composeEventHandlers","createContextScope","useControllableState","useLayoutEffect","useComposedRefs","Primitive","Presence","useId","COLLAPSIBLE_NAME","createCollapsibleContext","createCollapsibleScope","CollapsibleProvider","useCollapsibleContext","Collapsible","props","forwardedRef","__scopeCollapsible","open","openProp","defaultOpen","disabled","onOpenChange","collapsibleProps","setOpen","prop","defaultProp","onChange","scope","contentId","onOpenToggle","prevOpen","children","div","getState","ref","displayName","TRIGGER_NAME","CollapsibleTrigger","triggerProps","context","button","type","onClick","CONTENT_NAME","CollapsibleContent","forceMount","contentProps","present","CollapsibleContentImpl","isPresent","setIsPresent","composedRefs","heightRef","height","current","widthRef","width","isOpen","isMountAnimationPreventedRef","originalStylesRef","rAF","requestAnimationFrame","cancelAnimationFrame","node","transitionDuration","style","animationName","rect","getBoundingClientRect","id","hidden","Root","Trigger","Content"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-collapsible/src/Collapsible.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ElementRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef<Record<string, string>>(undefined);\n\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName,\n      };\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transitionDuration = '0s';\n      node.style.animationName = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up if it isn't the initial mount\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationName = originalStylesRef.current.animationName;\n      }\n\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n"]},"metadata":{},"sourceType":"module"}