{"ast":null,"code":"import { supportsScrollTimeline } from '../../utils/supports/scroll-timeline.mjs';\n\nclass BaseGroupPlaybackControls {\n  constructor(animations) {\n    // Bound to accomodate common `return animation.stop` pattern\n    this.stop = () => this.runAll(\"stop\");\n\n    this.animations = animations.filter(Boolean);\n  }\n\n  get finished() {\n    // Support for new finished Promise and legacy thennable API\n    return Promise.all(this.animations.map(animation => \"finished\" in animation ? animation.finished : animation));\n  }\n  /**\n   * TODO: Filter out cancelled or stopped animations before returning\n   */\n\n\n  getAll(propName) {\n    return this.animations[0][propName];\n  }\n\n  setAll(propName, newValue) {\n    for (let i = 0; i < this.animations.length; i++) {\n      this.animations[i][propName] = newValue;\n    }\n  }\n\n  attachTimeline(timeline, fallback) {\n    const subscriptions = this.animations.map(animation => {\n      if (supportsScrollTimeline() && animation.attachTimeline) {\n        return animation.attachTimeline(timeline);\n      } else {\n        return fallback(animation);\n      }\n    });\n    return () => {\n      subscriptions.forEach((cancel, i) => {\n        cancel && cancel();\n        this.animations[i].stop();\n      });\n    };\n  }\n\n  get time() {\n    return this.getAll(\"time\");\n  }\n\n  set time(time) {\n    this.setAll(\"time\", time);\n  }\n\n  get speed() {\n    return this.getAll(\"speed\");\n  }\n\n  set speed(speed) {\n    this.setAll(\"speed\", speed);\n  }\n\n  get startTime() {\n    return this.getAll(\"startTime\");\n  }\n\n  get duration() {\n    let max = 0;\n\n    for (let i = 0; i < this.animations.length; i++) {\n      max = Math.max(max, this.animations[i].duration);\n    }\n\n    return max;\n  }\n\n  runAll(methodName) {\n    this.animations.forEach(controls => controls[methodName]());\n  }\n\n  flatten() {\n    this.runAll(\"flatten\");\n  }\n\n  play() {\n    this.runAll(\"play\");\n  }\n\n  pause() {\n    this.runAll(\"pause\");\n  }\n\n  cancel() {\n    this.runAll(\"cancel\");\n  }\n\n  complete() {\n    this.runAll(\"complete\");\n  }\n\n}\n\nexport { BaseGroupPlaybackControls };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/motion-dom/dist/es/animation/controls/BaseGroup.mjs"],"names":["supportsScrollTimeline","BaseGroupPlaybackControls","constructor","animations","stop","runAll","filter","Boolean","finished","Promise","all","map","animation","getAll","propName","setAll","newValue","i","length","attachTimeline","timeline","fallback","subscriptions","forEach","cancel","time","speed","startTime","duration","max","Math","methodName","controls","flatten","play","pause","complete"],"mappings":"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","sourcesContent":["import { supportsScrollTimeline } from '../../utils/supports/scroll-timeline.mjs';\n\nclass BaseGroupPlaybackControls {\n    constructor(animations) {\n        // Bound to accomodate common `return animation.stop` pattern\n        this.stop = () => this.runAll(\"stop\");\n        this.animations = animations.filter(Boolean);\n    }\n    get finished() {\n        // Support for new finished Promise and legacy thennable API\n        return Promise.all(this.animations.map((animation) => \"finished\" in animation ? animation.finished : animation));\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i][propName] = newValue;\n        }\n    }\n    attachTimeline(timeline, fallback) {\n        const subscriptions = this.animations.map((animation) => {\n            if (supportsScrollTimeline() && animation.attachTimeline) {\n                return animation.attachTimeline(timeline);\n            }\n            else {\n                return fallback(animation);\n            }\n        });\n        return () => {\n            subscriptions.forEach((cancel, i) => {\n                cancel && cancel();\n                this.animations[i].stop();\n            });\n        };\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get startTime() {\n        return this.getAll(\"startTime\");\n    }\n    get duration() {\n        let max = 0;\n        for (let i = 0; i < this.animations.length; i++) {\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    flatten() {\n        this.runAll(\"flatten\");\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\n\nexport { BaseGroupPlaybackControls };\n"]},"metadata":{},"sourceType":"module"}