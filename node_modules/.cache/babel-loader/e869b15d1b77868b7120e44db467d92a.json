{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { invariant } from 'motion-utils';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\n\nvar AnimatePresence = function AnimatePresence(_ref) {\n  var children = _ref.children,\n      exitBeforeEnter = _ref.exitBeforeEnter,\n      custom = _ref.custom,\n      _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? true : _ref$initial,\n      onExitComplete = _ref.onExitComplete,\n      _ref$presenceAffectsL = _ref.presenceAffectsLayout,\n      presenceAffectsLayout = _ref$presenceAffectsL === void 0 ? true : _ref$presenceAffectsL,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? \"sync\" : _ref$mode;\n  invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n  /**\n   * Filter any children that aren't ReactElements. We can only track components\n   * between renders with a props.key.\n   */\n\n  var presentChildren = useMemo(function () {\n    return onlyElements(children);\n  }, [children]);\n  /**\n   * Track the keys of the currently rendered children. This is used to\n   * determine which children are exiting.\n   */\n\n  var presentKeys = presentChildren.map(getChildKey);\n  /**\n   * If `initial={false}` we only want to pass this to components in the first render.\n   */\n\n  var isInitialRender = useRef(true);\n  /**\n   * A ref containing the currently present children. When all exit animations\n   * are complete, we use this to re-render the component with the latest children\n   * *committed* rather than the latest children *rendered*.\n   */\n\n  var pendingPresentChildren = useRef(presentChildren);\n  /**\n   * Track which exiting children have finished animating out.\n   */\n\n  var exitComplete = useConstant(function () {\n    return new Map();\n  });\n  /**\n   * Save children to render as React state. To ensure this component is concurrent-safe,\n   * we check for exiting children via an effect.\n   */\n\n  var _useState = useState(presentChildren),\n      _useState2 = _slicedToArray(_useState, 2),\n      diffedChildren = _useState2[0],\n      setDiffedChildren = _useState2[1];\n\n  var _useState3 = useState(presentChildren),\n      _useState4 = _slicedToArray(_useState3, 2),\n      renderedChildren = _useState4[0],\n      setRenderedChildren = _useState4[1];\n\n  useIsomorphicLayoutEffect(function () {\n    isInitialRender.current = false;\n    pendingPresentChildren.current = presentChildren;\n    /**\n     * Update complete status of exiting children.\n     */\n\n    for (var i = 0; i < renderedChildren.length; i++) {\n      var key = getChildKey(renderedChildren[i]);\n\n      if (!presentKeys.includes(key)) {\n        if (exitComplete.get(key) !== true) {\n          exitComplete.set(key, false);\n        }\n      } else {\n        exitComplete.delete(key);\n      }\n    }\n  }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n  var exitingChildren = [];\n\n  if (presentChildren !== diffedChildren) {\n    var nextChildren = _toConsumableArray(presentChildren);\n    /**\n     * Loop through all the currently rendered components and decide which\n     * are exiting.\n     */\n\n\n    for (var i = 0; i < renderedChildren.length; i++) {\n      var child = renderedChildren[i];\n      var key = getChildKey(child);\n\n      if (!presentKeys.includes(key)) {\n        nextChildren.splice(i, 0, child);\n        exitingChildren.push(child);\n      }\n    }\n    /**\n     * If we're in \"wait\" mode, and we have exiting children, we want to\n     * only render these until they've all exited.\n     */\n\n\n    if (mode === \"wait\" && exitingChildren.length) {\n      nextChildren = exitingChildren;\n    }\n\n    setRenderedChildren(onlyElements(nextChildren));\n    setDiffedChildren(presentChildren);\n    /**\n     * Early return to ensure once we've set state with the latest diffed\n     * children, we can immediately re-render.\n     */\n\n    return;\n  }\n\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && renderedChildren.length > 1) {\n    console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its mode is set to \\\"wait\\\". This will lead to odd visual behaviour.\");\n  }\n  /**\n   * If we've been provided a forceRender function by the LayoutGroupContext,\n   * we can use it to force a re-render amongst all surrounding components once\n   * all components have finished animating out.\n   */\n\n\n  var _useContext = useContext(LayoutGroupContext),\n      forceRender = _useContext.forceRender;\n\n  return jsx(Fragment, {\n    children: renderedChildren.map(function (child) {\n      var key = getChildKey(child);\n      var isPresent = presentChildren === renderedChildren || presentKeys.includes(key);\n\n      var onExit = function onExit() {\n        if (exitComplete.has(key)) {\n          exitComplete.set(key, true);\n        } else {\n          return;\n        }\n\n        var isEveryExitComplete = true;\n        exitComplete.forEach(function (isExitComplete) {\n          if (!isExitComplete) isEveryExitComplete = false;\n        });\n\n        if (isEveryExitComplete) {\n          forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n          setRenderedChildren(pendingPresentChildren.current);\n          onExitComplete && onExitComplete();\n        }\n      };\n\n      return jsx(PresenceChild, {\n        isPresent: isPresent,\n        initial: !isInitialRender.current || initial ? undefined : false,\n        custom: isPresent ? undefined : custom,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode,\n        onExitComplete: isPresent ? undefined : onExit,\n        children: child\n      }, key);\n    })\n  });\n};\n\nexport { AnimatePresence };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"names":["jsx","Fragment","useMemo","useRef","useState","useContext","PresenceChild","LayoutGroupContext","invariant","useConstant","onlyElements","getChildKey","useIsomorphicLayoutEffect","AnimatePresence","children","exitBeforeEnter","custom","initial","onExitComplete","presenceAffectsLayout","mode","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","Map","diffedChildren","setDiffedChildren","renderedChildren","setRenderedChildren","current","i","length","key","includes","get","set","delete","join","exitingChildren","nextChildren","child","splice","push","process","env","NODE_ENV","console","warn","forceRender","isPresent","onExit","has","isEveryExitComplete","forEach","isExitComplete","undefined"],"mappings":"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","sourcesContent":["\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { invariant } from 'motion-utils';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, exitBeforeEnter, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = presentChildren === renderedChildren ||\n                presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: isPresent ? undefined : custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n"]},"metadata":{},"sourceType":"module"}