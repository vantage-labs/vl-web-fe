{"ast":null,"code":"import { startViewAnimation } from './start.mjs';\n/**\n * TODO:\n * - Create view transition on next tick\n * - Replace animations with Motion animations\n * - Return GroupAnimation on next tick\n */\n\nclass ViewTransitionBuilder {\n  constructor(update) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.currentTarget = \"root\";\n    this.targets = new Map();\n    this.readyPromise = new Promise(resolve => {\n      this.notifyReady = resolve;\n    });\n    queueMicrotask(() => {\n      startViewAnimation(update, options, this.targets).then(animation => this.notifyReady(animation));\n    });\n  }\n\n  get(selector) {\n    this.currentTarget = selector;\n    return this;\n  }\n\n  layout(keyframes, options) {\n    this.updateTarget(\"layout\", keyframes, options);\n    return this;\n  }\n\n  new(keyframes, options) {\n    this.updateTarget(\"new\", keyframes, options);\n    return this;\n  }\n\n  old(keyframes, options) {\n    this.updateTarget(\"old\", keyframes, options);\n    return this;\n  }\n\n  enter(keyframes, options) {\n    this.updateTarget(\"enter\", keyframes, options);\n    return this;\n  }\n\n  exit(keyframes, options) {\n    this.updateTarget(\"exit\", keyframes, options);\n    return this;\n  }\n\n  crossfade(options) {\n    this.updateTarget(\"enter\", {\n      opacity: 1\n    }, options);\n    this.updateTarget(\"exit\", {\n      opacity: 0\n    }, options);\n    return this;\n  }\n\n  updateTarget(target, keyframes) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      currentTarget,\n      targets\n    } = this;\n\n    if (!targets.has(currentTarget)) {\n      targets.set(currentTarget, {});\n    }\n\n    const targetData = targets.get(currentTarget);\n    targetData[target] = {\n      keyframes,\n      options\n    };\n  }\n\n  then(resolve, reject) {\n    return this.readyPromise.then(resolve, reject);\n  }\n\n}\n\nfunction view(update) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new ViewTransitionBuilder(update, defaultOptions);\n}\n\nexport { ViewTransitionBuilder, view };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/motion-dom/dist/es/view/index.mjs"],"names":["startViewAnimation","ViewTransitionBuilder","constructor","update","options","currentTarget","targets","Map","readyPromise","Promise","resolve","notifyReady","queueMicrotask","then","animation","get","selector","layout","keyframes","updateTarget","new","old","enter","exit","crossfade","opacity","target","has","set","targetData","reject","view","defaultOptions"],"mappings":"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","sourcesContent":["import { startViewAnimation } from './start.mjs';\n\n/**\n * TODO:\n * - Create view transition on next tick\n * - Replace animations with Motion animations\n * - Return GroupAnimation on next tick\n */\nclass ViewTransitionBuilder {\n    constructor(update, options = {}) {\n        this.currentTarget = \"root\";\n        this.targets = new Map();\n        this.readyPromise = new Promise((resolve) => {\n            this.notifyReady = resolve;\n        });\n        queueMicrotask(() => {\n            startViewAnimation(update, options, this.targets).then((animation) => this.notifyReady(animation));\n        });\n    }\n    get(selector) {\n        this.currentTarget = selector;\n        return this;\n    }\n    layout(keyframes, options) {\n        this.updateTarget(\"layout\", keyframes, options);\n        return this;\n    }\n    new(keyframes, options) {\n        this.updateTarget(\"new\", keyframes, options);\n        return this;\n    }\n    old(keyframes, options) {\n        this.updateTarget(\"old\", keyframes, options);\n        return this;\n    }\n    enter(keyframes, options) {\n        this.updateTarget(\"enter\", keyframes, options);\n        return this;\n    }\n    exit(keyframes, options) {\n        this.updateTarget(\"exit\", keyframes, options);\n        return this;\n    }\n    crossfade(options) {\n        this.updateTarget(\"enter\", { opacity: 1 }, options);\n        this.updateTarget(\"exit\", { opacity: 0 }, options);\n        return this;\n    }\n    updateTarget(target, keyframes, options = {}) {\n        const { currentTarget, targets } = this;\n        if (!targets.has(currentTarget)) {\n            targets.set(currentTarget, {});\n        }\n        const targetData = targets.get(currentTarget);\n        targetData[target] = { keyframes, options };\n    }\n    then(resolve, reject) {\n        return this.readyPromise.then(resolve, reject);\n    }\n}\nfunction view(update, defaultOptions = {}) {\n    return new ViewTransitionBuilder(update, defaultOptions);\n}\n\nexport { ViewTransitionBuilder, view };\n"]},"metadata":{},"sourceType":"module"}