{"ast":null,"code":"import { secondsToMilliseconds } from 'motion-utils';\nimport { BaseGroupPlaybackControls } from '../animation/controls/BaseGroup.mjs';\nimport { getValueTransition } from '../animation/utils/get-value-transition.mjs';\nimport { NativeAnimationControls } from '../animation/waapi/NativeAnimationControls.mjs';\nimport { PseudoAnimation } from '../animation/waapi/PseudoAnimation.mjs';\nimport { applyGeneratorOptions } from '../animation/waapi/utils/convert-options.mjs';\nimport { mapEasingToNativeEasing } from '../animation/waapi/utils/easing.mjs';\nimport { chooseLayerType } from './utils/choose-layer-type.mjs';\nimport { css } from './utils/css.mjs';\nimport { getLayerName } from './utils/get-layer-name.mjs';\nimport { getViewAnimations } from './utils/get-view-animations.mjs';\nimport { hasTarget } from './utils/has-target.mjs';\nconst definitionNames = [\"layout\", \"enter\", \"exit\", \"new\", \"old\"];\n\nfunction startViewAnimation(update, defaultOptions, targets) {\n  if (!document.startViewTransition) {\n    return new Promise(async resolve => {\n      await update();\n      resolve(new BaseGroupPlaybackControls([]));\n    });\n  } // TODO: Go over existing targets and ensure they all have ids\n\n  /**\n   * If we don't have any animations defined for the root target,\n   * remove it from being captured.\n   */\n\n\n  if (!hasTarget(\"root\", targets)) {\n    css.set(\":root\", {\n      \"view-transition-name\": \"none\"\n    });\n  }\n  /**\n   * Set the timing curve to linear for all view transition layers.\n   * This gets baked into the keyframes, which can't be changed\n   * without breaking the generated animation.\n   *\n   * This allows us to set easing via updateTiming - which can be changed.\n   */\n\n\n  css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\", {\n    \"animation-timing-function\": \"linear !important\"\n  });\n  css.commit(); // Write\n\n  const transition = document.startViewTransition(async () => {\n    await update(); // TODO: Go over new targets and ensure they all have ids\n  });\n  transition.finished.finally(() => {\n    css.remove(); // Write\n  });\n  return new Promise(resolve => {\n    transition.ready.then(() => {\n      var _a;\n\n      const generatedViewAnimations = getViewAnimations();\n      const animations = [];\n      /**\n       * Create animations for our definitions\n       */\n\n      targets.forEach((definition, target) => {\n        // TODO: If target is not \"root\", resolve elements\n        // and iterate over each\n        for (const key of definitionNames) {\n          if (!definition[key]) continue;\n          const {\n            keyframes,\n            options\n          } = definition[key];\n\n          for (let [valueName, valueKeyframes] of Object.entries(keyframes)) {\n            if (!valueKeyframes) continue;\n            const valueOptions = { ...getValueTransition(defaultOptions, valueName),\n              ...getValueTransition(options, valueName)\n            };\n            const type = chooseLayerType(key);\n            /**\n             * If this is an opacity animation, and keyframes are not an array,\n             * we need to convert them into an array and set an initial value.\n             */\n\n            if (valueName === \"opacity\" && !Array.isArray(valueKeyframes)) {\n              const initialValue = type === \"new\" ? 0 : 1;\n              valueKeyframes = [initialValue, valueKeyframes];\n            }\n            /**\n             * Resolve stagger function if provided.\n             */\n\n\n            if (typeof valueOptions.delay === \"function\") {\n              valueOptions.delay = valueOptions.delay(0, 1);\n            }\n\n            const animation = new PseudoAnimation(document.documentElement, `::view-transition-${type}(${target})`, valueName, valueKeyframes, valueOptions);\n            animations.push(animation);\n          }\n        }\n      });\n      /**\n       * Handle browser generated animations\n       */\n\n      for (const animation of generatedViewAnimations) {\n        if (animation.playState === \"finished\") continue;\n        const {\n          effect\n        } = animation;\n        if (!effect || !(effect instanceof KeyframeEffect)) continue;\n        const {\n          pseudoElement\n        } = effect;\n        if (!pseudoElement) continue;\n        const name = getLayerName(pseudoElement);\n        if (!name) continue;\n        const targetDefinition = targets.get(name.layer);\n\n        if (!targetDefinition) {\n          /**\n           * If transition name is group then update the timing of the animation\n           * whereas if it's old or new then we could possibly replace it using\n           * the above method.\n           */\n          const transitionName = name.type === \"group\" ? \"layout\" : \"\";\n          const animationTransition = { ...getValueTransition(defaultOptions, transitionName)\n          };\n          applyGeneratorOptions(animationTransition);\n          const easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration);\n          effect.updateTiming({\n            delay: secondsToMilliseconds((_a = animationTransition.delay) !== null && _a !== void 0 ? _a : 0),\n            duration: animationTransition.duration,\n            easing\n          });\n          animations.push(new NativeAnimationControls(animation));\n        } else if (hasOpacity(targetDefinition, \"enter\") && hasOpacity(targetDefinition, \"exit\") && effect.getKeyframes().some(keyframe => keyframe.mixBlendMode)) {\n          animations.push(new NativeAnimationControls(animation));\n        } else {\n          animation.cancel();\n        }\n      }\n\n      resolve(new BaseGroupPlaybackControls(animations));\n    });\n  });\n}\n\nfunction hasOpacity(target, key) {\n  var _a;\n\n  return (_a = target === null || target === void 0 ? void 0 : target[key]) === null || _a === void 0 ? void 0 : _a.keyframes.opacity;\n}\n\nexport { startViewAnimation };","map":{"version":3,"sources":["/home/bahari/vl-web-fe/node_modules/motion-dom/dist/es/view/start.mjs"],"names":["secondsToMilliseconds","BaseGroupPlaybackControls","getValueTransition","NativeAnimationControls","PseudoAnimation","applyGeneratorOptions","mapEasingToNativeEasing","chooseLayerType","css","getLayerName","getViewAnimations","hasTarget","definitionNames","startViewAnimation","update","defaultOptions","targets","document","startViewTransition","Promise","resolve","set","commit","transition","finished","finally","remove","ready","then","_a","generatedViewAnimations","animations","forEach","definition","target","key","keyframes","options","valueName","valueKeyframes","Object","entries","valueOptions","type","Array","isArray","initialValue","delay","animation","documentElement","push","playState","effect","KeyframeEffect","pseudoElement","name","targetDefinition","get","layer","transitionName","animationTransition","easing","ease","duration","updateTiming","hasOpacity","getKeyframes","some","keyframe","mixBlendMode","cancel","opacity"],"mappings":"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","sourcesContent":["import { secondsToMilliseconds } from 'motion-utils';\nimport { BaseGroupPlaybackControls } from '../animation/controls/BaseGroup.mjs';\nimport { getValueTransition } from '../animation/utils/get-value-transition.mjs';\nimport { NativeAnimationControls } from '../animation/waapi/NativeAnimationControls.mjs';\nimport { PseudoAnimation } from '../animation/waapi/PseudoAnimation.mjs';\nimport { applyGeneratorOptions } from '../animation/waapi/utils/convert-options.mjs';\nimport { mapEasingToNativeEasing } from '../animation/waapi/utils/easing.mjs';\nimport { chooseLayerType } from './utils/choose-layer-type.mjs';\nimport { css } from './utils/css.mjs';\nimport { getLayerName } from './utils/get-layer-name.mjs';\nimport { getViewAnimations } from './utils/get-view-animations.mjs';\nimport { hasTarget } from './utils/has-target.mjs';\n\nconst definitionNames = [\"layout\", \"enter\", \"exit\", \"new\", \"old\"];\nfunction startViewAnimation(update, defaultOptions, targets) {\n    if (!document.startViewTransition) {\n        return new Promise(async (resolve) => {\n            await update();\n            resolve(new BaseGroupPlaybackControls([]));\n        });\n    }\n    // TODO: Go over existing targets and ensure they all have ids\n    /**\n     * If we don't have any animations defined for the root target,\n     * remove it from being captured.\n     */\n    if (!hasTarget(\"root\", targets)) {\n        css.set(\":root\", {\n            \"view-transition-name\": \"none\",\n        });\n    }\n    /**\n     * Set the timing curve to linear for all view transition layers.\n     * This gets baked into the keyframes, which can't be changed\n     * without breaking the generated animation.\n     *\n     * This allows us to set easing via updateTiming - which can be changed.\n     */\n    css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\", { \"animation-timing-function\": \"linear !important\" });\n    css.commit(); // Write\n    const transition = document.startViewTransition(async () => {\n        await update();\n        // TODO: Go over new targets and ensure they all have ids\n    });\n    transition.finished.finally(() => {\n        css.remove(); // Write\n    });\n    return new Promise((resolve) => {\n        transition.ready.then(() => {\n            var _a;\n            const generatedViewAnimations = getViewAnimations();\n            const animations = [];\n            /**\n             * Create animations for our definitions\n             */\n            targets.forEach((definition, target) => {\n                // TODO: If target is not \"root\", resolve elements\n                // and iterate over each\n                for (const key of definitionNames) {\n                    if (!definition[key])\n                        continue;\n                    const { keyframes, options } = definition[key];\n                    for (let [valueName, valueKeyframes] of Object.entries(keyframes)) {\n                        if (!valueKeyframes)\n                            continue;\n                        const valueOptions = {\n                            ...getValueTransition(defaultOptions, valueName),\n                            ...getValueTransition(options, valueName),\n                        };\n                        const type = chooseLayerType(key);\n                        /**\n                         * If this is an opacity animation, and keyframes are not an array,\n                         * we need to convert them into an array and set an initial value.\n                         */\n                        if (valueName === \"opacity\" &&\n                            !Array.isArray(valueKeyframes)) {\n                            const initialValue = type === \"new\" ? 0 : 1;\n                            valueKeyframes = [initialValue, valueKeyframes];\n                        }\n                        /**\n                         * Resolve stagger function if provided.\n                         */\n                        if (typeof valueOptions.delay === \"function\") {\n                            valueOptions.delay = valueOptions.delay(0, 1);\n                        }\n                        const animation = new PseudoAnimation(document.documentElement, `::view-transition-${type}(${target})`, valueName, valueKeyframes, valueOptions);\n                        animations.push(animation);\n                    }\n                }\n            });\n            /**\n             * Handle browser generated animations\n             */\n            for (const animation of generatedViewAnimations) {\n                if (animation.playState === \"finished\")\n                    continue;\n                const { effect } = animation;\n                if (!effect || !(effect instanceof KeyframeEffect))\n                    continue;\n                const { pseudoElement } = effect;\n                if (!pseudoElement)\n                    continue;\n                const name = getLayerName(pseudoElement);\n                if (!name)\n                    continue;\n                const targetDefinition = targets.get(name.layer);\n                if (!targetDefinition) {\n                    /**\n                     * If transition name is group then update the timing of the animation\n                     * whereas if it's old or new then we could possibly replace it using\n                     * the above method.\n                     */\n                    const transitionName = name.type === \"group\" ? \"layout\" : \"\";\n                    const animationTransition = {\n                        ...getValueTransition(defaultOptions, transitionName),\n                    };\n                    applyGeneratorOptions(animationTransition);\n                    const easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration);\n                    effect.updateTiming({\n                        delay: secondsToMilliseconds((_a = animationTransition.delay) !== null && _a !== void 0 ? _a : 0),\n                        duration: animationTransition.duration,\n                        easing,\n                    });\n                    animations.push(new NativeAnimationControls(animation));\n                }\n                else if (hasOpacity(targetDefinition, \"enter\") &&\n                    hasOpacity(targetDefinition, \"exit\") &&\n                    effect\n                        .getKeyframes()\n                        .some((keyframe) => keyframe.mixBlendMode)) {\n                    animations.push(new NativeAnimationControls(animation));\n                }\n                else {\n                    animation.cancel();\n                }\n            }\n            resolve(new BaseGroupPlaybackControls(animations));\n        });\n    });\n}\nfunction hasOpacity(target, key) {\n    var _a;\n    return (_a = target === null || target === void 0 ? void 0 : target[key]) === null || _a === void 0 ? void 0 : _a.keyframes.opacity;\n}\n\nexport { startViewAnimation };\n"]},"metadata":{},"sourceType":"module"}