{"ast":null,"code":"\"use client\"; // packages/react/progress/src/Progress.tsx\n\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar PROGRESS_NAME = \"Progress\";\nvar DEFAULT_MAX = 100;\nvar [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\nvar [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME);\nvar Progress = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeProgress,\n    value: valueProp = null,\n    max: maxProp,\n    getValueLabel = defaultGetValueLabel,\n    ...progressProps\n  } = props;\n\n  if ((maxProp || maxProp === 0) && !isValidMaxNumber(maxProp)) {\n    console.error(getInvalidMaxError(`${maxProp}`, \"Progress\"));\n  }\n\n  const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n\n  if (valueProp !== null && !isValidValueNumber(valueProp, max)) {\n    console.error(getInvalidValueError(`${valueProp}`, \"Progress\"));\n  }\n\n  const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n  const valueLabel = isNumber(value) ? getValueLabel(value, max) : void 0;\n  return /* @__PURE__ */jsx(ProgressProvider, {\n    scope: __scopeProgress,\n    value,\n    max,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": 0,\n      \"aria-valuenow\": isNumber(value) ? value : void 0,\n      \"aria-valuetext\": valueLabel,\n      role: \"progressbar\",\n      \"data-state\": getProgressState(value, max),\n      \"data-value\": value ?? void 0,\n      \"data-max\": max,\n      ...progressProps,\n      ref: forwardedRef\n    })\n  });\n});\nProgress.displayName = PROGRESS_NAME;\nvar INDICATOR_NAME = \"ProgressIndicator\";\nvar ProgressIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeProgress,\n    ...indicatorProps\n  } = props;\n  const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    \"data-state\": getProgressState(context.value, context.max),\n    \"data-value\": context.value ?? void 0,\n    \"data-max\": context.max,\n    ...indicatorProps,\n    ref: forwardedRef\n  });\n});\nProgressIndicator.displayName = INDICATOR_NAME;\n\nfunction defaultGetValueLabel(value, max) {\n  return `${Math.round(value / max * 100)}%`;\n}\n\nfunction getProgressState(value, maxValue) {\n  return value == null ? \"indeterminate\" : value === maxValue ? \"complete\" : \"loading\";\n}\n\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\n\nfunction isValidMaxNumber(max) {\n  return isNumber(max) && !isNaN(max) && max > 0;\n}\n\nfunction isValidValueNumber(value, max) {\n  return isNumber(value) && !isNaN(value) && value <= max && value >= 0;\n}\n\nfunction getInvalidMaxError(propValue, componentName) {\n  return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${DEFAULT_MAX}\\`.`;\n}\n\nfunction getInvalidValueError(propValue, componentName) {\n  return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` or \\`undefined\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\n\nvar Root = Progress;\nvar Indicator = ProgressIndicator;\nexport { Indicator, Progress, ProgressIndicator, Root, createProgressScope };","map":{"version":3,"mappings":"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","names":["React","createContextScope","Primitive","PROGRESS_NAME","DEFAULT_MAX","createProgressContext","createProgressScope","ProgressProvider","useProgressContext","Progress","props","forwardedRef","__scopeProgress","value","valueProp","max","maxProp","getValueLabel","defaultGetValueLabel","progressProps","isValidMaxNumber","console","error","getInvalidMaxError","isValidValueNumber","getInvalidValueError","valueLabel","isNumber","scope","children","div","role","getProgressState","ref","displayName","INDICATOR_NAME","ProgressIndicator","indicatorProps","context","Math","round","maxValue","isNaN","propValue","componentName","Root","Indicator"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-progress/src/Progress.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Progress\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROGRESS_NAME = 'Progress';\nconst DEFAULT_MAX = 100;\n\ntype ScopedProps<P> = P & { __scopeProgress?: Scope };\nconst [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\n\ntype ProgressState = 'indeterminate' | 'complete' | 'loading';\ntype ProgressContextValue = { value: number | null; max: number };\nconst [ProgressProvider, useProgressContext] =\n  createProgressContext<ProgressContextValue>(PROGRESS_NAME);\n\ntype ProgressElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ProgressProps extends PrimitiveDivProps {\n  value?: number | null | undefined;\n  max?: number;\n  getValueLabel?(value: number, max: number): string;\n}\n\nconst Progress = React.forwardRef<ProgressElement, ProgressProps>(\n  (props: ScopedProps<ProgressProps>, forwardedRef) => {\n    const {\n      __scopeProgress,\n      value: valueProp = null,\n      max: maxProp,\n      getValueLabel = defaultGetValueLabel,\n      ...progressProps\n    } = props;\n\n    if ((maxProp || maxProp === 0) && !isValidMaxNumber(maxProp)) {\n      console.error(getInvalidMaxError(`${maxProp}`, 'Progress'));\n    }\n\n    const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n\n    if (valueProp !== null && !isValidValueNumber(valueProp, max)) {\n      console.error(getInvalidValueError(`${valueProp}`, 'Progress'));\n    }\n\n    const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n    const valueLabel = isNumber(value) ? getValueLabel(value, max) : undefined;\n\n    return (\n      <ProgressProvider scope={__scopeProgress} value={value} max={max}>\n        <Primitive.div\n          aria-valuemax={max}\n          aria-valuemin={0}\n          aria-valuenow={isNumber(value) ? value : undefined}\n          aria-valuetext={valueLabel}\n          role=\"progressbar\"\n          data-state={getProgressState(value, max)}\n          data-value={value ?? undefined}\n          data-max={max}\n          {...progressProps}\n          ref={forwardedRef}\n        />\n      </ProgressProvider>\n    );\n  }\n);\n\nProgress.displayName = PROGRESS_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ProgressIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'ProgressIndicator';\n\ntype ProgressIndicatorElement = React.ElementRef<typeof Primitive.div>;\ninterface ProgressIndicatorProps extends PrimitiveDivProps {}\n\nconst ProgressIndicator = React.forwardRef<ProgressIndicatorElement, ProgressIndicatorProps>(\n  (props: ScopedProps<ProgressIndicatorProps>, forwardedRef) => {\n    const { __scopeProgress, ...indicatorProps } = props;\n    const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n    return (\n      <Primitive.div\n        data-state={getProgressState(context.value, context.max)}\n        data-value={context.value ?? undefined}\n        data-max={context.max}\n        {...indicatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nProgressIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction defaultGetValueLabel(value: number, max: number) {\n  return `${Math.round((value / max) * 100)}%`;\n}\n\nfunction getProgressState(value: number | undefined | null, maxValue: number): ProgressState {\n  return value == null ? 'indeterminate' : value === maxValue ? 'complete' : 'loading';\n}\n\nfunction isNumber(value: any): value is number {\n  return typeof value === 'number';\n}\n\nfunction isValidMaxNumber(max: any): max is number {\n  // prettier-ignore\n  return (\n    isNumber(max) &&\n    !isNaN(max) &&\n    max > 0\n  );\n}\n\nfunction isValidValueNumber(value: any, max: number): value is number {\n  // prettier-ignore\n  return (\n    isNumber(value) &&\n    !isNaN(value) &&\n    value <= max &&\n    value >= 0\n  );\n}\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidMaxError(propValue: string, componentName: string) {\n  return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${DEFAULT_MAX}\\`.`;\n}\n\nfunction getInvalidValueError(propValue: string, componentName: string) {\n  return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` or \\`undefined\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\n\nconst Root = Progress;\nconst Indicator = ProgressIndicator;\n\nexport {\n  createProgressScope,\n  //\n  Progress,\n  ProgressIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { ProgressProps, ProgressIndicatorProps };\n"]},"metadata":{},"sourceType":"module"}