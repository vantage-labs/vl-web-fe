{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/bahari/vl-web-fe/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n}; // src/InView.tsx\n\n\nimport * as React from \"react\"; // src/observe.ts\n\nvar observerMap = /* @__PURE__ */new Map();\nvar RootIds = /* @__PURE__ */new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = void 0;\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n\nfunction getRootId(root) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== void 0;\n  }).map(function (key) {\n    return \"\".concat(key, \"_\").concat(key === \"root\" ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    var elements = /* @__PURE__ */new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _a;\n\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        });\n\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          entry.isVisible = inView;\n        }\n\n        (_a = elements.get(entry.target)) == null ? void 0 : _a.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nfunction observe(element, callback) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n\n  if (typeof window.IntersectionObserver === \"undefined\" && fallbackInView !== void 0) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {};\n  }\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements;\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n} // src/InView.tsx\n\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== \"function\";\n}\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inherits(InView, _React$Component);\n\n  var _super = _createSuper(InView);\n\n  function InView(props) {\n    var _this;\n\n    _classCallCheck(this, InView);\n\n    _this = _super.call(this, props);\n\n    __publicField(_assertThisInitialized(_this), \"node\", null);\n\n    __publicField(_assertThisInitialized(_this), \"_unobserveCb\", null);\n\n    __publicField(_assertThisInitialized(_this), \"handleNode\", function (node) {\n      if (_this.node) {\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: void 0\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    });\n\n    __publicField(_assertThisInitialized(_this), \"handleChange\", function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(inView, entry);\n      }\n    });\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: void 0\n    };\n    return _this;\n  }\n\n  _createClass(InView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n        this.unobserve();\n        this.observeNode();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unobserve();\n      this.node = null;\n    }\n  }, {\n    key: \"observeNode\",\n    value: function observeNode() {\n      if (!this.node || this.props.skip) return;\n      var _this$props = this.props,\n          threshold = _this$props.threshold,\n          root = _this$props.root,\n          rootMargin = _this$props.rootMargin,\n          trackVisibility = _this$props.trackVisibility,\n          delay = _this$props.delay,\n          fallbackInView = _this$props.fallbackInView;\n      this._unobserveCb = observe(this.node, this.handleChange, {\n        threshold: threshold,\n        root: root,\n        rootMargin: rootMargin,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, {\n    key: \"unobserve\",\n    value: function unobserve() {\n      if (this._unobserveCb) {\n        this._unobserveCb();\n\n        this._unobserveCb = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n\n      if (typeof children === \"function\") {\n        var _this$state = this.state,\n            inView = _this$state.inView,\n            entry = _this$state.entry;\n        return children({\n          inView: inView,\n          entry: entry,\n          ref: this.handleNode\n        });\n      }\n\n      var _this$props2 = this.props,\n          as = _this$props2.as,\n          triggerOnce = _this$props2.triggerOnce,\n          threshold = _this$props2.threshold,\n          root = _this$props2.root,\n          rootMargin = _this$props2.rootMargin,\n          onChange = _this$props2.onChange,\n          skip = _this$props2.skip,\n          trackVisibility = _this$props2.trackVisibility,\n          delay = _this$props2.delay,\n          initialInView = _this$props2.initialInView,\n          fallbackInView = _this$props2.fallbackInView,\n          props = _objectWithoutProperties(_this$props2, _excluded);\n\n      return React.createElement(as || \"div\", _objectSpread({\n        ref: this.handleNode\n      }, props), children);\n    }\n  }]);\n\n  return InView;\n}(React.Component); // src/useInView.tsx\n\n\nimport * as React2 from \"react\";\n\nfunction useInView() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView,\n      onChange = _ref.onChange;\n\n  var _a;\n\n  var _React2$useState = React2.useState(null),\n      _React2$useState2 = _slicedToArray(_React2$useState, 2),\n      ref = _React2$useState2[0],\n      setRef = _React2$useState2[1];\n\n  var callback = React2.useRef();\n\n  var _React2$useState3 = React2.useState({\n    inView: !!initialInView,\n    entry: void 0\n  }),\n      _React2$useState4 = _slicedToArray(_React2$useState3, 2),\n      state = _React2$useState4[0],\n      setState = _React2$useState4[1];\n\n  callback.current = onChange;\n  React2.useEffect(function () {\n    if (skip || !ref) return;\n    var unobserve;\n    unobserve = observe(ref, function (inView, entry) {\n      setState({\n        inView: inView,\n        entry: entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        unobserve();\n        unobserve = void 0;\n      }\n    }, {\n      root: root,\n      rootMargin: rootMargin,\n      threshold: threshold,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n    return function () {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  var entryTarget = (_a = state.entry) == null ? void 0 : _a.target;\n  var previousEntryTarget = React2.useRef();\n\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: void 0\n    });\n  }\n\n  var result = [setRef, state.inView, state.entry];\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAYA,KAAZ,MAAuB,OAAvB,C;;ACEA,IAAMC,cAAc,mBAAIC,GAAJ,EAApB;AASA,IAAMC,UAA+C,mBAAIC,OAAJ,EAArD;AACA,IAAIC,SAAS,CAAb;AAEA,IAAIC,mBAAwC,MAA5C;;AAQO,SAASC,qBAAT,CAA+BC,MAA/B,EAA4D;AACjEF,qBAAmBE,MAAnB;AACF;;AAMA,SAASC,SAAT,CAAmBC,IAAnB,EAA2D;AACzD,MAAI,CAACA,IAAL,EAAW,OAAO,GAAP;AACX,MAAIP,QAAQQ,GAAR,CAAYD,IAAZ,CAAJ,EAAuB,OAAOP,QAAQS,GAAR,CAAYF,IAAZ,CAAP;AACvBL,YAAU,CAAV;AACAF,UAAQU,GAAR,CAAYH,IAAZ,EAAkBL,OAAOS,QAAP,EAAlB;AACA,SAAOX,QAAQS,GAAR,CAAYF,IAAZ,CAAP;AACF;;AAOO,SAASK,WAAT,CAAqBC,OAArB,EAAwD;AAC7D,SAAOC,OAAOC,IAAP,CAAYF,OAAZ,EACJG,IADI,GAEJC,MAFI,CAGH,UAACC,GAAD;AAAA,WAASL,QAAQK,GAAR,MAAmD,MAA5D;AAAA,GAHG,EAKJC,GALI,CAKA,UAACD,GAAD,EAAS;AACZ,qBAAUA,GAAV,cACEA,QAAQ,MAAR,GACIZ,UAAUO,QAAQN,IAAlB,CADJ,GAEIM,QAAQK,GAAR,CAHN;AAKD,GAXI,EAYJP,QAZI,EAAP;AAaF;;AAEA,SAASS,cAAT,CAAwBP,OAAxB,EAA2D;AAEzD,MAAIQ,KAAKT,YAAYC,OAAZ,CAAT;AACA,MAAIS,WAAWxB,YAAYW,GAAZ,CAAgBY,EAAhB,CAAf;;AAEA,MAAI,CAACC,QAAL,EAAe;AAEb,QAAMC,WAAW,mBAAIxB,GAAJ,EAAjB;AACA,QAAIyB,UAAJ;AAEA,QAAMC,WAAW,IAAIC,oBAAJ,CAAyB,UAACC,OAAD,EAAa;AACrDA,cAAQC,OAAR,CAAgB,UAACC,KAAD,EAAW;AAtEjC;;AAyEQ,YAAMxB,SACJwB,MAAMC,cAAN,IACAN,WAAWO,IAAX,CAAgB,UAACC,SAAD;AAAA,iBAAeH,MAAMI,iBAAN,IAA2BD,SAA1C;AAAA,SAAhB,CAFF;;AAKA,YAAInB,QAAQqB,eAAR,IAA2B,OAAOL,MAAMM,SAAb,KAA2B,WAA1D,EAAuE;AAGrEN,gBAAMM,SAAN,GAAkB9B,MAAlB;AACF;;AAEA,uBAASI,GAAT,CAAaoB,MAAMO,MAAnB,yBAA4BR,OAA5B,CAAoC,UAACS,QAAD,EAAc;AAChDA,mBAAShC,MAAT,EAAiBwB,KAAjB;AACF,SAFA;AAGD,OAjBD;AAkBF,KAnBiB,EAmBdhB,OAnBc,CAAjB;AAsBAW,iBACEC,SAASD,UAAT,KACCc,MAAMC,OAAN,CAAc1B,QAAQmB,SAAtB,IACGnB,QAAQmB,SADX,GAEG,CAACnB,QAAQmB,SAAR,IAAqB,CAAtB,CAHJ,CADF;AAMAV,eAAW;AACTD,YADS;AAETI,wBAFS;AAGTF;AAHS,KAAX;AAMAzB,gBAAYY,GAAZ,CAAgBW,EAAhB,EAAoBC,QAApB;AACF;;AAEA,SAAOA,QAAP;AACF;;AASO,SAASkB,OAAT,CACLC,OADK,EAELJ,QAFK,EAKL;AAAA,MAFAxB,OAEA,uEAFoC,EAEpC;AAAA,MADA6B,cACA,uEADiBvC,gBACjB;;AACA,MACE,OAAOwC,OAAOjB,oBAAd,KAAuC,WAAvC,IACAgB,mBAAmB,MAFrB,EAGE;AACA,QAAME,SAASH,QAAQI,qBAAR,EAAf;AACAR,aAASK,cAAT,EAAyB;AACvBZ,sBAAgBY,cADO;AAEvBN,cAAQK,OAFe;AAGvBR,yBACE,OAAOpB,QAAQmB,SAAf,KAA6B,QAA7B,GAAwCnB,QAAQmB,SAAhD,GAA4D,CAJvC;AAKvBc,YAAM,CALiB;AAMvBC,0BAAoBH,MANG;AAOvBI,wBAAkBJ,MAPK;AAQvBK,kBAAYL;AARW,KAAzB;AAUA,WAAO,YAAM,CAEb,CAFA;AAGF;;AAEA,wBAAmCxB,eAAeP,OAAf,CAAnC;AAAA,MAAQQ,EAAR,mBAAQA,EAAR;AAAA,MAAYI,QAAZ,mBAAYA,QAAZ;AAAA,MAAsBF,QAAtB,mBAAsBA,QAAtB;;AAGA,MAAI2B,YAAY3B,SAASd,GAAT,CAAagC,OAAb,KAAyB,EAAzC;;AACA,MAAI,CAAClB,SAASf,GAAT,CAAaiC,OAAb,CAAL,EAA4B;AAC1BlB,aAASb,GAAT,CAAa+B,OAAb,EAAsBS,SAAtB;AACF;;AAEAA,YAAUC,IAAV,CAAed,QAAf;AACAZ,WAASe,OAAT,CAAiBC,OAAjB;AAEA,SAAO,SAASW,SAAT,GAAqB;AAE1BF,cAAUG,MAAV,CAAiBH,UAAUI,OAAV,CAAkBjB,QAAlB,CAAjB,EAA8C,CAA9C;;AAEA,QAAIa,UAAUK,MAAV,KAAqB,CAAzB,EAA4B;AAE1BhC,eAASiC,MAAT,CAAgBf,OAAhB;AACAhB,eAAS2B,SAAT,CAAmBX,OAAnB;AACF;;AAEA,QAAIlB,SAASkC,IAAT,KAAkB,CAAtB,EAAyB;AAEvBhC,eAASiC,UAAT;AACA5D,kBAAY0D,MAAZ,CAAmBnC,EAAnB;AACF;AACF,GAfA;AAgBF,C;;;ADhKA,SAASsC,eAAT,CACEC,KADF,EAE+B;AAC7B,SAAO,OAAOA,MAAMC,QAAb,KAA0B,UAAjC;AACF;;AAmDO,IAAMC;AAAA;;AAAA;;AAIX,kBAAYF,KAAZ,EAAmE;AAAA;;AAAA;;AACjE,8BAAMA,KAAN;;AA2BFG,yDAAuB,IAAvB;;AACAA,iEAAoC,IAApC;;AAoCAA,+DAAa,UAACC,IAAD,EAA2B;AACtC,UAAI,MAAKA,IAAT,EAAe;AAEb,cAAKZ,SAAL;;AAEA,YAAI,CAACY,IAAD,IAAS,CAAC,MAAKJ,KAAL,CAAWK,WAArB,IAAoC,CAAC,MAAKL,KAAL,CAAWM,IAApD,EAA0D;AAExD,gBAAKC,QAAL,CAAc;AAAE9D,oBAAQ,CAAC,CAAC,MAAKuD,KAAL,CAAWQ,aAAvB;AAAsCvC,mBAAO;AAA7C,WAAd;AACF;AACF;;AAEA,YAAKmC,IAAL,GAAYA,OAAOA,IAAP,GAAc,IAA1B;;AACA,YAAKK,WAAL;AACF,KAbA;;AAeAN,iEAAe,UAAC1D,MAAD,EAAkBwB,KAAlB,EAAuD;AACpE,UAAIxB,UAAU,MAAKuD,KAAL,CAAWK,WAAzB,EAAsC;AAEpC,cAAKb,SAAL;AACF;;AACA,UAAI,CAACO,gBAAgB,MAAKC,KAArB,CAAL,EAAkC;AAGhC,cAAKO,QAAL,CAAc;AAAE9D,wBAAF;AAAUwB;AAAV,SAAd;AACF;;AACA,UAAI,MAAK+B,KAAL,CAAWU,QAAf,EAAyB;AAEvB,cAAKV,KAAL,CAAWU,QAAX,CAAoBjE,MAApB,EAA4BwB,KAA5B;AACF;AACF,KAdA;;AA9EE,UAAK0C,KAAL,GAAa;AACXlE,cAAQ,CAAC,CAACuD,MAAMQ,aADL;AAEXvC,aAAO;AAFI,KAAb;AAFiE;AAMnE;;AAVW;AAAA;AAAA,WAYX,4BAAmB2C,SAAnB,EAAyD;AAEvD,UACEA,UAAUC,UAAV,KAAyB,KAAKb,KAAL,CAAWa,UAApC,IACAD,UAAUjE,IAAV,KAAmB,KAAKqD,KAAL,CAAWrD,IAD9B,IAEAiE,UAAUxC,SAAV,KAAwB,KAAK4B,KAAL,CAAW5B,SAFnC,IAGAwC,UAAUN,IAAV,KAAmB,KAAKN,KAAL,CAAWM,IAH9B,IAIAM,UAAUtC,eAAV,KAA8B,KAAK0B,KAAL,CAAW1B,eAJzC,IAKAsC,UAAUE,KAAV,KAAoB,KAAKd,KAAL,CAAWc,KANjC,EAOE;AACA,aAAKtB,SAAL;AACA,aAAKiB,WAAL;AACF;AACF;AAzBW;AAAA;AAAA,WA2BX,gCAAuB;AACrB,WAAKjB,SAAL;AACA,WAAKY,IAAL,GAAY,IAAZ;AACF;AA9BW;AAAA;AAAA,WAmCX,uBAAc;AACZ,UAAI,CAAC,KAAKA,IAAN,IAAc,KAAKJ,KAAL,CAAWM,IAA7B,EAAmC;AACnC,wBAOI,KAAKN,KAPT;AAAA,UACE5B,SADF,eACEA,SADF;AAAA,UAEEzB,IAFF,eAEEA,IAFF;AAAA,UAGEkE,UAHF,eAGEA,UAHF;AAAA,UAIEvC,eAJF,eAIEA,eAJF;AAAA,UAKEwC,KALF,eAKEA,KALF;AAAA,UAMEhC,cANF,eAMEA,cANF;AASA,WAAKiC,YAAL,GAAoBnC,QAClB,KAAKwB,IADa,EAElB,KAAKY,YAFa,EAGlB;AACE5C,4BADF;AAEEzB,kBAFF;AAGEkE,8BAHF;AAGE;AAEAvC,wCALF;AAKE;AAEAwC;AAPF,OAHkB,EAYlBhC,cAZkB,CAApB;AAcF;AA5DW;AAAA;AAAA,WA8DX,qBAAY;AACV,UAAI,KAAKiC,YAAT,EAAuB;AACrB,aAAKA,YAAL;;AACA,aAAKA,YAAL,GAAoB,IAApB;AACF;AACF;AAnEW;AAAA;AAAA,WAoGX,kBAAS;AACP,UAAQd,QAAR,GAAqB,KAAKD,KAA1B,CAAQC,QAAR;;AACA,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,0BAA0B,KAAKU,KAA/B;AAAA,YAAQlE,MAAR,eAAQA,MAAR;AAAA,YAAgBwB,KAAhB,eAAgBA,KAAhB;AACA,eAAOgC,SAAS;AAAExD,wBAAF;AAAUwB,sBAAV;AAAiBgD,eAAK,KAAKC;AAA3B,SAAT,CAAP;AACF;;AAEA,yBAaI,KAAKlB,KAbT;AAAA,UACEmB,EADF,gBACEA,EADF;AAAA,UAEEd,WAFF,gBAEEA,WAFF;AAAA,UAGEjC,SAHF,gBAGEA,SAHF;AAAA,UAIEzB,IAJF,gBAIEA,IAJF;AAAA,UAKEkE,UALF,gBAKEA,UALF;AAAA,UAMEH,QANF,gBAMEA,QANF;AAAA,UAOEJ,IAPF,gBAOEA,IAPF;AAAA,UAQEhC,eARF,gBAQEA,eARF;AAAA,UASEwC,KATF,gBASEA,KATF;AAAA,UAUEN,aAVF,gBAUEA,aAVF;AAAA,UAWE1B,cAXF,gBAWEA,cAXF;AAAA,UAYKkB,KAZL;;AAeA,aAAa/D,oBACXkF,MAAM,KADK;AAETF,aAAK,KAAKC;AAFD,SAEgBlB,KAFhB,GAGXC,QAHW,CAAb;AAKF;AA/HW;;AAAA;AAAA,EAAqBhE,eAArB,CAAN,C;;;AEhEP,YAAYA,MAAZ,MAAuB,OAAvB;;AAmCO,SAASmF,SAAT,GAW0C;AAAA,iFAAxB,EAAwB;AAAA,MAV/ChD,SAU+C,QAV/CA,SAU+C;AAAA,MAT/C0C,KAS+C,QAT/CA,KAS+C;AAAA,MAR/CxC,eAQ+C,QAR/CA,eAQ+C;AAAA,MAP/CuC,UAO+C,QAP/CA,UAO+C;AAAA,MAN/ClE,IAM+C,QAN/CA,IAM+C;AAAA,MAL/C0D,WAK+C,QAL/CA,WAK+C;AAAA,MAJ/CC,IAI+C,QAJ/CA,IAI+C;AAAA,MAH/CE,aAG+C,QAH/CA,aAG+C;AAAA,MAF/C1B,cAE+C,QAF/CA,cAE+C;AAAA,MAD/C4B,QAC+C,QAD/CA,QAC+C;;AA9CjD;;AA+CE,yBAA4BW,gBAAyB,IAAzB,CAA5B;AAAA;AAAA,MAAOJ,GAAP;AAAA,MAAYK,MAAZ;;AACA,MAAM7C,WAAiB4C,eAAvB;;AACA,0BAAgCA,gBAAgB;AAC9C5E,YAAQ,CAAC,CAAC+D,aADoC;AAE9CvC,WAAO;AAFuC,GAAhB,CAAhC;AAAA;AAAA,MAAO0C,KAAP;AAAA,MAAcJ,QAAd;;AAOA9B,WAAS8C,OAAT,GAAmBb,QAAnB;AAEMW,mBACJ,YAAM;AAEJ,QAAIf,QAAQ,CAACW,GAAb,EAAkB;AAElB,QAAIzB,SAAJ;AACAA,gBAAYZ,QACVqC,GADU,EAEV,UAACxE,MAAD,EAASwB,KAAT,EAAmB;AACjBsC,eAAS;AACP9D,sBADO;AAEPwB;AAFO,OAAT;AAIA,UAAIQ,SAAS8C,OAAb,EAAsB9C,SAAS8C,OAAT,CAAiB9E,MAAjB,EAAyBwB,KAAzB;;AAEtB,UAAIA,MAAMC,cAAN,IAAwBmC,WAAxB,IAAuCb,SAA3C,EAAsD;AAEpDA;AACAA,oBAAY,MAAZ;AACF;AACF,KAdU,EAeV;AACE7C,gBADF;AAEEkE,4BAFF;AAGEzC,0BAHF;AAGE;AAEAE,sCALF;AAKE;AAEAwC;AAPF,KAfU,EAwBVhC,cAxBU,CAAZ;AA2BA,WAAO,YAAM;AACX,UAAIU,SAAJ,EAAe;AACbA;AACF;AACF,KAJA;AAKF,GAtCI,EAsCJ;AAAA;AAGA;AAAA;AAGEd,QAAMC,OAAN,CAAcP,SAAd,IAA2BA,UAAUrB,QAAV,EAA3B,GAAkDqB,SAHpD,EAIE6C,GAJF,EAKEtE,IALF,EAMEkE,UANF,EAOER,WAPF,EAQEC,IARF,EASEhC,eATF,EAUEQ,cAVF,EAWEgC,KAXF,CAzCI;AAwDN,MAAMU,eAAcC,WAAMxD,KAApB,KAAc,IAAd,GAAc,MAAd,GAAcwD,GAAajD,MAAjC;AACA,MAAMkD,sBAA4BL,eAAlC;;AACA,MACE,CAACJ,GAAD,IACAO,WADA,IAEA,CAACnB,WAFD,IAGA,CAACC,IAHD,IAIAoB,oBAAoBH,OAApB,KAAgCC,WALlC,EAME;AAGAE,wBAAoBH,OAApB,GAA8BC,WAA9B;AACAjB,aAAS;AACP9D,cAAQ,CAAC,CAAC+D,aADH;AAEPvC,aAAO;AAFA,KAAT;AAIF;;AAEA,MAAM0D,SAAS,CAACL,MAAD,EAASX,MAAMlE,MAAf,EAAuBkE,MAAM1C,KAA7B,CAAf;AAGA0D,SAAOV,GAAP,GAAaU,OAAO,CAAP,CAAb;AACAA,SAAOlF,MAAP,GAAgBkF,OAAO,CAAP,CAAhB;AACAA,SAAO1D,KAAP,GAAe0D,OAAO,CAAP,CAAf;AAEA,SAAOA,MAAP;AACF","names":["React","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","length","delete","size","disconnect","isPlainChildren","props","children","InView","__publicField","node","triggerOnce","skip","setState","initialInView","observeNode","onChange","state","prevProps","rootMargin","delay","_unobserveCb","handleChange","ref","handleNode","as","useInView","React2","setRef","current","entryTarget","_a","previousEntryTarget","result"],"sources":["/home/bahari/vl-web-fe/node_modules/src/InView.tsx","/home/bahari/vl-web-fe/node_modules/src/observe.ts","/home/bahari/vl-web-fe/node_modules/src/useInView.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}