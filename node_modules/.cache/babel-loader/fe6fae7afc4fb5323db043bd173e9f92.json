{"ast":null,"code":"\"use client\"; // packages/react/popover/src/Popover.tsx\n\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { useId } from \"@radix-ui/react-id\";\nimport * as PopperPrimitive from \"@radix-ui/react-popper\";\nimport { createPopperScope } from \"@radix-ui/react-popper\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { hideOthers } from \"aria-hidden\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { jsx } from \"react/jsx-runtime\";\nvar POPOVER_NAME = \"Popover\";\nvar [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [createPopperScope]);\nvar usePopperScope = createPopperScope();\nvar [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);\n\nvar Popover = props => {\n  const {\n    __scopePopover,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = false\n  } = props;\n  const popperScope = usePopperScope(__scopePopover);\n  const triggerRef = React.useRef(null);\n  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */jsx(PopperPrimitive.Root, { ...popperScope,\n    children: /* @__PURE__ */jsx(PopoverProvider, {\n      scope: __scopePopover,\n      contentId: useId(),\n      triggerRef,\n      open,\n      onOpenChange: setOpen,\n      onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n      hasCustomAnchor,\n      onCustomAnchorAdd: React.useCallback(() => setHasCustomAnchor(true), []),\n      onCustomAnchorRemove: React.useCallback(() => setHasCustomAnchor(false), []),\n      modal,\n      children\n    })\n  });\n};\n\nPopover.displayName = POPOVER_NAME;\nvar ANCHOR_NAME = \"PopoverAnchor\";\nvar PopoverAnchor = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    ...anchorProps\n  } = props;\n  const context = usePopoverContext(ANCHOR_NAME, __scopePopover);\n  const popperScope = usePopperScope(__scopePopover);\n  const {\n    onCustomAnchorAdd,\n    onCustomAnchorRemove\n  } = context;\n  React.useEffect(() => {\n    onCustomAnchorAdd();\n    return () => onCustomAnchorRemove();\n  }, [onCustomAnchorAdd, onCustomAnchorRemove]);\n  return /* @__PURE__ */jsx(PopperPrimitive.Anchor, { ...popperScope,\n    ...anchorProps,\n    ref: forwardedRef\n  });\n});\nPopoverAnchor.displayName = ANCHOR_NAME;\nvar TRIGGER_NAME = \"PopoverTrigger\";\nvar PopoverTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    ...triggerProps\n  } = props;\n  const context = usePopoverContext(TRIGGER_NAME, __scopePopover);\n  const popperScope = usePopperScope(__scopePopover);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  const trigger = /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\",\n    \"aria-expanded\": context.open,\n    \"aria-controls\": context.contentId,\n    \"data-state\": getState(context.open),\n    ...triggerProps,\n    ref: composedTriggerRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  });\n  return context.hasCustomAnchor ? trigger : /* @__PURE__ */jsx(PopperPrimitive.Anchor, {\n    asChild: true,\n    ...popperScope,\n    children: trigger\n  });\n});\nPopoverTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"PopoverPortal\";\nvar [PortalProvider, usePortalContext] = createPopoverContext(PORTAL_NAME, {\n  forceMount: void 0\n});\n\nvar PopoverPortal = props => {\n  const {\n    __scopePopover,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = usePopoverContext(PORTAL_NAME, __scopePopover);\n  return /* @__PURE__ */jsx(PortalProvider, {\n    scope: __scopePopover,\n    forceMount,\n    children: /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(PortalPrimitive, {\n        asChild: true,\n        container,\n        children\n      })\n    })\n  });\n};\n\nPopoverPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"PopoverContent\";\nvar PopoverContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);\n  const {\n    forceMount = portalContext.forceMount,\n    ...contentProps\n  } = props;\n  const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: context.modal ? /* @__PURE__ */jsx(PopoverContentModal, { ...contentProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */jsx(PopoverContentNonModal, { ...contentProps,\n      ref: forwardedRef\n    })\n  });\n});\nPopoverContent.displayName = CONTENT_NAME;\nvar PopoverContentModal = React.forwardRef((props, forwardedRef) => {\n  const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  const isRightClickOutsideRef = React.useRef(false);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n  return /* @__PURE__ */jsx(RemoveScroll, {\n    as: Slot,\n    allowPinchZoom: true,\n    children: /* @__PURE__ */jsx(PopoverContentImpl, { ...props,\n      ref: composedRefs,\n      trapFocus: context.open,\n      disableOutsidePointerEvents: true,\n      onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, event => {\n        event.preventDefault();\n        if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();\n      }),\n      onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, event => {\n        const originalEvent = event.detail.originalEvent;\n        const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n        isRightClickOutsideRef.current = isRightClick;\n      }, {\n        checkForDefaultPrevented: false\n      }),\n      onFocusOutside: composeEventHandlers(props.onFocusOutside, event => event.preventDefault(), {\n        checkForDefaultPrevented: false\n      })\n    })\n  });\n});\nvar PopoverContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n  const hasInteractedOutsideRef = React.useRef(false);\n  const hasPointerDownOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(PopoverContentImpl, { ...props,\n    ref: forwardedRef,\n    trapFocus: false,\n    disableOutsidePointerEvents: false,\n    onCloseAutoFocus: event => {\n      props.onCloseAutoFocus?.(event);\n\n      if (!event.defaultPrevented) {\n        if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n        event.preventDefault();\n      }\n\n      hasInteractedOutsideRef.current = false;\n      hasPointerDownOutsideRef.current = false;\n    },\n    onInteractOutside: event => {\n      props.onInteractOutside?.(event);\n\n      if (!event.defaultPrevented) {\n        hasInteractedOutsideRef.current = true;\n\n        if (event.detail.originalEvent.type === \"pointerdown\") {\n          hasPointerDownOutsideRef.current = true;\n        }\n      }\n\n      const target = event.target;\n      const targetIsTrigger = context.triggerRef.current?.contains(target);\n      if (targetIsTrigger) event.preventDefault();\n\n      if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n        event.preventDefault();\n      }\n    }\n  });\n});\nvar PopoverContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    trapFocus,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    disableOutsidePointerEvents,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = usePopoverContext(CONTENT_NAME, __scopePopover);\n  const popperScope = usePopperScope(__scopePopover);\n  useFocusGuards();\n  return /* @__PURE__ */jsx(FocusScope, {\n    asChild: true,\n    loop: true,\n    trapped: trapFocus,\n    onMountAutoFocus: onOpenAutoFocus,\n    onUnmountAutoFocus: onCloseAutoFocus,\n    children: /* @__PURE__ */jsx(DismissableLayer, {\n      asChild: true,\n      disableOutsidePointerEvents,\n      onInteractOutside,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onDismiss: () => context.onOpenChange(false),\n      children: /* @__PURE__ */jsx(PopperPrimitive.Content, {\n        \"data-state\": getState(context.open),\n        role: \"dialog\",\n        id: context.contentId,\n        ...popperScope,\n        ...contentProps,\n        ref: forwardedRef,\n        style: { ...contentProps.style,\n          // re-namespace exposed content custom properties\n          ...{\n            \"--radix-popover-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n            \"--radix-popover-content-available-width\": \"var(--radix-popper-available-width)\",\n            \"--radix-popover-content-available-height\": \"var(--radix-popper-available-height)\",\n            \"--radix-popover-trigger-width\": \"var(--radix-popper-anchor-width)\",\n            \"--radix-popover-trigger-height\": \"var(--radix-popper-anchor-height)\"\n          }\n        }\n      })\n    })\n  });\n});\nvar CLOSE_NAME = \"PopoverClose\";\nvar PopoverClose = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    ...closeProps\n  } = props;\n  const context = usePopoverContext(CLOSE_NAME, __scopePopover);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    ...closeProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))\n  });\n});\nPopoverClose.displayName = CLOSE_NAME;\nvar ARROW_NAME = \"PopoverArrow\";\nvar PopoverArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    ...arrowProps\n  } = props;\n  const popperScope = usePopperScope(__scopePopover);\n  return /* @__PURE__ */jsx(PopperPrimitive.Arrow, { ...popperScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nPopoverArrow.displayName = ARROW_NAME;\n\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\n\nvar Root2 = Popover;\nvar Anchor2 = PopoverAnchor;\nvar Trigger = PopoverTrigger;\nvar Portal = PopoverPortal;\nvar Content2 = PopoverContent;\nvar Close = PopoverClose;\nvar Arrow2 = PopoverArrow;\nexport { Anchor2 as Anchor, Arrow2 as Arrow, Close, Content2 as Content, Popover, PopoverAnchor, PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverTrigger, Portal, Root2 as Root, Trigger, createPopoverScope };","map":{"version":3,"mappings":"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","names":["React","composeEventHandlers","useComposedRefs","createContextScope","DismissableLayer","useFocusGuards","FocusScope","useId","PopperPrimitive","createPopperScope","Portal","PortalPrimitive","Presence","Primitive","Slot","useControllableState","hideOthers","RemoveScroll","POPOVER_NAME","createPopoverContext","createPopoverScope","usePopperScope","PopoverProvider","usePopoverContext","Popover","props","__scopePopover","children","open","openProp","defaultOpen","onOpenChange","modal","popperScope","triggerRef","hasCustomAnchor","setHasCustomAnchor","setOpen","prop","defaultProp","onChange","scope","contentId","onOpenToggle","prevOpen","onCustomAnchorAdd","onCustomAnchorRemove","displayName","ANCHOR_NAME","PopoverAnchor","forwardedRef","anchorProps","context","ref","TRIGGER_NAME","PopoverTrigger","triggerProps","composedTriggerRef","trigger","button","type","getState","onClick","asChild","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","PopoverPortal","container","present","CONTENT_NAME","PopoverContent","portalContext","contentProps","PopoverContentModal","PopoverContentNonModal","contentRef","composedRefs","isRightClickOutsideRef","content","current","as","allowPinchZoom","PopoverContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","isRightClick","checkForDefaultPrevented","onFocusOutside","hasInteractedOutsideRef","hasPointerDownOutsideRef","defaultPrevented","onInteractOutside","target","targetIsTrigger","contains","onOpenAutoFocus","onEscapeKeyDown","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","onDismiss","role","id","style","CLOSE_NAME","PopoverClose","closeProps","ARROW_NAME","PopoverArrow","arrowProps","Root","Anchor","Trigger","Content","Close","Arrow"],"sources":["/home/bahari/vl-web-fe/node_modules/@radix-ui/react-popover/src/Popover.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Popover\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPOVER_NAME = 'Popover';\n\ntype ScopedProps<P> = P & { __scopePopover?: Scope };\nconst [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype PopoverContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  hasCustomAnchor: boolean;\n  onCustomAnchorAdd(): void;\n  onCustomAnchorRemove(): void;\n  modal: boolean;\n};\n\nconst [PopoverProvider, usePopoverContext] =\n  createPopoverContext<PopoverContextValue>(POPOVER_NAME);\n\ninterface PopoverProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  modal?: boolean;\n}\n\nconst Popover: React.FC<PopoverProps> = (props: ScopedProps<PopoverProps>) => {\n  const {\n    __scopePopover,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = false,\n  } = props;\n  const popperScope = usePopperScope(__scopePopover);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <PopoverProvider\n        scope={__scopePopover}\n        contentId={useId()}\n        triggerRef={triggerRef}\n        open={open}\n        onOpenChange={setOpen}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n        hasCustomAnchor={hasCustomAnchor}\n        onCustomAnchorAdd={React.useCallback(() => setHasCustomAnchor(true), [])}\n        onCustomAnchorRemove={React.useCallback(() => setHasCustomAnchor(false), [])}\n        modal={modal}\n      >\n        {children}\n      </PopoverProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nPopover.displayName = POPOVER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'PopoverAnchor';\n\ntype PopoverAnchorElement = React.ElementRef<typeof PopperPrimitive.Anchor>;\ntype PopperAnchorProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Anchor>;\ninterface PopoverAnchorProps extends PopperAnchorProps {}\n\nconst PopoverAnchor = React.forwardRef<PopoverAnchorElement, PopoverAnchorProps>(\n  (props: ScopedProps<PopoverAnchorProps>, forwardedRef) => {\n    const { __scopePopover, ...anchorProps } = props;\n    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;\n\n    React.useEffect(() => {\n      onCustomAnchorAdd();\n      return () => onCustomAnchorRemove();\n    }, [onCustomAnchorAdd, onCustomAnchorRemove]);\n\n    return <PopperPrimitive.Anchor {...popperScope} {...anchorProps} ref={forwardedRef} />;\n  }\n);\n\nPopoverAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'PopoverTrigger';\n\ntype PopoverTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface PopoverTriggerProps extends PrimitiveButtonProps {}\n\nconst PopoverTrigger = React.forwardRef<PopoverTriggerElement, PopoverTriggerProps>(\n  (props: ScopedProps<PopoverTriggerProps>, forwardedRef) => {\n    const { __scopePopover, ...triggerProps } = props;\n    const context = usePopoverContext(TRIGGER_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n\n    const trigger = (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n\n    return context.hasCustomAnchor ? (\n      trigger\n    ) : (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        {trigger}\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nPopoverTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'PopoverPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createPopoverContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface PopoverPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst PopoverPortal: React.FC<PopoverPortalProps> = (props: ScopedProps<PopoverPortalProps>) => {\n  const { __scopePopover, forceMount, children, container } = props;\n  const context = usePopoverContext(PORTAL_NAME, __scopePopover);\n  return (\n    <PortalProvider scope={__scopePopover} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nPopoverPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'PopoverContent';\n\ninterface PopoverContentProps extends PopoverContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst PopoverContent = React.forwardRef<PopoverContentTypeElement, PopoverContentProps>(\n  (props: ScopedProps<PopoverContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <PopoverContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <PopoverContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nPopoverContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PopoverContentTypeElement = PopoverContentImplElement;\ninterface PopoverContentTypeProps\n  extends Omit<PopoverContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst PopoverContentModal = React.forwardRef<PopoverContentTypeElement, PopoverContentTypeProps>(\n  (props: ScopedProps<PopoverContentTypeProps>, forwardedRef) => {\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const isRightClickOutsideRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <RemoveScroll as={Slot} allowPinchZoom>\n        <PopoverContentImpl\n          {...props}\n          ref={composedRefs}\n          // we make sure we're not trapping once it's been closed\n          // (closed !== unmounted when animating out)\n          trapFocus={context.open}\n          disableOutsidePointerEvents\n          onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n            event.preventDefault();\n            if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();\n          })}\n          onPointerDownOutside={composeEventHandlers(\n            props.onPointerDownOutside,\n            (event) => {\n              const originalEvent = event.detail.originalEvent;\n              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n              isRightClickOutsideRef.current = isRightClick;\n            },\n            { checkForDefaultPrevented: false }\n          )}\n          // When focus is trapped, a `focusout` event may still happen.\n          // We make sure we don't trigger our `onDismiss` in such case.\n          onFocusOutside={composeEventHandlers(\n            props.onFocusOutside,\n            (event) => event.preventDefault(),\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\nconst PopoverContentNonModal = React.forwardRef<PopoverContentTypeElement, PopoverContentTypeProps>(\n  (props: ScopedProps<PopoverContentTypeProps>, forwardedRef) => {\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <PopoverContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PopoverContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface PopoverContentImplProps\n  extends Omit<PopperContentProps, 'onPlaced'>,\n    Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * Whether focus should be trapped within the `Popover`\n   * (default: false)\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst PopoverContentImpl = React.forwardRef<PopoverContentImplElement, PopoverContentImplProps>(\n  (props: ScopedProps<PopoverContentImplProps>, forwardedRef) => {\n    const {\n      __scopePopover,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      disableOutsidePointerEvents,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      ...contentProps\n    } = props;\n    const context = usePopoverContext(CONTENT_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n\n    // Make sure the whole tree has focus guards as our `Popover` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <FocusScope\n        asChild\n        loop\n        trapped={trapFocus}\n        onMountAutoFocus={onOpenAutoFocus}\n        onUnmountAutoFocus={onCloseAutoFocus}\n      >\n        <DismissableLayer\n          asChild\n          disableOutsidePointerEvents={disableOutsidePointerEvents}\n          onInteractOutside={onInteractOutside}\n          onEscapeKeyDown={onEscapeKeyDown}\n          onPointerDownOutside={onPointerDownOutside}\n          onFocusOutside={onFocusOutside}\n          onDismiss={() => context.onOpenChange(false)}\n        >\n          <PopperPrimitive.Content\n            data-state={getState(context.open)}\n            role=\"dialog\"\n            id={context.contentId}\n            {...popperScope}\n            {...contentProps}\n            ref={forwardedRef}\n            style={{\n              ...contentProps.style,\n              // re-namespace exposed content custom properties\n              ...{\n                '--radix-popover-content-transform-origin': 'var(--radix-popper-transform-origin)',\n                '--radix-popover-content-available-width': 'var(--radix-popper-available-width)',\n                '--radix-popover-content-available-height': 'var(--radix-popper-available-height)',\n                '--radix-popover-trigger-width': 'var(--radix-popper-anchor-width)',\n                '--radix-popover-trigger-height': 'var(--radix-popper-anchor-height)',\n              },\n            }}\n          />\n        </DismissableLayer>\n      </FocusScope>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'PopoverClose';\n\ntype PopoverCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface PopoverCloseProps extends PrimitiveButtonProps {}\n\nconst PopoverClose = React.forwardRef<PopoverCloseElement, PopoverCloseProps>(\n  (props: ScopedProps<PopoverCloseProps>, forwardedRef) => {\n    const { __scopePopover, ...closeProps } = props;\n    const context = usePopoverContext(CLOSE_NAME, __scopePopover);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nPopoverClose.displayName = CLOSE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopoverArrow';\n\ntype PopoverArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface PopoverArrowProps extends PopperArrowProps {}\n\nconst PopoverArrow = React.forwardRef<PopoverArrowElement, PopoverArrowProps>(\n  (props: ScopedProps<PopoverArrowProps>, forwardedRef) => {\n    const { __scopePopover, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopePopover);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nPopoverArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Popover;\nconst Anchor = PopoverAnchor;\nconst Trigger = PopoverTrigger;\nconst Portal = PopoverPortal;\nconst Content = PopoverContent;\nconst Close = PopoverClose;\nconst Arrow = PopoverArrow;\n\nexport {\n  createPopoverScope,\n  //\n  Popover,\n  PopoverAnchor,\n  PopoverTrigger,\n  PopoverPortal,\n  PopoverContent,\n  PopoverClose,\n  PopoverArrow,\n  //\n  Root,\n  Anchor,\n  Trigger,\n  Portal,\n  Content,\n  Close,\n  Arrow,\n};\nexport type {\n  PopoverProps,\n  PopoverAnchorProps,\n  PopoverTriggerProps,\n  PopoverPortalProps,\n  PopoverContentProps,\n  PopoverCloseProps,\n  PopoverArrowProps,\n};\n"]},"metadata":{},"sourceType":"module"}